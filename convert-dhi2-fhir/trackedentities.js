// Generated by CoffeeScript 1.8.0
(function() {
  var app, encounters, express, records, server;
  express = require("express");
  var bodyParser = require('body-parser');
  //var http = require('http');
  var session = require('express-session');
  var entityAPI =require ("./lib/api");
  var fhirStructureAPI =require ("./lib/fhirStructure");
  var entitieTrackedMapping= entityAPI.GetTrackedEntitiesMapping();
  var practitionerObservationPerformerAttributesMapping= entityAPI.getPractitionerObservationPerformerAttributesMapping();
  var practitionerSpecimenHandlingAttributesMapping= entityAPI.getPractitionerSpecimenHandlingAttributesMapping();
  var practitionerAttributesMapping= entityAPI.getPractitionerAttributesMapping();
  var patientAttributesMapping= entityAPI.GetPatientAttributesMapping();
  var specimenAttributesMapping= entityAPI.GetSpecimenAttributesMapping();
  var orderAttributesMapping= entityAPI.getOrderAttributesMapping();
  var observationAttributesMapping= entityAPI.getObservationAttributesMapping();
  var diagnosticReportAttributesMapping= entityAPI.getDiagnosticReportAttributesMapping();
  var conditionAttributesMapping= entityAPI.getConditionAttributesMapping();
  var listAttributesMapping= entityAPI.getListAttributesMapping();
  var progAndStagesTracked= entityAPI.getProgramsAndStagesToTrack();
  var Identifier=fhirStructureAPI.Identifier;
  var Organization=fhirStructureAPI.Organization;
  var CodeableConcept=fhirStructureAPI.CodeableConcept;
  var Address=fhirStructureAPI.Address;
  var Patient=fhirStructureAPI.Patient;
  var HumanName=fhirStructureAPI.HumanName;
  var ContactPoint=fhirStructureAPI.ContactPoint;
  var Practitioner=fhirStructureAPI.Practitioner;
  var PractitionerRole=fhirStructureAPI.PractitionerRole;
  var Specimen=fhirStructureAPI.Specimen;
  var OrderEvent=fhirStructureAPI.OrderEvent;
  var Collection=fhirStructureAPI.Collection;
  var Container=fhirStructureAPI.Container;
  var DiagnosticOrder=fhirStructureAPI.DiagnosticOrder;
  var Observation=fhirStructureAPI.Observation;
  var SampledData=fhirStructureAPI.SampledData;
  var Quantity=fhirStructureAPI.Quantity;
  var Period=fhirStructureAPI.Period;
  var Range=fhirStructureAPI.Range;
  var Ratio=fhirStructureAPI.Ratio;
  var DiagnosticReport=fhirStructureAPI.DiagnosticReport;
  var Condition=fhirStructureAPI.Condition;
  var List=fhirStructureAPI.List;
  var Basic=fhirStructureAPI.Basic;
  var Entry=fhirStructureAPI.Entry;
  var Bundle=fhirStructureAPI.Bundle;
  var dataFileLocation=entityAPI.getLocationDataFile();
  var sourceFileLocation=entityAPI.getLocationSourceFile();
  var bundleTempLocation=entityAPI.getLocationTempResource();
  var vitalStatus=entityAPI.getVitalStatus();
  var practitionerStageNatureList=entityAPI.getPractitionerStageNature();
  var formatPatientId=entityAPI.getFormatPatientId();
  var formatSpecimenId=entityAPI.getFormatSpecimenId();
  var listAttributeWithOptionSetValues=entityAPI.getAttributeWithOptionSetValue();
  //console.log(Identifier);
	//Check if the mapping has been done between trackers attributes and fhir attributes
	
	function checkMappingExist()
	{
		var mappingPatientDone=false;
		var mappingPractitionerDone=false;
		var mappingSpecimenDone=false;
		var mappingDiagnosticOrderDone=false;
		var mappingObservationDone=false;
		var mappingDiagnosticReportDone=false;
		//Check the patient attribute mapping
		if (patientAttributesMapping.managingOrganization!=""||
		patientAttributesMapping.identifier!="" || 
		patientAttributesMapping.name_family!="" || 
		patientAttributesMapping.name_given!="" || 
		patientAttributesMapping.telecom_phone!="" || 
		patientAttributesMapping.telecom_email!="" || 
		patientAttributesMapping.gender!="" || 
		patientAttributesMapping.birthDate!="" || 
		patientAttributesMapping.address!=""  )
		{
			mappingPatientDone=true;
			//console.log("Patient:"+mappingPatientDone);
		}
		if(practitionerAttributesMapping.identifier!=""|| 
		    practitionerAttributesMapping.name_family!=""|| 
		    practitionerAttributesMapping.name_given!=""|| 
		    practitionerAttributesMapping.gender!=""|| 
		    practitionerAttributesMapping.telecom_phone!=""|| 
		    practitionerAttributesMapping.telecom_email!=""|| 
		    practitionerAttributesMapping.address!="")
		{
			mappingPractitionerDone=true;
			//console.log("Practitioner:"+mappingPatientDone);
		}
		if(specimenAttributesMapping.identifier!=""|| 
			specimenAttributesMapping.status!=""|| 
			specimenAttributesMapping.type!=""|| 
			specimenAttributesMapping.subject!=""|| 
			specimenAttributesMapping.accession!=""|| 
			specimenAttributesMapping.receivedTime!=""|| 
			specimenAttributesMapping.collectedDateTime!=""|| 
			specimenAttributesMapping.collection_quantity_unit!=""|| 
			specimenAttributesMapping.collection_quantity_value!=""|| 
			specimenAttributesMapping.collection_method!=""|| 
			specimenAttributesMapping.collection_bodySite!=""|| 
			specimenAttributesMapping.container_identifier!=""|| 
			specimenAttributesMapping.container_capacity_unit!=""|| 
			specimenAttributesMapping.container_capacity_value!=""|| 
			specimenAttributesMapping.container_description!=""|| 
			specimenAttributesMapping.traitment_description!=""|| 
			specimenAttributesMapping.traitment_procedure!="")
		{
			mappingSpecimenDone=true;
			//console.log("Specimen:"+mappingPatientDone);
		}
		if(orderAttributesMapping.identifier!=""|| 
			orderAttributesMapping.subject!=""|| 
			orderAttributesMapping.orderer!=""|| 
			orderAttributesMapping.encounter!=""|| 
			orderAttributesMapping.reason!=""|| 
			orderAttributesMapping.supportingInformation!=""|| 
			orderAttributesMapping.specimen!=""|| 
			orderAttributesMapping.status!=""|| 
			orderAttributesMapping.priority!=""|| 
			orderAttributesMapping.orderEvent_dateTime!=""|| 
			orderAttributesMapping.orderEvent_status!=""|| 
			orderAttributesMapping.orderEvent_description!=""|| 
			orderAttributesMapping.item!=""|| 
			orderAttributesMapping.note!="")
		{
			mappingDiagnosticOrderDone=true;
			//console.log("Order:"+mappingPatientDone);
		} 
		if(observationAttributesMapping.identifier!=""||
			observationAttributesMapping.status!=""||
			observationAttributesMapping.category!=""||
			observationAttributesMapping.code!=""||
			observationAttributesMapping.subject!=""||
			observationAttributesMapping.encounter!=""||
			observationAttributesMapping.effectiveDateTime!=""||
			observationAttributesMapping.effectivePeriod_dateSup!=""||
			observationAttributesMapping.effectivePeriod_dateInf!=""||
			observationAttributesMapping.issued!=""||
			observationAttributesMapping.performer!=""||
			observationAttributesMapping.valueQuantity_unit!=""||
			observationAttributesMapping.valueQuantity_value!=""||
			observationAttributesMapping.valueCodeableConcept!=""||
			observationAttributesMapping.valueString!=""||
			observationAttributesMapping.valueRange_sup!=""||
			observationAttributesMapping.valueRange_Inf!=""||
			observationAttributesMapping.valueRatio_num!=""||
			observationAttributesMapping.valueRatio_denom!=""||
			observationAttributesMapping.valueSampledData_origin!=""||
			observationAttributesMapping.valueSampledData_period!=""||
			observationAttributesMapping.valueSampledData_factor!=""||
			observationAttributesMapping.valueSampledData_lowerLimit!=""||
			observationAttributesMapping.valueSampledData_upperLimit!=""||
			observationAttributesMapping.valueSampledData_dimensions!=""||
			observationAttributesMapping.valueSampledData_data!=""||
			observationAttributesMapping.valueTime!=""||
			observationAttributesMapping.valueDateTime!=""||
			observationAttributesMapping.valuePeriod_start!=""||
			observationAttributesMapping.valuePeriod_end!=""||
			observationAttributesMapping.dataAbsentReason!=""||
			observationAttributesMapping.interpretation!=""||
			observationAttributesMapping.comments!=""||
			observationAttributesMapping.bodySite!=""||
			observationAttributesMapping.method!=""||
			observationAttributesMapping.specimen!=""||
			observationAttributesMapping.device!=""||
			observationAttributesMapping.referenceRange!=""||
			observationAttributesMapping.related!=""||
			observationAttributesMapping.component!="")
			{
				mappingObservationDone=true;
				//console.log("Observation:"+mappingPatientDone);
			}
		if(diagnosticReportAttributesMapping.identifier!=""||
			diagnosticReportAttributesMapping.status!=""||
			diagnosticReportAttributesMapping.category!=""||
			diagnosticReportAttributesMapping.code!=""||
			diagnosticReportAttributesMapping.subject!=""||
			diagnosticReportAttributesMapping.encounter!=""||
			diagnosticReportAttributesMapping.effectiveDateTime!=""||
			diagnosticReportAttributesMapping.effectivePeriod_start!=""||
			diagnosticReportAttributesMapping.effectivePeriod_end!=""||
			diagnosticReportAttributesMapping.issued!=""||
			diagnosticReportAttributesMapping.performer!=""||
			diagnosticReportAttributesMapping.request!=""||
			diagnosticReportAttributesMapping.specimen!=""||
			diagnosticReportAttributesMapping.result!=""||
			diagnosticReportAttributesMapping.imagingStudy!=""||
			diagnosticReportAttributesMapping.image!=""||
			diagnosticReportAttributesMapping.conclusion!=""||
			diagnosticReportAttributesMapping.codedDiagnosis!=""||
			diagnosticReportAttributesMapping.presentedForm!="")
		{
			mappingDiagnosticReportDone=true;
			//console.log("Report:"+mappingPatientDone);
		}
		    
		if(mappingPatientDone==true || mappingPractitionerDone==true || mappingSpecimenDone==true
		|| mappingDiagnosticOrderDone==true || mappingDiagnosticReportDone==true)
		{
			return true;
		}
		else
		{
			return false;
		}
		
		
	}

	function SearchOrgUnitInThelist(idOrgUnit,OrgUnitsList)
	{
		var orgUnitFound=null;
		for(var i=0;i<OrgUnitsList.length;i++)
		{
			if(OrgUnitsList[i].id==idOrgUnit)
			{
				orgUnitFound=OrgUnitsList[i];
				break;
			}
			else
			{
				continue;
			}

		}
		return orgUnitFound;
	}
	//Build the hierarchy of Fhir Organization ressources from the list of organization unit
	function BuildOrganizationHierarchy(OrgUnitsList)
	{
		var organizationList=[];
		var baselevel1=1;
		//console.log("Trace: "+OrgUnitsList.length);
		for(var i=0; i<OrgUnitsList.length;i++)
		{
			//Search for the OrgUnit with the lowest level: 1
			var oOrgUnit= OrgUnitsList[i];
			//console.log("Trace: ");
			//console.log(oOrgUnit.level==baselevel1);
			if(oOrgUnit.level==baselevel1 && oOrgUnit.dimensionItemType=="ORGANISATION_UNIT")
			{
				//console.log("Trace: Enter1"+JSON.stringify(oOrgUnit));
				//initialisation
				var org={};
				org= Object.create(Organization);
				org.resourceType="Organization";
				var orgIdentifier={};
				orgIdentifier=Object.create(Identifier);
				//assignment of Identifier
				orgIdentifier.use="official";
				orgIdentifier.type={"text":"DHIS2 Internal Identifier"};
				orgIdentifier.system="DHIS2 ID System";
				orgIdentifier.value=oOrgUnit.id;
				//assignment of type
				var orgUnitCoding=Object.create(CodeableConcept);
				orgUnitCoding.coding=[{"system":"https://www.hl7.org/fhir"}];
				orgUnitCoding.text=oOrgUnit.shortName;
				org.type=orgUnitCoding;
				//assigment of OrgUnit
				org.id=oOrgUnit.id;
				org.meta={"lastUpdated":formatDateInZform(oOrgUnit.lastUpdated)};
				org.identifier=[orgIdentifier];
				org.name=oOrgUnit.name;
				organizationList.push(org);
				if(oOrgUnit.children.length>0)
				{
					//level 2
					//console.log("Trace: Enter2");
					var baselevel2=baselevel1+1;
					for(var j=0; j<oOrgUnit.children.length;j++){
					//initialisation
					var oOrgUnit2=SearchOrgUnitInThelist(oOrgUnit.children[j].id,OrgUnitsList);
					if(oOrgUnit2.level==baselevel2 && oOrgUnit2.dimensionItemType=="ORGANISATION_UNIT")
					{
						//console.log("#####################");
						var org2={};
						org2=Object.create(Organization);
						org2.resourceType="Organization";
						orgIdentifier={};
						orgIdentifier=Object.create(Identifier);
						//assignment of Identifier
						orgIdentifier.use="official";
						orgIdentifier.type={"text":"DHIS2 Internal Identifier"};
						orgIdentifier.system="DHIS2 ID System";
						orgIdentifier.value=oOrgUnit2.id;
						//assignment of type
						orgUnitCoding=Object.create(CodeableConcept);
						orgUnitCoding.coding=[{"system":"https://www.hl7.org/fhir"}];
						orgUnitCoding.text=oOrgUnit.shortName;
						org2.type=orgUnitCoding;
						//assigment of OrgUnit
						org2.id=oOrgUnit2.id;
						org2.meta={"lastUpdated": formatDateInZform(oOrgUnit2.lastUpdated)};
						org2.identifier=[orgIdentifier];
						org2.name=oOrgUnit2.name;
						org2.partOf={"reference":"Organization/"+oOrgUnit.id}
						//org2.partOf=oOrgUnit.id;
						organizationList.push(org2);
						if(oOrgUnit2.children.length>0)
						{
							//level 3
							var baselevel3=baselevel1+2;
							for(var k=0; k<oOrgUnit2.children.length;k++){
							//initialisation
							var oOrgUnit3=SearchOrgUnitInThelist(oOrgUnit2.children[k].id,OrgUnitsList);
							if(oOrgUnit3.level==baselevel3 && oOrgUnit3.dimensionItemType=="ORGANISATION_UNIT")
							{
								var org3={};
								org3=Object.create(Organization);
								org3.resourceType="Organization";
								orgIdentifier={};
								orgIdentifier=Object.create(Identifier);
								//assignment of Identifier
								orgIdentifier.use="official";
								orgIdentifier.type={"text":"DHIS2 Internal Identifier"};
								orgIdentifier.system="DHIS2 ID System";
								orgIdentifier.value=oOrgUnit3.id;
								//assignment of type
								orgUnitCoding=Object.create(CodeableConcept);
								orgUnitCoding.coding=[{"system":"https://www.hl7.org/fhir"}];
								orgUnitCoding.text=oOrgUnit.shortName;
								org3.type=orgUnitCoding;
								//assigment of OrgUnit
								org3.id=oOrgUnit3.id;
								org3.meta={"lastUpdated":formatDateInZform(oOrgUnit3.lastUpdated)};
								org3.identifier=[orgIdentifier];
								org3.name=oOrgUnit3.name;
								//org3.partOf=oOrgUnit2.id;
								org3.partOf={"reference":"Organization/"+oOrgUnit2.id}
								organizationList.push(org3);
								if(oOrgUnit3.children.length>0)
								{
									//level 4
									var baselevel4=baselevel1+3;
									for(var l=0; l<oOrgUnit3.children.length;l++){
									//initialisation
									//var oOrgUnit4= oOrgUnit3.children[l];
									var oOrgUnit4=SearchOrgUnitInThelist(oOrgUnit3.children[l].id,OrgUnitsList);
									if(oOrgUnit4.level==baselevel4 && oOrgUnit4.dimensionItemType=="ORGANISATION_UNIT")
									{
										var org4={};
										org4=Object.create(Organization);
										org4.resourceType="Organization";
										orgIdentifier={};
										orgIdentifier=Object.create(Identifier);
										//assignment of Identifier
										orgIdentifier.use="official";
										orgIdentifier.type={"text":"DHIS2 Internal Identifier"};
										orgIdentifier.system="DHIS2 ID System";
										orgIdentifier.value=oOrgUnit4.id;
										//assignment of type
										orgUnitCoding=Object.create(CodeableConcept);
										orgUnitCoding.coding=[{"system":"https://www.hl7.org/fhir"}];
										orgUnitCoding.text=oOrgUnit.shortName;
										org4.type=orgUnitCoding;
										//assigment of OrgUnit
										org4.id=oOrgUnit4.id;
										org4.meta={"lastUpdated":formatDateInZform(oOrgUnit4.lastUpdated)};
										org4.identifier=[orgIdentifier];
										org4.name=oOrgUnit4.name;
										//org4.partOf=oOrgUnit3.id;
										org4.partOf={"reference":"Organization/"+oOrgUnit3.id}
										organizationList.push(org4);
										//console.log("org4: "+JSON.stringify(organizationList[3]));
									}
									}
									//console.log("org3: "+JSON.stringify(organizationList[2]));
								}
							}
							
							
							}
						}
					}
					else{
						continue;
						}
					
					}
				}
				
			}
			else
			{
				continue;
			}
			//if(oOrgUnit.)
		}
		
		return organizationList;
	}
	//Format the string date ISO8601 from DHIS2 in Zform (Zulu time Zone) whikch is the format accepted by HAPI Fhir Server
	//The format looks like  yyyy-mm-ddThh:mm:ss+zz:zz ; the last part is the zone indicator
	function formatDateInZform(originalDate)
	{
		var formatedDate="";
		var dateComponants=[];
		//Check if at least it is timedate format
		var dateCorrected="";
		if(originalDate.includes("T")==false)
		{
			dateCorrected=originalDate.replace(" ","T");    
			//console.log("date: "+originalDate);                 
		}
		else
		{
			dateCorrected=originalDate;
		}
		var dateComponants=dateCorrected.split("+");
		if(dateComponants.length>0)
		{
			formatedDate=dateComponants[0];//+"+00:00"
			//formatedDate+="+00:00";
			if(formatedDate.includes("Z")||formatedDate.includes("z"))
			{
				var dateComponant2=formatedDate.split("Z");
				formatedDate=dateComponant2[0];
			}
			/*
			else
			{
				//formatedDate+="+00:00";
				formatedDate+="Z";
			}
			* */
		}
		return formatedDate;
	}
	//Return date in the form of yyyy-mm-dd when the input could be number of year,dd/mm/yyyy or 
	//even yyyy-mm-dd. The Fhir standard format requires at least 2 characters for day and month
	function processDateFromCSVFile(originalDate)
	{
		var birthDate="";
		if(originalDate!="" && originalDate.includes("-")==false 
		 && originalDate.includes("/")==false)
		{
			var currentYear=new Date().getFullYear();
			var ageOfPatient=parseInt(originalDate);
			var yearOfBirth=currentYear-ageOfPatient;
			//console.log(yearOfBirth);
			var dateOfBirth=""+yearOfBirth+"-01-01";
			birthDate=dateOfBirth;
			//console.log(new Date().getFullYear()-patientAttributesMapping.birthDate);
		}
		else if(originalDate!="" && originalDate.includes("-")==true)
		{
			var dateToProcess="";
			//birthDate=originalDate;
			var indexYear= parseInt((originalDate.split("-"))[2]);
			var year="";
			var month="";
			var day="";
			if(indexYear>1900)
			{
				year=(originalDate.split("-"))[2];
				month=(originalDate.split("-"))[1];
				day=(originalDate.split("-"))[0];
			}
			else
			{
				year=(originalDate.split("-"))[0];
				month=(originalDate.split("-"))[1];
				day=(originalDate.split("-"))[2];
			}
			
			if(month.length==1)
			{
				month="0"+month;
			}
			
			if(day.length==1)
			{
				day="0"+day;
			}
			dateToProcess=year+"-"+month+"-"+day;
			birthDate=dateToProcess;
			
		}
		else if(originalDate!="" && originalDate.includes("/")==true)
		{
			//oPatient.birthDate=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]];
			var dateToProcess="";
			//var year=(originalDate.split("/"))[2];
			var indexYear= parseInt((originalDate.split("/"))[2]);
			var year="";
			var month="";
			var day="";
			if(indexYear>1900)
			{
				year=(originalDate.split("/"))[2];
				month=(originalDate.split("/"))[1];
				day=(originalDate.split("/"))[0];
			}
			else
			{
				year=(originalDate.split("/"))[0];
				month=(originalDate.split("/"))[1];
				day=(originalDate.split("/"))[2];
			}
			if(month.length==1)
			{
				month="0"+month;
			}
			if(day.length==1)
			{
				day="0"+day;
			}
			dateToProcess=year+"-"+month+"-"+day;
			birthDate=dateToProcess;
			//PatientSet=true;
		}
		return birthDate;												
	}
	//Return True is the format is similar to the date 
	function checkIfRecordIsDate(record)
	{
		var isDate=false;
		
		if(record!="" && record.includes("/")==true)
		{
			//check if it contains 2 "/"
			var res=record.split("/").length-1;
			if(res==2)
			{
				isDate=true;
			}
		}
		else if (record!="" && record.includes("-")==true)
		{
			//check if it contains 2 "/"
			var res=record.split("-").length-1;
			if(res==2)
			{
				isDate=true;
			}
		}
		return isDate;
	}
	
	function extractDateFromDateTime(originalDate)
	{
		var formatedDate="";
		//Check if at least it is timedate format
		var dateCorrected="";
		if(originalDate.includes("T")==false)
		{
			dateCorrected=originalDate.replace(" ","T");                
		}
		else
		{
			dateCorrected=originalDate;
		}
		var dateComponant=dateCorrected.split("T")[0];
		return dateComponant;
	}
	//Get the recent date from the list of date
	function getRecentDate(listOfDate)
	{
		
		var recentDate=new Date(listOfDate[0]);
		var recentDateString =listOfDate[0];
		for(var i=1;i<listOfDate.length;i++)
		{
			var dateToCompare=new Date(listOfDate[i]);
			if(dateToCompare>recentDate)
			{
				recentDate=dateToCompare;
				recentDateString=listOfDate[i];
			}
		}
		return recentDateString;
	}
	//Get the oldest date from the list of date
	function getOldDate(listOfDate)
	{
		
		var recentDate=new Date(listOfDate[0]);
		var recentDateString =listOfDate[0];
		for(var i=1;i<listOfDate.length;i++)
		{
			var dateToCompare=new Date(listOfDate[i]);
			if(dateToCompare<recentDate)
			{
				recentDate=dateToCompare;
				recentDateString=listOfDate[i];
			}
		}
		return recentDateString;
	}
	//Return the gender Fhir code for input string
	function getAssociatedGenderValueSet(_genderValue)
	{
		var valueSet="";
		if(_genderValue.toLowerCase()=="m"|| _genderValue.toLowerCase()=="male")
		{
			valueSet="male";
		}
		else if(_genderValue.toLowerCase()=="f"|| _genderValue.toLowerCase()=="female")
		{
			valueSet="female";
		}
		else if(_genderValue!="")
		{
			valueSet="other";
		}
		return valueSet;
	}
	//Return Fhir boolean code associated to the <deceasedBoolean> attribute of patient
	function getAssociatedVitalStatusValueSet(_vitalStatusValue)
	{
		var valueSet=false;
		if(_vitalStatusValue.toLowerCase()=="alive")
		{
			valueSet=false;
		}
		else if(_vitalStatusValue.toLowerCase()=="dead")
		{
			valueSet=true;
		}
		return valueSet;
	}
	//ToDo: Delete
	function GetAssociatedFhirResource(oTrackedEntity)
	{
		const entityCode=oTrackedEntity.trackedEntity;
		var entityObject=null;
		switch(entityCode)
		{
			case entitieTrackedMapping.patient:
				//extract patient attribute
				//console.log(oTrackedEntity);
				var oPatient={};
				oPatient= Object.create(Patient);
				oPatient.resourceType="Patient";
				oPatient.id=oTrackedEntity.trackedEntityInstance;
				oPatient.meta={"lastUpdated": formatDateInZform(oTrackedEntity.lastUpdated)};
				oPatient.active=true;
				//oPatient.managingOrganization=oTrackedEntity.orgUnit;
				oPatient.managingOrganization={"reference":"Organization/"+oTrackedEntity.orgUnit}
				var oName={};
				oName= Object.create(HumanName);
				oName.resourceType="HumanName";
				oName.use="official";
				//
				var oContact={};
				oContact= Object.create(ContactPoint);
				oContact.resourceType="ContactPoint";
				var oAddress={};
				oAddress= Object.create(Address);
				oAddress.resourceType="Address";
				
				var listOfIdentifier=[];
				var firstEntry=false;
				for(var i=0;i<oTrackedEntity.attributes.length;i++)
				{
					var oAttribute=oTrackedEntity.attributes[i].displayName;
					switch(oAttribute)
					{
						case patientAttributesMapping.identifier:
							var orgIdentifier={};
							orgIdentifier=Object.create(Identifier);
							//assignment of Identifier
							orgIdentifier.use="official";
							orgIdentifier.type={"text":"Medical Record Number"};
							orgIdentifier.system="http://hl7.org/fhir/";
							orgIdentifier.value=oTrackedEntity.attributes[i].value;
							listOfIdentifier.push(orgIdentifier);
							break;
						case patientAttributesMapping.name_family:
							oName.family=oTrackedEntity.attributes[i].value;
							oName.text+=oTrackedEntity.attributes[i].value+" ";
						break;
						case patientAttributesMapping.name_given:
							oName.given=oTrackedEntity.attributes[i].value;
							oName.text+=oTrackedEntity.attributes[i].value+" ";
						break;
						case patientAttributesMapping.telecom_phone:
							oContact.system="phone";
							oContact.value=oTrackedEntity.attributes[i].value;
							oContact.use="home";
							oContact.rank="1";
							oPatient.telecom=[oContact];
						break;
						case patientAttributesMapping.telecom_email:
							oContact.system="email";
							oContact.value=oTrackedEntity.attributes[i].value;
							oContact.use="home";
							oContact.rank="2";
							oPatient.telecom=[oContact];
						break;
						case patientAttributesMapping.gender:
							if(getAssociatedGenderValueSet(oTrackedEntity.attributes[i].value)!="")
							{
								oPatient.gender=getAssociatedGenderValueSet(oTrackedEntity.attributes[i].value);
							}
						break;
						case patientAttributesMapping.birthDate:
							oPatient.birthDate=oTrackedEntity.attributes[i].value;
						break;
						case patientAttributesMapping.address:
							oAddress.text=oTrackedEntity.attributes[i].value
							oPatient.address=[oAddress];
						break;
						
					}
				}//fin for
				oPatient.identifier=listOfIdentifier;
				//oPatient.active=true;
				oPatient.deceasedBoolean=false;
				oPatient.name=[oName];
				entityObject=oPatient;
				break;
				
			case entitieTrackedMapping.provider:
				//extract patient attribute
				var oPractitioner={};
				oPractitioner= Object.create(Practitioner);
				oPractitioner.resourceType="Practitioner";
				oPractitioner.id=oTrackedEntity.trackedEntityInstance;
				oPractitioner.meta={"lastUpdated": formatDateInZform(oTrackedEntity.lastUpdated)};
				oPractitioner.active=true;
				oPractitioner.practitionerRole=[{"managingOrganization": {"reference":"Organization/"+oTrackedEntity.orgUnit}}];
				var oName={};
				oName= Object.create(HumanName);
				oName.resourceType="HumanName";
				oName.use="official";
				//
				var oContact={};
				oContact= Object.create(ContactPoint);
				oContact.resourceType="ContactPoint";
				
				var listOfIdentifier=[];
				for(var i=0;i<oTrackedEntity.attributes.length;i++)
				{
					var oAttribute=oTrackedEntity.attributes[i].displayName;
					switch(oAttribute)
					{
						case practitionerAttributesMapping.identifier:
							var orgIdentifier={};
							orgIdentifier=Object.create(Identifier);
							//assignment of Identifier
							orgIdentifier.use="official";
							orgIdentifier.type={"text":"License Number"};
							orgIdentifier.system="http://hl7.org/fhir/";
							orgIdentifier.value=oTrackedEntity.attributes[i].value;
							listOfIdentifier.push(orgIdentifier);
							break;
						case practitionerAttributesMapping.name_family:
							oName.family=oTrackedEntity.attributes[i].value;
							oName.text+=oTrackedEntity.attributes[i].value+" ";
						break;
						case practitionerAttributesMapping.name_given:
							oName.given=oTrackedEntity.attributes[i].value;
							oName.text+=oTrackedEntity.attributes[i].value+" ";
						break;
						case practitionerAttributesMapping.telecom_phone:
							oContact.system="phone";
							oContact.value=oTrackedEntity.attributes[i].value;
							oContact.use="home";
							oContact.rank="1";
							oPractitioner.telecom=[oContact];
						break;
						case practitionerAttributesMapping.telecom_email:
							oContact.system="email";
							oContact.value=oTrackedEntity.attributes[i].value;
							oContact.use="home";
							oContact.rank="2";
							oPractitioner.telecom=[oContact];
						break;
						case practitionerAttributesMapping.gender:
							if(getAssociatedGenderValueSet(oTrackedEntity.attributes[i].value)!="")
							{
								oPractitioner.gender=getAssociatedGenderValueSet(oTrackedEntity.attributes[i].value);
							}
						break;
					}
					
				}
				oPractitioner.identifier=listOfIdentifier;
				oPractitioner.name=oName;
				entityObject=oPractitioner;
				break;
			case entitieTrackedMapping.specimen:
				var oSpecimen={};
				oSpecimen= Object.create(Specimen);
				oSpecimen.resourceType="Specimen";
				oSpecimen.id=oTrackedEntity.trackedEntityInstance;
				oSpecimen.meta={"lastUpdated": formatDateInZform(oTrackedEntity.lastUpdated)};
				oSpecimen.active=true;
				var listOfIdentifier=[];
				var listOfTraitment=[];
				var oConceptProcedure={};
				oConceptProcedure= Object.create(CodeableConcept);
				var oConceptCollectionMethod={};
				oConceptCollectionMethod= Object.create(CodeableConcept);
				var oConceptBodySite={};
				oConceptBodySite= Object.create(CodeableConcept);
				//oConceptProcedure.
				var oTraitment={
					"description":"",
					"procedure":{}
					};
				var oCollection={};
				oCollection= Object.create(Collection);
				var oContainer={};
				oContainer= Object.create(Container);
				
				for(var i=0;i<oTrackedEntity.attributes.length;i++)
				{
					var oAttribute=oTrackedEntity.attributes[i].displayName;
					switch(oAttribute)
					{
						case specimenAttributesMapping.identifier:
							var orgIdentifier={};
							orgIdentifier=Object.create(Identifier);
							//assignment of Identifier
							orgIdentifier.use="official";
							orgIdentifier.type={"text":"Specimen Identification"};
							orgIdentifier.system="http://hl7.org/fhir/";
							orgIdentifier.value=oTrackedEntity.attributes[i].value;
							listOfIdentifier.push(orgIdentifier);
							break;
						case specimenAttributesMapping.status:
							oSpecimen.status=oTrackedEntity.attributes[i].value;
							oSpecimen.status="available";
							break;
						case specimenAttributesMapping.subject:
							oSpecimen.subject={"reference":"Patient/"+oTrackedEntity.attributes[i].value};
							break;
						case specimenAttributesMapping.accession:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							oIdentifier.use="official";
							oIdentifier.type={"text":"Lab Identification"};
							oIdentifier.system="http://hl7.org/fhir";
							oIdentifier.value=oTrackedEntity.attributes[i].value;
							oSpecimen.accession=oIdentifier;
							break;
						case specimenAttributesMapping.receivedTime:
							oSpecimen.receivedTime=oTrackedEntity.attributes[i].value;
							break;
						case specimenAttributesMapping.collectedDateTime:
							oCollection.collectedDateTime=oTrackedEntity.attributes[i].value;
							break;
						case specimenAttributesMapping.collection_quantity_unit:
							oCollection.quantity.unit=oTrackedEntity.attributes[i].value;
							break;
						case specimenAttributesMapping.collection_quantity_value:
							oCollection.quantity.value=oTrackedEntity.attributes[i].value;
							break;
						case specimenAttributesMapping.collection_method:
							oConceptCollectionMethod.text=oTrackedEntity.attributes[i].value;
							oCollection.method=oConceptCollectionMethod;
							break;
						case specimenAttributesMapping.collection_bodySite:
							oConceptBodySite.text=oTrackedEntity.attributes[i].value;
							oCollection.bodySite=oConceptBodySite;
							break;
						case specimenAttributesMapping.container_capacity_unit:
							oContainer.capacity.unit=oTrackedEntity.attributes[i].value;
							break;
						case specimenAttributesMapping.container_capacity_value:
							oContainer.capacity.value=oTrackedEntity.attributes[i].value;
							break;
						case specimenAttributesMapping.container_description:
							oContainer.description=oTrackedEntity.attributes[i].value;
							break;
						case specimenAttributesMapping.traitment_description:
							oTraitment.description=oTrackedEntity.attributes[i].value;
							break;
						case specimenAttributesMapping.traitment_procedure:
							oConceptProcedure.text=oTrackedEntity.attributes[i].value;
							oTraitment.procedure=oConceptProcedure;
							break;
						case specimenAttributesMapping.container_identifier:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"Container Identification"};
							oIdentifier.system="http://hl7.org/fhir";
							oIdentifier.value=oTrackedEntity.attributes[i].value;
							oContainer.Identifier=[oIdentifier];
							break;
					}
					
				}
				oSpecimen.Identifier=listOfIdentifier;
				//oSpecimen.status="available";
				oSpecimen.collection=oCollection;
				oSpecimen.treatment=[oTraitment];
				oSpecimen.Container=[oContainer];
				entityObject=oSpecimen;
				break;
			case entitieTrackedMapping.order:
				var oOrder={};
				oOrder= Object.create(DiagnosticOrder);
				oOrder.resourceType="DiagnosticOrder";
				oOrder.id=oTrackedEntity.trackedEntityInstance;
				oOrder.meta={"lastUpdated": formatDateInZform(oTrackedEntity.lastUpdated)};
				//oOrder.
				var listOfIdentifier=[];
				var oOrderEvent={};
				oOrderEvent= Object.create(OrderEvent);
				for(var i=0;i<oTrackedEntity.attributes.length;i++)
				{
					var oAttribute=oTrackedEntity.attributes[i].displayName;
					switch(oAttribute)
					{
						case orderAttributesMapping.identifier:
							var orgIdentifier={};
							orgIdentifier=Object.create(Identifier);
							//assignment of Identifier
							orgIdentifier.use="official";
							orgIdentifier.type={"text":"Order Identification"};
							orgIdentifier.system="http://hl7.org/fhir/";
							orgIdentifier.value=oTrackedEntity.attributes[i].value;
							listOfIdentifier.push(orgIdentifier);
							break;
						case orderAttributesMapping.subject:
							oOrder.subject={"reference":"Patient/"+oTrackedEntity.attributes[i].value};
							break;
						case orderAttributesMapping.orderer:
							oOrder.orderer={"reference":"Practitioner/"+oTrackedEntity.attributes[i].value};
							break;
						case orderAttributesMapping.encounter:
							oOrder.encounter={"reference":"Encounter/"+oTrackedEntity.attributes[i].value};
							break;
						case orderAttributesMapping.reason:
							var oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[i].value;
							oOrder.reason=[oConcept];
							break;
						case orderAttributesMapping.supportingInformation:
							oOrder.supportingInformation=[oTrackedEntity.attributes[i].value];
							break;
						case orderAttributesMapping.specimen:
							oOrder.specimen={"reference":"Specimen/"+oTrackedEntity.attributes[i].value};
							break;
						case orderAttributesMapping.status:
							oOrder.status=oTrackedEntity.attributes[i].value;
							break;
						case orderAttributesMapping.priority:
							oOrder.priority=oTrackedEntity.attributes[i].value;
							break;
						case orderAttributesMapping.orderEvent_dateTime:
							oOrderEvent.dateTime=oTrackedEntity.attributes[i].value;
							break;
						case orderAttributesMapping.orderEvent_status:
							oOrderEvent.status=oTrackedEntity.attributes[i].value;
							break;
						case orderAttributesMapping.OrderEventDescription:
							var oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[i].value;
							oOrderEvent.description=oConcept;
							break;
						case orderAttributesMapping.item:
							var oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[i].value;
							oOrder.item=[oConcept];
							break;
						case orderAttributesMapping.note:
							oOrder.note={"text":oTrackedEntity.attributes[i].value};
							break;
						
					}
					
				}
				oOrder.Identifier=listOfIdentifier;
				oOrder.event=[oOrderEvent];
				entityObject=oOrder;
				break;
			case entitieTrackedMapping.observation:
				var oObservation={};
				oObservation= Object.create(Observation);
				oObservation.resourceType="Observation";
				oObservation.id=oTrackedEntity.trackedEntityInstance;
				oObservation.meta={"lastUpdated": formatDateInZform(oTrackedEntity.lastUpdated)};
				//oOrder.
				var listOfIdentifier=[];
				var oSampledData={};
				oSampledData= Object.create(SampledData);
				var oPeriodEffective={};
				oPeriodEffective= Object.create(Period);
				var oPeriodResult={};
				oPeriodResult= Object.create(Period);
				var oValueQuantity={};
				oValueQuantity= Object.create(Quantity);
				var oOriginQuantity={};
				oOriginQuantity= Object.create(Quantity);
				var oObservationRange={};
				oObservationRange=Object.create(Range);
				var oObservationRatio={};
				oObservationRatio=Object.create(Ratio);
				var oBodySiteConcept={};
				oBodySiteConcept=Object.create(CodeableConcept);
				var oAbsentRaisonConcept={};
				oAbsentRaisonConcept=Object.create(CodeableConcept);
				
				for(var i=0;i<oTrackedEntity.attributes.length;i++)
				{
					var oAttribute=oTrackedEntity.attributes[i].displayName;
					switch(oAttribute)
					{
						case observationAttributesMapping.identifier:
							var orgIdentifier={};
							orgIdentifier=Object.create(Identifier);
							//assignment of Identifier
							orgIdentifier.use="official";
							orgIdentifier.type={"text":"Observation Identification"};
							orgIdentifier.system="http://hl7.org/fhir/";
							orgIdentifier.value=oTrackedEntity.attributes[i].value;
							listOfIdentifier.push(orgIdentifier);
							break;
						case observationAttributesMapping.status:
							oObservation.status=oTrackedEntity.attributes[i].value;
							break;
						case observationAttributesMapping.category:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[i].value;
							oObservation.category=oConcept;
							break;
						case observationAttributesMapping.code:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[i].value;
							oObservation.code=oConcept;
							break;
						case observationAttributesMapping.subject:
							oObservation.subject={"reference":"Patient/"+oTrackedEntity.attributes[i].value};
							break;
						case observationAttributesMapping.encounter:
							oObservation.encounter={"reference":"Encounter/"+oTrackedEntity.attributes[i].value};
							break;
						case observationAttributesMapping.effectiveDateTime:
							oObservation.effectiveDateTime=oTrackedEntity.attributes[i].value;
							break;
						case observationAttributesMapping.effectivePeriod_dateSup:
							oPeriodEffective.end= formatDateInZform(oTrackedEntity.attributes[i].value);
							break;
						case observationAttributesMapping.effectivePeriod_dateInf:
							oPeriodEffective.start=formatDateInZform(oTrackedEntity.attributes[i].value);
							break;
						case observationAttributesMapping.issued:
							oObservation.issued=oTrackedEntity.attributes[i].value;
							break;
						case observationAttributesMapping.performer:
								oObservation.performer=[{"reference":"Practitioner/"+oTrackedEntity.attributes[i].value}];
							break;
						case observationAttributesMapping.valueQuantity_unit:
								oValueQuantity.unit=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valueQuantity_value:
								oValueQuantity.value=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valueCodeableConcept:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[i].value;
								oObservation.valueCodeableConcept=oConcept;
								break;
						case observationAttributesMapping.valueString:
								oObservation.valueString=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valueRange_sup:
								var rangeQuantity=Object.create(Quantity);
								rangeQuantity.value=oTrackedEntity.attributes[i].value;
								oObservationRange.high=rangeQuantity;
								break;
						case observationAttributesMapping.valueRange_Inf:
								var rangeQuantity=Object.create(Quantity);
								rangeQuantity.value=oTrackedEntity.attributes[i].value;
								oObservationRange.low=rangeQuantity;
								break;
						case observationAttributesMapping.valueRatio_num:
								oObservationRatio.numerator=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valueRatio_denom:
								oObservationRatio.denominator=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valueSampledData_origin:
								oOriginQuantity.value=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valueSampledData_period:
								oSampledData.period=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valueSampledData_factor:
								oSampledData.factor=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valueSampledData_lowerLimit:
								oSampledData.lowerLimit=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valueSampledData_upperLimit:
								oSampledData.upperLimit=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valueSampledData_dimensions:
								oSampledData.dimensions=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valueSampledData_data:
								oSampledData.data=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valueTime:
								oObservation.valueTime=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valueDateTime:
								oObservation.valueDateTime=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valuePeriod_start:
								oPeriodResult.start=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.valuePeriod_end:
								oPeriodResult.end=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.dataAbsentReason:
								oAbsentRaisonConcept.text=oTrackedEntity.attributes[i].value;
								oObservation.dataAbsentReason=oAbsentRaisonConcept;
								break;
						case observationAttributesMapping.interpretation:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[i].value;
								oObservation.interpretation=oConcept;
								break;
						case observationAttributesMapping.comments:
								oObservation.comments=oTrackedEntity.attributes[i].value;
								break;
						case observationAttributesMapping.bodySite:
								oBodySiteConcept.text=oTrackedEntity.attributes[i].value;
								oObservation.bodySite=oBodySiteConcept;
								break;
						case observationAttributesMapping.method:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[i].value;
								oObservation.method=oConcept;
								break;
						case observationAttributesMapping.specimen:
								oObservation.specimen={"reference":"Specimen/"+oTrackedEntity.attributes[i].value};
								break;
						case observationAttributesMapping.device:
								oObservation.device={"reference":"Device/"+oTrackedEntity.attributes[i].value};
								break;
						case observationAttributesMapping.referenceRange:
								oObservation.referenceRange=[];
								break;
						case observationAttributesMapping.related:
								oObservation.related=[];
								break;
						case observationAttributesMapping.component:
								oObservation.component=[];
								break;
						}
				}
					oSampledData.origin=oOriginQuantity;
					oObservation.valueSampledData=oSampledData;
					oObservation.identifier=listOfIdentifier;
					oObservation.effectivePeriod=oPeriodEffective;
					oObservation.valueQuantity=oValueQuantity;
					oObservation.valueRange=oObservationRange;
					//checkIfAsProperties(oObservationRange);
					oObservation.valueRatio=oObservationRatio;
					oObservation.valuePeriod=oPeriodResult;
					
					entityObject=oObservation;
				break;
			case entitieTrackedMapping.diagnosticReport:
				var oDiagnosticReport={};
				oDiagnosticReport= Object.create(DiagnosticReport);
				oDiagnosticReport.resourceType="DiagnosticReport";
				oDiagnosticReport.id=oTrackedEntity.trackedEntityInstance;
				oDiagnosticReport.meta={"lastUpdated":formatDateInZform(oTrackedEntity.lastUpdated)};
				var listOfIdentifier=[];
				var oEffectivePeriod={};
				oEffectivePeriod= Object.create(Period);
				for(var i=0;i<oTrackedEntity.attributes.length;i++)
				{
					var oAttribute=oTrackedEntity.attributes[i].displayName;
					switch(oAttribute)
					{
						case diagnosticReportAttributesMapping.identifier:
							var orgIdentifier={};
							orgIdentifier=Object.create(Identifier);
							//assignment of Identifier
							orgIdentifier.use="official";
							orgIdentifier.type={"text":"DiagnosticReport Identification"};
							orgIdentifier.system="http://hl7.org/fhir/";
							orgIdentifier.value=oTrackedEntity.attributes[i].value;
							listOfIdentifier.push(orgIdentifier);
							break;
						case diagnosticReportAttributesMapping.status:
							oDiagnosticReport.status=oTrackedEntity.attributes[i].value;
							break;
						case diagnosticReportAttributesMapping.category:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[i].value;
							oDiagnosticReport.category=oConcept;
							break;
						case diagnosticReportAttributesMapping.code:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[i].value;
							oDiagnosticReport.code=oConcept;
							break;
						case diagnosticReportAttributesMapping.subject:
							oDiagnosticReport.subject={"reference":"Patient/"+oTrackedEntity.attributes[i].value};
							break;
						case diagnosticReportAttributesMapping.encounter:
							oDiagnosticReport.encounter={"reference":"Encounter/"+oTrackedEntity.attributes[i].value};
							break;
						case diagnosticReportAttributesMapping.effectiveDateTime:
							oDiagnosticReport.effectiveDateTime=oTrackedEntity.attributes[i].value;
							break;
						case diagnosticReportAttributesMapping.effectivePeriod_start:
							oEffectivePeriod.start=oTrackedEntity.attributes[i].value;
							break;
						case diagnosticReportAttributesMapping.effectivePeriod_end:
							oEffectivePeriod.end=oTrackedEntity.attributes[i].value;
							break;
						case diagnosticReportAttributesMapping.issued:
							oDiagnosticReport.issued=oTrackedEntity.attributes[i].value;
							break;
						case diagnosticReportAttributesMapping.performer:
							oDiagnosticReport.performer={"reference":"Practitioner/"+oTrackedEntity.attributes[i].value};
							break;
						case diagnosticReportAttributesMapping.request:
							oDiagnosticReport.request=[{"reference":"DiagnosticOrder/"+oTrackedEntity.attributes[i].value}];
							break;
						case diagnosticReportAttributesMapping.specimen:
							oDiagnosticReport.specimen=[{"reference":"Specimen/"+oTrackedEntity.attributes[i].value}];
							break;
						case diagnosticReportAttributesMapping.result:
							oDiagnosticReport.result=[{"reference":"Observation/"+oTrackedEntity.attributes[i].value}];
							break;
						case diagnosticReportAttributesMapping.imagingStudy:
							oDiagnosticReport.imagingStudy=[];
							break;
						case diagnosticReportAttributesMapping.image:
							oDiagnosticReport.image=[];
							break;
						case diagnosticReportAttributesMapping.conclusion:
							oDiagnosticReport.conclusion=oTrackedEntity.attributes[i].value;
							break;
						case diagnosticReportAttributesMapping.codedDiagnosis:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[i].value;
							oDiagnosticReport.codedDiagnosis=[oConcept];
							break;
						case diagnosticReportAttributesMapping.presentedForm:
							oDiagnosticReport.presentedForm=[];
							break;
					}
				
				}
				oDiagnosticReport.identifier=listOfIdentifier;
				oDiagnosticReport.effectivePeriod=oEffectivePeriod;
				entityObject=oDiagnosticReport;
				break;
		}
		return entityObject;
		
	}
	//Return list of mapping attribute from the manifest.webapp
	function getListOfPractitionerAttributeMapping()
	{
		var listOfAttribute=[];
		var oAttribute="";
		oAttribute=practitionerAttributesMapping.id!=""?practitionerAttributesMapping.id:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerAttributesMapping.identifier!=""?practitionerAttributesMapping.identifier:"";
		if(oAttribute!="")
		{
			var listAttributes=oAttribute.split(",");
			if(listAttributes.length>1)
			{
				for(var iterator=0;iterator<listAttributes.length;iterator++)
				{
					listOfAttribute.push(listAttributes[iterator].trim());
				}
			}
			else
			{
				listOfAttribute.push(oAttribute.trim());
			}
		}
		oAttribute="";
		oAttribute=practitionerAttributesMapping.name_family!=""?practitionerAttributesMapping.name_family:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerAttributesMapping.name_given!=""?practitionerAttributesMapping.name_given:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerAttributesMapping.gender!=""?practitionerAttributesMapping.gender:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerAttributesMapping.telecom_phone!=""?practitionerAttributesMapping.telecom_phone:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerAttributesMapping.telecom_email!=""?practitionerAttributesMapping.telecom_email:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerAttributesMapping.address!=""?practitionerAttributesMapping.address:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerAttributesMapping.practitionerRole_managingOrganization!=""?practitionerAttributesMapping.practitionerRole_managingOrganization:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerAttributesMapping.practitionerRole_role!=""?practitionerAttributesMapping.practitionerRole_role:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerAttributesMapping.practitionerRole_specialty!=""?practitionerAttributesMapping.practitionerRole_specialty:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerAttributesMapping.list_reference!=""?practitionerAttributesMapping.list_reference:"";
		if(oAttribute!="")
		{
			var listAttributes=oAttribute.split(",");
			if(listAttributes.length>1)
			{
				for(var iterator=0;iterator<listAttributes.length;iterator++)
				{
					listOfAttribute.push(listAttributes[iterator]);
				}
			}
			else
			{
				listOfAttribute.push(oAttribute);
			}
			
		}
		
		return listOfAttribute;
	}
	function getListOfPractitionerObservationPerformerAttributeMapping()
	{
		var listOfAttribute=[];
		var oAttribute="";
		oAttribute=practitionerObservationPerformerAttributesMapping.id!=""?practitionerObservationPerformerAttributesMapping.id:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerObservationPerformerAttributesMapping.identifier!=""?practitionerObservationPerformerAttributesMapping.identifier:"";
		if(oAttribute!="")
		{
			var listAttributes=oAttribute.split(",");
			if(listAttributes.length>1)
			{
				for(var iterator=0;iterator<listAttributes.length;iterator++)
				{
					listOfAttribute.push(listAttributes[iterator].trim());
				}
			}
			else
			{
				listOfAttribute.push(oAttribute.trim());
			}
		}
		oAttribute="";
		oAttribute=practitionerObservationPerformerAttributesMapping.name_family!=""?practitionerObservationPerformerAttributesMapping.name_family:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerObservationPerformerAttributesMapping.name_given!=""?practitionerObservationPerformerAttributesMapping.name_given:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerObservationPerformerAttributesMapping.gender!=""?practitionerObservationPerformerAttributesMapping.gender:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerObservationPerformerAttributesMapping.telecom_phone!=""?practitionerObservationPerformerAttributesMapping.telecom_phone:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerObservationPerformerAttributesMapping.telecom_email!=""?practitionerObservationPerformerAttributesMapping.telecom_email:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerObservationPerformerAttributesMapping.address!=""?practitionerObservationPerformerAttributesMapping.address:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerObservationPerformerAttributesMapping.practitionerRole_managingOrganization!=""?practitionerObservationPerformerAttributesMapping.practitionerRole_managingOrganization:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerObservationPerformerAttributesMapping.practitionerRole_role!=""?practitionerObservationPerformerAttributesMapping.practitionerRole_role:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerObservationPerformerAttributesMapping.practitionerRole_specialty!=""?practitionerObservationPerformerAttributesMapping.practitionerRole_specialty:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		return listOfAttribute;
	}
	function getListOfPractitionerSpecimenHandlingAttributeMapping()
	{
		var listOfAttribute=[];
		var oAttribute="";
		oAttribute=practitionerSpecimenHandlingAttributesMapping.id!=""?practitionerSpecimenHandlingAttributesMapping.id:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerSpecimenHandlingAttributesMapping.identifier!=""?practitionerSpecimenHandlingAttributesMapping.identifier:"";
		if(oAttribute!="")
		{
			var listAttributes=oAttribute.split(",");
			if(listAttributes.length>1)
			{
				for(var iterator=0;iterator<listAttributes.length;iterator++)
				{
					listOfAttribute.push(listAttributes[iterator].trim());
				}
			}
			else
			{
				listOfAttribute.push(oAttribute.trim());
			}
		}
		oAttribute="";
		oAttribute=practitionerSpecimenHandlingAttributesMapping.name_family!=""?practitionerSpecimenHandlingAttributesMapping.name_family:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerSpecimenHandlingAttributesMapping.name_given!=""?practitionerSpecimenHandlingAttributesMapping.name_given:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerSpecimenHandlingAttributesMapping.gender!=""?practitionerSpecimenHandlingAttributesMapping.gender:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerSpecimenHandlingAttributesMapping.telecom_phone!=""?practitionerSpecimenHandlingAttributesMapping.telecom_phone:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerSpecimenHandlingAttributesMapping.telecom_email!=""?practitionerSpecimenHandlingAttributesMapping.telecom_email:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerSpecimenHandlingAttributesMapping.address!=""?practitionerSpecimenHandlingAttributesMapping.address:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerSpecimenHandlingAttributesMapping.practitionerRole_managingOrganization!=""?practitionerSpecimenHandlingAttributesMapping.practitionerRole_managingOrganization:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerSpecimenHandlingAttributesMapping.practitionerRole_role!=""?practitionerSpecimenHandlingAttributesMapping.practitionerRole_role:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=practitionerSpecimenHandlingAttributesMapping.practitionerRole_specialty!=""?practitionerSpecimenHandlingAttributesMapping.practitionerRole_specialty:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		return listOfAttribute;
	}
	
	function getListOfPatientAttributeMapping()
	{
		var listOfAttribute=[];
		var oAttribute="";
		oAttribute=patientAttributesMapping.id!=""?patientAttributesMapping.id:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute=patientAttributesMapping.managingOrganization!=""?patientAttributesMapping.managingOrganization:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=patientAttributesMapping.identifier!=""?patientAttributesMapping.identifier:"";
		if(oAttribute!="")
		{
			var listAttributes=oAttribute.split(",");
			if(listAttributes.length>1)
			{
				for(var iterator=0;iterator<listAttributes.length;iterator++)
				{
					listOfAttribute.push(listAttributes[iterator].trim());
				}
			}
			else
			{
				listOfAttribute.push(oAttribute.trim());
			}
		}
		oAttribute="";
		var oAttribute=patientAttributesMapping.name_family!=""?patientAttributesMapping.name_family:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		var oAttribute=patientAttributesMapping.name_given!=""?patientAttributesMapping.name_given:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		var oAttribute=patientAttributesMapping.telecom_phone!=""?patientAttributesMapping.telecom_phone:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		var oAttribute=patientAttributesMapping.telecom_email!=""?patientAttributesMapping.telecom_email:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		var oAttribute=patientAttributesMapping.gender!=""?patientAttributesMapping.gender:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		var oAttribute=patientAttributesMapping.birthDate!=""?patientAttributesMapping.birthDate:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		var oAttribute=patientAttributesMapping.address_text!=""?patientAttributesMapping.address_text:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		var oAttribute=patientAttributesMapping.address_city!=""?patientAttributesMapping.address_city:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		var oAttribute=patientAttributesMapping.deceasedBoolean!=""?patientAttributesMapping.deceasedBoolean:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		var oAttribute=patientAttributesMapping.deceasedDateTime!=""?patientAttributesMapping.deceasedDateTime:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=patientAttributesMapping.list_reference!=""?patientAttributesMapping.list_reference:"";
		if(oAttribute!="")
		{
			var listAttributes=oAttribute.split(",");
			if(listAttributes.length>1)
			{
				for(var iterator=0;iterator<listAttributes.length;iterator++)
				{
					listOfAttribute.push(listAttributes[iterator]);
				}
			}
			else
			{
				listOfAttribute.push(oAttribute);
			}
			
		}
		return listOfAttribute;
		//listOfAttribute.pu
	}
	
	function getListOfSpecimenAttributeMapping()
	{
		var listOfAttribute=[];
		
		var oAttribute="";
		var oAttribute=specimenAttributesMapping.identifier!=""?specimenAttributesMapping.identifier:"";
		if(oAttribute!="")
		{
			var listAttributes=oAttribute.split(",");
			if(listAttributes.length>1)
			{
				for(var iterator=0;iterator<listAttributes.length;iterator++)
				{
					listOfAttribute.push(listAttributes[iterator]);
				}
			}
			else
			{
				listOfAttribute.push(oAttribute);
			}
			
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.status!=""?specimenAttributesMapping.status:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.id!=""?specimenAttributesMapping.id:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.type!=""?specimenAttributesMapping.type:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.subject!=""?specimenAttributesMapping.subject:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.accession!=""?specimenAttributesMapping.accession:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.receivedTime!=""?specimenAttributesMapping.receivedTime:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.collection_comment!=""?specimenAttributesMapping.collection_comment:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.collector!=""?specimenAttributesMapping.collector:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.collectedDateTime!=""?specimenAttributesMapping.collectedDateTime:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.collection_quantity_unit!=""?specimenAttributesMapping.collection_quantity_unit:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.collection_quantity_value!=""?specimenAttributesMapping.collection_quantity_value:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.collection_method!=""?specimenAttributesMapping.collection_method:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.collection_bodySite!=""?specimenAttributesMapping.collection_bodySite:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.container_identifier!=""?specimenAttributesMapping.container_identifier:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.container_capacity_unit!=""?specimenAttributesMapping.container_capacity_unit:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.container_capacity_value!=""?specimenAttributesMapping.container_capacity_value:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.container_description!=""?specimenAttributesMapping.container_description:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.traitment_description!=""?specimenAttributesMapping.traitment_description:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=specimenAttributesMapping.traitment_procedure!=""?specimenAttributesMapping.traitment_procedure:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		oAttribute=specimenAttributesMapping.list_reference!=""?specimenAttributesMapping.list_reference:"";
		if(oAttribute!="")
		{
			var listAttributes=oAttribute.split(",");
			if(listAttributes.length>1)
			{
				for(var iterator=0;iterator<listAttributes.length;iterator++)
				{
					listOfAttribute.push(listAttributes[iterator]);
				}
			}
			else
			{
				listOfAttribute.push(oAttribute);
			}
			
		}
		return listOfAttribute;
		//listOfAttribute.pu
	}
	
	function getListOfDiagnosticOrderAttributeMapping()
	{
		var listOfAttribute=[];
		
		var oAttribute="";
		var oAttribute=orderAttributesMapping.identifier!=""?orderAttributesMapping.identifier:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=orderAttributesMapping.subject!=""?orderAttributesMapping.subject:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=orderAttributesMapping.orderer!=""?orderAttributesMapping.orderer:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=orderAttributesMapping.encounter!=""?orderAttributesMapping.encounter:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=orderAttributesMapping.reason!=""?orderAttributesMapping.reason:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=orderAttributesMapping.supportingInformation!=""?orderAttributesMapping.supportingInformation:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=orderAttributesMapping.specimen!=""?orderAttributesMapping.specimen:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=orderAttributesMapping.status!=""?orderAttributesMapping.status:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=orderAttributesMapping.priority!=""?orderAttributesMapping.priority:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=orderAttributesMapping.orderEvent_dateTime!=""?orderAttributesMapping.orderEvent_dateTime:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=orderAttributesMapping.orderEvent_status!=""?orderAttributesMapping.orderEvent_status:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=orderAttributesMapping.orderEvent_description!=""?orderAttributesMapping.orderEvent_description:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=orderAttributesMapping.item!=""?orderAttributesMapping.item:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=orderAttributesMapping.note!=""?orderAttributesMapping.note:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		oAttribute=orderAttributesMapping.list_reference!=""?orderAttributesMapping.list_reference:"";
		if(oAttribute!="")
		{
			var listAttributes=oAttribute.split(",");
			if(listAttributes.length>1)
			{
				for(var iterator=0;iterator<listAttributes.length;iterator++)
				{
					listOfAttribute.push(listAttributes[iterator]);
				}
			}
			else
			{
				listOfAttribute.push(oAttribute);
			}
			
		}
		//return listOfAttribute;
		
		return listOfAttribute;
		//listOfAttribute.pu
	}
	function getListOfObservationAttributeMapping()
	{
		var listOfAttribute=[];
		
		var oAttribute="";
		var oAttribute=observationAttributesMapping.identifier!=""?observationAttributesMapping.identifier:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.status!=""?observationAttributesMapping.status:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.category!=""?observationAttributesMapping.category:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.code!=""?observationAttributesMapping.code:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.subject!=""?observationAttributesMapping.subject:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.encounter!=""?observationAttributesMapping.encounter:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.effectiveDateTime!=""?observationAttributesMapping.effectiveDateTime:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.effectivePeriod_dateSup!=""?observationAttributesMapping.effectivePeriod_dateSup:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.effectivePeriod_dateInf!=""?observationAttributesMapping.effectivePeriod_dateInf:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.issued!=""?observationAttributesMapping.issued:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.performer!=""?observationAttributesMapping.performer:"";
		if(oAttribute!="")
		{
			var listAttributes=oAttribute.split(",");
			if(listAttributes.length>1)
			{
				for(var iterator=0;iterator<listAttributes.length;iterator++)
				{
					listOfAttribute.push(listAttributes[iterator]);
				}
			}
			else
			{
				listOfAttribute.push(oAttribute);
			}
			
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueQuantity_unit!=""?observationAttributesMapping.valueQuantity_unit:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueQuantity_value!=""?observationAttributesMapping.valueQuantity_value:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueCodeableConcept!=""?observationAttributesMapping.valueCodeableConcept:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueString!=""?observationAttributesMapping.valueString:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueRange_sup!=""?observationAttributesMapping.valueRange_sup:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueRange_Inf!=""?observationAttributesMapping.valueRange_Inf:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueRatio_num!=""?observationAttributesMapping.valueRatio_num:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueRatio_denom!=""?observationAttributesMapping.valueRatio_denom:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueSampledData_origin!=""?observationAttributesMapping.valueSampledData_origin:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueSampledData_period!=""?observationAttributesMapping.valueSampledData_period:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueSampledData_factor!=""?observationAttributesMapping.valueSampledData_factor:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueSampledData_lowerLimit!=""?observationAttributesMapping.valueSampledData_lowerLimit:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueSampledData_upperLimit!=""?observationAttributesMapping.valueSampledData_upperLimit:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueSampledData_dimensions!=""?observationAttributesMapping.valueSampledData_dimensions:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueSampledData_data!=""?observationAttributesMapping.valueSampledData_data:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valueDateTime!=""?observationAttributesMapping.valueDateTime:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valuePeriod_start!=""?observationAttributesMapping.valuePeriod_start:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.valuePeriod_end!=""?observationAttributesMapping.valuePeriod_end:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.dataAbsentReason!=""?observationAttributesMapping.dataAbsentReason:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.interpretation!=""?observationAttributesMapping.interpretation:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.comments!=""?observationAttributesMapping.comments:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.bodySite!=""?observationAttributesMapping.bodySite:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.method!=""?observationAttributesMapping.method:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.specimen!=""?observationAttributesMapping.specimen:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.device!=""?observationAttributesMapping.device:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.referenceRange!=""?observationAttributesMapping.referenceRange:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.related!=""?observationAttributesMapping.related:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		var oAttribute="";
		var oAttribute=observationAttributesMapping.component!=""?observationAttributesMapping.component:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		oAttribute=observationAttributesMapping.list_reference!=""?observationAttributesMapping.list_reference:"";
		if(oAttribute!="")
		{
			var listAttributes=oAttribute.split(",");
			if(listAttributes.length>1)
			{
				for(var iterator=0;iterator<listAttributes.length;iterator++)
				{
					listOfAttribute.push(listAttributes[iterator]);
				}
			}
			else
			{
				listOfAttribute.push(oAttribute);
			}
			
		}
		return listOfAttribute;
	}
	
	function getListOfDiagnosticReportAttributeMapping()
	{
		var listOfAttribute=[];
		
		var oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.identifier!=""?diagnosticReportAttributesMapping.identifier:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.status!=""?diagnosticReportAttributesMapping.status:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.category!=""?diagnosticReportAttributesMapping.category:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.code!=""?diagnosticReportAttributesMapping.code:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.subject!=""?diagnosticReportAttributesMapping.subject:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.encounter!=""?diagnosticReportAttributesMapping.encounter:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.effectiveDateTime!=""?diagnosticReportAttributesMapping.effectiveDateTime:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.effectivePeriod_start!=""?diagnosticReportAttributesMapping.effectivePeriod_start:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.effectivePeriod_end!=""?diagnosticReportAttributesMapping.effectivePeriod_end:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.issued!=""?diagnosticReportAttributesMapping.issued:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.performer!=""?diagnosticReportAttributesMapping.performer:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.request!=""?diagnosticReportAttributesMapping.request:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.specimen!=""?diagnosticReportAttributesMapping.specimen:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.result!=""?diagnosticReportAttributesMapping.result:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.imagingStudy!=""?diagnosticReportAttributesMapping.imagingStudy:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.image!=""?diagnosticReportAttributesMapping.image:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.conclusion!=""?diagnosticReportAttributesMapping.conclusion:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.codedDiagnosis!=""?diagnosticReportAttributesMapping.codedDiagnosis:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		var oAttribute=diagnosticReportAttributesMapping.presentedForm!=""?diagnosticReportAttributesMapping.presentedForm:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		oAttribute=diagnosticReportAttributesMapping.list_reference!=""?diagnosticReportAttributesMapping.list_reference:"";
		if(oAttribute!="")
		{
			var listAttributes=oAttribute.split(",");
			if(listAttributes.length>1)
			{
				for(var iterator=0;iterator<listAttributes.length;iterator++)
				{
					listOfAttribute.push(listAttributes[iterator]);
				}
			}
			else
			{
				listOfAttribute.push(oAttribute);
			}
			
		}
		return listOfAttribute;
	}
	function getListOfConditionAttributeMapping()
	{
		var listOfAttribute=[];
		var oAttribute="";
		oAttribute=conditionAttributesMapping.identifier!=""?conditionAttributesMapping.identifier:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.patient!=""?conditionAttributesMapping.patient:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.encounter!=""?conditionAttributesMapping.encounter:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.asserter!=""?conditionAttributesMapping.asserter:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.dateRecorded!=""?conditionAttributesMapping.dateRecorded:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.code!=""?conditionAttributesMapping.code:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.category!=""?conditionAttributesMapping.category:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.category!=""?conditionAttributesMapping.category:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.clinicalStatus!=""?conditionAttributesMapping.clinicalStatus:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.verificationStatus!=""?conditionAttributesMapping.verificationStatus:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.severity!=""?conditionAttributesMapping.severity:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.onsetDateTime!=""?conditionAttributesMapping.onsetDateTime:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.onsetQuantity!=""?conditionAttributesMapping.onsetQuantity:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.onsetPeriod!=""?conditionAttributesMapping.onsetPeriod:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.onsetRange!=""?conditionAttributesMapping.onsetRange:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.onsetString!=""?conditionAttributesMapping.onsetString:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.abatementDateTime!=""?conditionAttributesMapping.abatementDateTime:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.abatementQuantity!=""?conditionAttributesMapping.abatementQuantity:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.abatementBoolean!=""?conditionAttributesMapping.abatementBoolean:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.abatementPeriod!=""?conditionAttributesMapping.abatementPeriod:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.abatementRange!=""?conditionAttributesMapping.abatementRange:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.abatementString!=""?conditionAttributesMapping.abatementString:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.stage!=""?conditionAttributesMapping.stage:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.evidence!=""?conditionAttributesMapping.evidence:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.bodySite!=""?conditionAttributesMapping.bodySite:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute=conditionAttributesMapping.notes!=""?conditionAttributesMapping.notes:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute);
		}
		oAttribute="";
		oAttribute=conditionAttributesMapping.list_reference!=""?conditionAttributesMapping.list_reference:"";
		if(oAttribute!="")
		{
			var listAttributes=oAttribute.split(",");
			if(listAttributes.length>1)
			{
				for(var iterator=0;iterator<listAttributes.length;iterator++)
				{
					listOfAttribute.push(listAttributes[iterator]);
				}
			}
			else
			{
				listOfAttribute.push(oAttribute);
			}
			
		}
		return listOfAttribute;
	}
	function getListOfListResourceAttributeMapping()
	{
		var listOfAttribute=[];
		var oAttribute="";
		oAttribute=listAttributesMapping.id!=""?listAttributesMapping.id:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.identifier!=""?listAttributesMapping.identifier:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.title!=""?listAttributesMapping.title:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.code!=""?listAttributesMapping.code:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.subject!=""?listAttributesMapping.subject:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.source!=""?listAttributesMapping.source:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.encounter!=""?listAttributesMapping.encounter:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.status!=""?listAttributesMapping.status:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.date!=""?listAttributesMapping.date:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.orderedBy!=""?listAttributesMapping.orderedBy:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.mode!=""?listAttributesMapping.mode:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.note!=""?listAttributesMapping.note:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.entry_flag!=""?listAttributesMapping.entry_flag:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.entry_deleted!=""?listAttributesMapping.entry_deleted:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.entry_item!=""?listAttributesMapping.entry_item:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		oAttribute="";
		oAttribute=listAttributesMapping.emptyReason!=""?listAttributesMapping.emptyReason:"";
		if(oAttribute!="")
		{
			listOfAttribute.push(oAttribute.trim());
		}
		return listOfAttribute;
	}
	function getListAllMappingAttributes()
	{
		var listAllMappingAttribute=[];
		listAllMappingAttribute=getListOfPatientAttributeMapping();
		var listOfTempAttribute=[];
		listOfTempAttribute=getListOfPractitionerAttributeMapping();
		for(var iterator=0;iterator<listOfTempAttribute.length;iterator++)
		{
			var oAttributeToAdd=listOfTempAttribute[iterator];
			var isInTheList=checkAttributeInList(listAllMappingAttribute,oAttributeToAdd);
			if(isInTheList==false)
			{
				listAllMappingAttribute.push(oAttributeToAdd);
			}
		}
		listOfTempAttribute=[];
		listOfTempAttribute=getListOfPractitionerObservationPerformerAttributeMapping();
		for(var iterator=0;iterator<listOfTempAttribute.length;iterator++)
		{
			var oAttributeToAdd=listOfTempAttribute[iterator];
			var isInTheList=checkAttributeInList(listAllMappingAttribute,oAttributeToAdd);
			if(isInTheList==false)
			{
				listAllMappingAttribute.push(oAttributeToAdd);
			}
		}
		listOfTempAttribute=[];
		listOfTempAttribute=getListOfPractitionerSpecimenHandlingAttributeMapping();
		for(var iterator=0;iterator<listOfTempAttribute.length;iterator++)
		{
			var oAttributeToAdd=listOfTempAttribute[iterator];
			var isInTheList=checkAttributeInList(listAllMappingAttribute,oAttributeToAdd);
			if(isInTheList==false)
			{
				listAllMappingAttribute.push(oAttributeToAdd);
			}
		}
		listOfTempAttribute=[];
		listOfTempAttribute=getListOfSpecimenAttributeMapping();
		for(var iterator=0;iterator<listOfTempAttribute.length;iterator++)
		{
			var oAttributeToAdd=listOfTempAttribute[iterator];
			var isInTheList=checkAttributeInList(listAllMappingAttribute,oAttributeToAdd);
			if(isInTheList==false)
			{
				listAllMappingAttribute.push(oAttributeToAdd);
			}
		}
		listOfTempAttribute=[];
		listOfTempAttribute=getListOfConditionAttributeMapping();
		for(var iterator=0;iterator<listOfTempAttribute.length;iterator++)
		{
			var oAttributeToAdd=listOfTempAttribute[iterator];
			var isInTheList=checkAttributeInList(listAllMappingAttribute,oAttributeToAdd);
			if(isInTheList==false)
			{
				listAllMappingAttribute.push(oAttributeToAdd);
			}
		}
		listOfTempAttribute=[];
		listOfTempAttribute=getListOfObservationAttributeMapping();
		for(var iterator=0;iterator<listOfTempAttribute.length;iterator++)
		{
			var oAttributeToAdd=listOfTempAttribute[iterator];
			var isInTheList=checkAttributeInList(listAllMappingAttribute,oAttributeToAdd);
			if(isInTheList==false)
			{
				listAllMappingAttribute.push(oAttributeToAdd);
			}
		}
		listOfTempAttribute=[];
		listOfTempAttribute=getListOfDiagnosticOrderAttributeMapping();
		for(var iterator=0;iterator<listOfTempAttribute.length;iterator++)
		{
			var oAttributeToAdd=listOfTempAttribute[iterator];
			var isInTheList=checkAttributeInList(listAllMappingAttribute,oAttributeToAdd);
			if(isInTheList==false)
			{
				listAllMappingAttribute.push(oAttributeToAdd);
			}
		}
		listOfTempAttribute=[];
		listOfTempAttribute=getListOfDiagnosticReportAttributeMapping();
		for(var iterator=0;iterator<listOfTempAttribute.length;iterator++)
		{
			var oAttributeToAdd=listOfTempAttribute[iterator];
			var isInTheList=checkAttributeInList(listAllMappingAttribute,oAttributeToAdd);
			if(isInTheList==false)
			{
				listAllMappingAttribute.push(oAttributeToAdd);
			}
		}
		return listAllMappingAttribute;
	}
	
	function checkAttributeInList(listOfAttribute,item)
	{
		var found=false;
		for(var i=0;i<listOfAttribute.length;i++)
		{
			if(listOfAttribute[i]==item)
			{
				found=true;
				break;
			}
		}
		return found;
	}
	//check if the identifier item is in the listOfIdentifier
	function checkIfIdentifierExist(_listOfIdentifier,_value,_type)
	{
		var exist=false;
		for(var iterator=0;iterator< _listOfIdentifier.length;iterator++)
		{
			if(_listOfIdentifier[iterator].type.text==_type && _listOfIdentifier[iterator].value==_value)
			{
				exist=true;
				break;
			}
		}
		return exist;
	}
	//Check if Practitioner is: care_provider,specimen_collector or observation_performer
	function getPractitionerNature(stageName)
	{
		var nature="";
		for(var i=0;i<practitionerStageNatureList.length;i++)
		{
			var oStageNature=practitionerStageNatureList[i];
			if (oStageNature.stage==stageName)
			{
				nature=oStageNature.nature;
				break;
			}
		}
		return nature;
	}
	//To do:Delete
	function GetAssociatedFhirResourceFromMapping(oTrackedEntity)
	{
		//const entityCode=oTrackedEntity.trackedEntity;
		//console.log(getListOfPatientAttributeMapping());
		listEntityObject=[];
		var entityPatient=null;
		var entitySpecimen=null;
		var entityOrder=null;
		//Patient Initialization
		
		var oPatient={};
		oPatient= Object.create(Patient);
		oPatient.resourceType="Patient";
		//if(oTrackedEntity)
		oPatient.id=oTrackedEntity.trackedEntityInstance;
		oPatient.meta={"lastUpdated": formatDateInZform(oTrackedEntity.lastUpdated)};
		oPatient.managingOrganization={"reference":"Organization/"+oTrackedEntity.orgUnit}
		oPatient.active=true;
		var oName={};
		oName= Object.create(HumanName);
		oName.resourceType="HumanName";
		oName.use="official";
		//
		var oContact={};
		oContact= Object.create(ContactPoint);
		oContact.resourceType="ContactPoint";
		var oAddress={};
		oAddress= Object.create(Address);
		oAddress.resourceType="Address";
		oPatient.careProvider=[];
		oPatient.telecom=[];
		var PatientSet=false;
		var listOfIdentifier=[];
		
		//Specimen initialization
		var oSpecimen={};
		oSpecimen= Object.create(Specimen);
		oSpecimen.resourceType="Specimen";
		//oSpecimen.id=oTrackedEntity.trackedEntityInstance;
		oSpecimen.meta={"lastUpdated": formatDateInZform(oTrackedEntity.lastUpdated)};
		oSpecimen.active=true;
		var listOfSpecimenIdentifier=[];
		var listOfTraitment=[];
		var oConceptProcedure={};
		oConceptProcedure= Object.create(CodeableConcept);
		var oConceptCollectionMethod={};
		oConceptCollectionMethod= Object.create(CodeableConcept);
		var oConceptBodySite={};
		oConceptBodySite= Object.create(CodeableConcept);
		//oConceptProcedure.
		var oTraitment={
			"description":"",
			"procedure":{}
			};
		var oCollection={};
		oCollection= Object.create(Collection);
		var oContainer={};
		oContainer= Object.create(Container);
		var specimenIsSet=false;
		
		//Order Initialization
		var oOrder={};
		oOrder= Object.create(DiagnosticOrder);
		oOrder.resourceType="DiagnosticOrder";
		//oOrder.id=oTrackedEntity.trackedEntityInstance;
		oOrder.meta={"lastUpdated": formatDateInZform(oTrackedEntity.lastUpdated)};
		//oOrder.
		var listOfOrderIdentifier=[];
		var oOrderEvent={};
		oOrderEvent= Object.create(OrderEvent);
		var orderIsSet=false;
		
		for(var i=0;i<oTrackedEntity.attributes.length;i++)
		{
			var oAttribute=oTrackedEntity.attributes[i].displayName;
			var inTheList=false;
			//inTheList=checkAttributeInList
			var itemListAttributesMapping=[];
			itemListAttributesMapping=getListOfPatientAttributeMapping();
			inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
			if(inTheList==true)
			{
				switch(oAttribute)
				{
					case patientAttributesMapping.identifier:
						var orgIdentifier={};
						orgIdentifier=Object.create(Identifier);
						//assignment of Identifier
						orgIdentifier.use="official";
						orgIdentifier.type={"text":"Medical Record Number"};
						orgIdentifier.system="http://hl7.org/fhir/";
						orgIdentifier.value=oTrackedEntity.attributes[i].value;
						listOfIdentifier.push(orgIdentifier);
						PatientSet=true;
						break;
					case patientAttributesMapping.name_family:
						oName.family=oTrackedEntity.attributes[i].value;
						oName.text+=oTrackedEntity.attributes[i].value+" ";
						PatientSet=true;
					break;
					case patientAttributesMapping.name_given:
						oName.given=oTrackedEntity.attributes[i].value;
						oName.text+=oTrackedEntity.attributes[i].value+" ";
						PatientSet=true;;
					break;
					case patientAttributesMapping.telecom_phone:
						oContact.system="phone";
						oContact.value=oTrackedEntity.attributes[i].value;
						oContact.use="home";
						oContact.rank="1";
						oPatient.telecom=[oContact];
						PatientSet=true;;
					break;
					case patientAttributesMapping.telecom_email:
						oContact.system="email";
						oContact.value=oTrackedEntity.attributes[i].value;
						oContact.use="home";
						oContact.rank="2";
						oPatient.telecom=[oContact];
						PatientSet=true;;
					break;
					case patientAttributesMapping.gender:
						if(getAssociatedGenderValueSet(oTrackedEntity.attributes[i].value)!="")
						{
							oPatient.gender=getAssociatedGenderValueSet(oTrackedEntity.attributes[i].value);
						}
						PatientSet=true;;
					break;
					case patientAttributesMapping.birthDate:
						oPatient.birthDate=oTrackedEntity.attributes[i].value;
						PatientSet=true;
					case patientAttributesMapping.deceasedBoolean:
						if(oTrackedEntity.attributes[i].value=="Alive")
						{
							oPatient.deceasedBoolean=false;
						}
						else
						{
							oPatient.deceasedBoolean=true;
						}
						PatientSet=true;;
						//oTrackedEntity.attributes[i].value;
					break;
					case patientAttributesMapping.address:
						oAddress.text=oTrackedEntity.attributes[i].value
						oPatient.address=[oAddress];
						PatientSet=true;;
					break;
					
				}
		
			}
			inTheList=false;
			itemListAttributesMapping=[];
			itemListAttributesMapping=getListOfSpecimenAttributeMapping();
			inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
			if(inTheList==true)
			{
				switch(oAttribute)
				{
					case specimenAttributesMapping.identifier:
						var orgIdentifier={};
						orgIdentifier=Object.create(Identifier);
						//assignment of Identifier
						orgIdentifier.use="official";
						orgIdentifier.type={"text":"Specimen Identification"};
						orgIdentifier.system="http://hl7.org/fhir/";
						orgIdentifier.value=oTrackedEntity.attributes[i].value;
						listOfSpecimenIdentifier.push(orgIdentifier);
						specimenIsSet=true;
						break;
					case specimenAttributesMapping.status:
						oSpecimen.status=oTrackedEntity.attributes[i].value;
						oSpecimen.status="available";
						specimenIsSet=true;
						break;
					case specimenAttributesMapping.type:
						var oConceptSpecimenType={};
						oConceptSpecimenType= Object.create(oConceptSpecimenType);
						oConceptSpecimenType.text=oTrackedEntity.attributes[i].value;
						oSpecimen.type=oConceptSpecimenType;
						specimenIsSet=true;
						break;
					case specimenAttributesMapping.accession:
						var oIdentifier={};
						oIdentifier=Object.create(Identifier);
						oIdentifier.use="official";
						oIdentifier.type={"text":"Lab Identification"};
						oIdentifier.system="http://hl7.org/fhir";
						oIdentifier.value=oTrackedEntity.attributes[i].value;
						oSpecimen.accession=oIdentifier;
						specimenIsSet=true;
						break;
					case specimenAttributesMapping.receivedTime:
						oSpecimen.receivedTime=oTrackedEntity.attributes[i].value;
						break;
					case specimenAttributesMapping.collectedDateTime:
						oCollection.collectedDateTime=oTrackedEntity.attributes[i].value;
						specimenIsSet=true;
						break;
					case specimenAttributesMapping.collection_quantity_unit:
						oCollection.quantity.unit=oTrackedEntity.attributes[i].value;
						specimenIsSet=true;
						break;
					case specimenAttributesMapping.collection_quantity_value:
						oCollection.quantity.value=oTrackedEntity.attributes[i].value;
						break;
					case specimenAttributesMapping.collection_method:
						oConceptCollectionMethod.text=oTrackedEntity.attributes[i].value;
						oCollection.method=oConceptCollectionMethod;
						specimenIsSet=true;
						break;
					case specimenAttributesMapping.collection_bodySite:
						oConceptBodySite.text=oTrackedEntity.attributes[i].value;
						oCollection.bodySite=oConceptBodySite;
						specimenIsSet=true;
						break;
					case specimenAttributesMapping.container_capacity_unit:
						oContainer.capacity.unit=oTrackedEntity.attributes[i].value;
						specimenIsSet=true;
						break;
					case specimenAttributesMapping.container_capacity_value:
						oContainer.capacity.value=oTrackedEntity.attributes[i].value;
						specimenIsSet=true;
						break;
					case specimenAttributesMapping.container_description:
						oContainer.description=oTrackedEntity.attributes[i].value;
						specimenIsSet=true;
						break;
					case specimenAttributesMapping.traitment_description:
						oTraitment.description=oTrackedEntity.attributes[i].value;
						specimenIsSet=true;
						break;
					case specimenAttributesMapping.traitment_procedure:
						oConceptProcedure.text=oTrackedEntity.attributes[i].value;
						oTraitment.procedure=oConceptProcedure;
						specimenIsSet=true;
						break;
					case specimenAttributesMapping.container_identifier:
						var oIdentifier={};
						oIdentifier=Object.create(Identifier);
						//assignment of Identifier
						oIdentifier.use="official";
						oIdentifier.type={"text":"Container Identification"};
						oIdentifier.system="http://hl7.org/fhir";
						oIdentifier.value=oTrackedEntity.attributes[i].value;
						oContainer.Identifier=[oIdentifier];
						specimenIsSet=true;
						break;
				}
					
			}
			inTheList=false;
			itemListAttributesMapping=[];
			itemListAttributesMapping=getListOfDiagnosticOrderAttributeMapping();
			inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
			if(inTheList==true)
			{
				switch(oAttribute)
				{
					case orderAttributesMapping.identifier:
						var orgIdentifier={};
						orgIdentifier=Object.create(Identifier);
						//assignment of Identifier
						orgIdentifier.use="official";
						orgIdentifier.type={"text":"Order Identification"};
						orgIdentifier.system="http://hl7.org/fhir/";
						orgIdentifier.value=oTrackedEntity.attributes[i].value;
						listOfOrderIdentifier.push(orgIdentifier);
						orderIsSet=true;
						break;
					case orderAttributesMapping.subject:
						oOrder.subject={"reference":"Patient/"+oTrackedEntity.attributes[i].value};
						orderIsSet=true;
						break;
					case orderAttributesMapping.orderer:
						oOrder.orderer={"reference":"Practitioner/"+oTrackedEntity.attributes[i].value};
						orderIsSet=true;
						break;
					case orderAttributesMapping.encounter:
						oOrder.encounter={"reference":"Encounter/"+oTrackedEntity.attributes[i].value};
						orderIsSet=true;
						break;
					case orderAttributesMapping.reason:
						var oConcept={};
						oConcept= Object.create(CodeableConcept);
						oConcept.text=oTrackedEntity.attributes[i].value;
						oOrder.reason=[oConcept];
						orderIsSet=true;
						break;
					case orderAttributesMapping.supportingInformation:
						oOrder.supportingInformation=[oTrackedEntity.attributes[i].value];
						orderIsSet=true;
						break;
					case orderAttributesMapping.specimen:
						oOrder.specimen={"reference":"Specimen/"+oTrackedEntity.attributes[i].value};
						orderIsSet=true;
						break;
					case orderAttributesMapping.status:
						oOrder.status=oTrackedEntity.attributes[i].value;
						orderIsSet=true;
						break;
					case orderAttributesMapping.priority:
						oOrder.priority=oTrackedEntity.attributes[i].value;
						orderIsSet=true;
						break;
					case orderAttributesMapping.orderEvent_dateTime:
						oOrderEvent.dateTime=oTrackedEntity.attributes[i].value;
						orderIsSet=true;
						break;
					case orderAttributesMapping.orderEvent_status:
						oOrderEvent.status=oTrackedEntity.attributes[i].value;
						orderIsSet=true;
						break;
					case orderAttributesMapping.orderEvent_description:
						var oConcept={};
						oConcept= Object.create(CodeableConcept);
						oConcept.text=oTrackedEntity.attributes[i].value;
						oOrderEvent.description=oConcept;
						orderIsSet=true;
						break;
					case orderAttributesMapping.item:
						var oConcept={};
						oConcept= Object.create(CodeableConcept);
						oConcept.text=oTrackedEntity.attributes[i].value;
						oOrder.item=[oConcept];
						orderIsSet=true;
						break;
					case orderAttributesMapping.note:
						oOrder.note={"text":oTrackedEntity.attributes[i].value};
						orderIsSet=true;
						break;
					
				}
					
			}
		}//fin for
		if(PatientSet==true)
		{
			oPatient.identifier=listOfIdentifier;
			oPatient.name=[oName];
			entityPatient=oPatient;
			listEntityObject.push(entityPatient);
		}
		if(specimenIsSet==true)
		{
			oSpecimen.Identifier=listOfSpecimenIdentifier;
			oSpecimen.collection=oCollection;
			oSpecimen.treatment=[oTraitment];
			oSpecimen.Container=[oContainer];
			if (PatientSet==true)
			{
				oSpecimen.subject={"reference":"Patient/"+oPatient.id};
			}
			entitySpecimen=oSpecimen;
			
			listEntityObject.push(entitySpecimen);
		}
		if(orderIsSet==true)
		{
			oOrder.Identifier=listOfOrderIdentifier;
			//Add additional information for validation
			oOrderEvent.status="requested";
			var defaultEventDateTime=formatDateInZform('1974-01-01T00:00:00Z');
			oOrderEvent.dateTime=defaultEventDateTime;
			oOrder.event=[oOrderEvent];
			
			if (PatientSet==true)
			{
				oOrder.subject={"reference":"Patient/"+oPatient.id};
			}
			if (specimenIsSet==true)
			{
				oOrder.specimen={"reference":"Specimen/"+oSpecimen.id};
			}
			entityOrder=oOrder;
			
			listEntityObject.push(entityOrder);
		}
		
		//oPatient.active=true;
		//oPatient.deceasedBoolean=false;
		
		//return entityPatient;
		
		return listEntityObject;
		
	}
	//Retourn the a Fhir Resource from the list by Identifier value
	function getIndexOfFhirResourceByIdentification(listOfResources,idToSearch)
	{
		var index=-1;
		var isFound=false;
		if(listOfResources.length>0)
		{
			var resourceType=listOfResources[0].resourceType;
			switch(resourceType)
			{
				case "Specimen":
					for(var iterator=0;iterator< listOfResources.length;iterator++)
					{
						var oSpecimen=listOfResources[iterator];
						var listOfIdentifier=oSpecimen.identifier;
						for(var iteratorIdentifier=0;iteratorIdentifier<listOfIdentifier.length;iteratorIdentifier++)
						{
							var oIdentifier=listOfIdentifier[iteratorIdentifier];
							
							if(oIdentifier.value==idToSearch)
							{
								index=iteratorOrder;
								isFound=true;
								break;
							}
							
						}
						if(isFound)
						{
							break;
						}
					}
					break;
				case "DiagnosticOrder":
					for(var iteratorOrder=0;iteratorOrder< listOfResources.length;iteratorOrder++)
					{
						var oOrder=listOfResources[iteratorOrder];
						var listOfIdentifier=oOrder.identifier;
						for(var iteratorIdentifier=0;iteratorIdentifier<listOfIdentifier.length;iteratorIdentifier++)
						{
							var oIdentifier=listOfIdentifier[iteratorIdentifier];
							
							if(oIdentifier.value==idToSearch)
							{
								index=iteratorOrder;
								isFound=true;
								break;
							}
							
						}
						if(isFound)
						{
							break;
						}
					}
					break;
				case "Observation":
					for(var iteratorOrder=0;iteratorOrder< listOfResources.length;iteratorOrder++)
					{
						var oOrder=listOfResources[iteratorOrder];
						var listOfIdentifier=oOrder.identifier;
						for(var iteratorIdentifier=0;iteratorIdentifier<listOfIdentifier.length;iteratorIdentifier++)
						{
							var oIdentifier=listOfIdentifier[iteratorIdentifier];
							if(oIdentifier.value==idToSearch)
							{
								index=iteratorOrder;
								isFound=true;
								break;
							}
							
						}
						if(isFound)
						{
							break;
						}
					}
					break;
				case "Condition":
					for(var iteratorOrder=0;iteratorOrder< listOfResources.length;iteratorOrder++)
					{
						var oResource=listOfResources[iteratorOrder];
						var listOfIdentifier=oResource.identifier;
						for(var iteratorIdentifier=0;iteratorIdentifier<listOfIdentifier.length;iteratorIdentifier++)
						{
							var oIdentifier=listOfIdentifier[iteratorIdentifier];
							if(oIdentifier.value==idToSearch)
							{
								index=iteratorOrder;
								isFound=true;
								break;
							}
							
						}
						if(isFound)
						{
							break;
						}
					}
					break;
			}
		}
		return index;
	}
	//Retourn the a Fhir Resource from the list by the id
	function getIndexOfFhirResourceById(listOfResources,idToSearch)
	{
		var index=-1;
		var isFound=false;
		if(listOfResources.length>0)
		{
			var resourceType=listOfResources[0].resourceType;
			switch(resourceType)
			{
				case "DiagnosticOrder":
					for(var iteratorResource=0;iteratorResource< listOfResources.length;iteratorResource++)
					{
						var oOrder=listOfResources[iteratorResource];
						if(oOrder.id==idToSearch)
						{
							index=iteratorResource;
							isFound=true;
							break;
						}
					}
					break;
				case "Patient":
					for(var iteratorResource=0;iteratorResource< listOfResources.length;iteratorResource++)
					{
						var oPatient=listOfResources[iteratorResource];
						if(oPatient.id==idToSearch)
						{
							index=iteratorResource;
							isFound=true;
							break;
						}
					}
					break;
				case "Specimen":
					for(var iteratorResource=0;iteratorResource< listOfResources.length;iteratorResource++)
					{
						var oSpecimen=listOfResources[iteratorResource];
						if(oSpecimen.id==idToSearch)
						{
							index=iteratorResource;
							isFound=true;
							break;
						}
					}
					break;
				
			}
		}
		return index;
	}
	//Return all specimen associated to a particular tracked entity
	function getListEntityInstanceAssociatedSpecimens(listOfSpecimens,idEntityInstance,identificationType)
	{
		var listOfSpecimenFound=[];
		if(listOfSpecimens.length>0)
		{
			for(var iteratorResource=0;iteratorResource< listOfSpecimens.length;iteratorResource++)
			{
				var oSpecimen=listOfSpecimens[iteratorResource];
				var listOfIdentifier=oSpecimen.identifier;
				for(var iteratorIdentifier=0;iteratorIdentifier<listOfIdentifier.length;iteratorIdentifier++)
				{
					var oIdentifier=listOfIdentifier[iteratorIdentifier];
					
					if(oIdentifier.value==idEntityInstance && oIdentifier.type.text==identificationType)
					{
						listOfSpecimenFound.push(oSpecimen);
						break;
					}
					
				}
			}//End for iterator Resource
		}
		return listOfSpecimenFound;
	}
	//Return all DiagnosticOrder associated to a tracked entity
	function getListEntityInstanceAssociatedDiagnosticOrders(listOfDiagnosticOrders,idEntityInstance,identificationType)
	{
		
		var listODiagnosticOrderFound=[];
		if(listOfDiagnosticOrders.length>0)
		{
			for(var iteratorResource=0;iteratorResource< listOfDiagnosticOrders.length;iteratorResource++)
			{
				var oOrder=listOfDiagnosticOrders[iteratorResource];
				var listOfIdentifier=oOrder.identifier;
				/*
				console.log(oOrder);
				console.log("item to search :"+idEntityInstance);
				console.log("-----------------------------------");
				* */
				for(var iteratorIdentifier=0;iteratorIdentifier<listOfIdentifier.length;iteratorIdentifier++)
				{
					var oIdentifier=listOfIdentifier[iteratorIdentifier];
					
					if(oIdentifier.value==idEntityInstance && oIdentifier.type.text==identificationType)
					{
						listODiagnosticOrderFound.push(oOrder);
						break;
					}
					
				}
			}//End for iterator Resource
		}
		return listODiagnosticOrderFound;
	}
	//Return all Observation associated to a tracked entity
	function getListEntityInstanceAssociatedObservation(listOfObservations,idEntityInstance,identificationType)
	{
		var listOfObservationFound=[];
		if(listOfObservations.length>0)
		{
			for(var iteratorResource=0;iteratorResource< listOfObservations.length;iteratorResource++)
			{
				var oObservation=listOfObservations[iteratorResource];
				var listOfIdentifier=oObservation.identifier;
				for(var iteratorIdentifier=0;iteratorIdentifier<listOfIdentifier.length;iteratorIdentifier++)
				{
					var oIdentifier=listOfIdentifier[iteratorIdentifier];
					
					if(oIdentifier.value==idEntityInstance && oIdentifier.type.text==identificationType)
					{
						listOfObservationFound.push(oObservation);
						break;
					}
					
				}
			}//End for iterator Resource
		}
		return listOfObservationFound;
	}
	//Return all Conditions associated to a tracked entity
	function getListEntityInstanceAssociatedCondition(listOfResources,idEntityInstance,identificationType)
	{
		var listOfResourceFound=[];
		if(listOfResources.length>0)
		{
			for(var iteratorResource=0;iteratorResource< listOfResources.length;iteratorResource++)
			{
				var oResource=listOfResources[iteratorResource];
				var listOfIdentifier=oResource.identifier;
				for(var iteratorIdentifier=0;iteratorIdentifier<listOfIdentifier.length;iteratorIdentifier++)
				{
					var oIdentifier=listOfIdentifier[iteratorIdentifier];
					
					if(oIdentifier.value==idEntityInstance && oIdentifier.type.text==identificationType)
					{
						listOfResourceFound.push(oResource);
						break;
					}
					
				}
			}//End for iterator Resource
		}
		return listOfResourceFound;
	}
	
	//Return list of associated Fhir Resources extracted from the tracked entity occurance and list of events
	//the param listofTrackedEntity refer to occurances of one case tracked
	function GetAssociatedFhirResourceFromMappingAndEvent(listofTrackedEntity,listOfEvents)
	{
		//const entityCode=oTrackedEntity.trackedEntity;
		//console.log(getListOfPatientAttributeMapping());
		listEntityObject=[];
		var entityPatient=null;
		var entitySpecimen=null;
		var entityOrder=null;
		var listPatientExtrated=[];
		var listPractitionerExtrated=[];
		var listSpecimenExtracted=[];
		var listDiagnosticOrderExtracted=[];
		var listObservationExtracted=[];
		var listConditionExtracted=[];
		var listDiagnosticReportExtracted=[];
		var listResourceListExtracted=[];
		
		//Patient Initialization
		
		var oPatient={};
		oPatient= Object.create(Patient);
		oPatient.resourceType="Patient";
		//if(oTrackedEntity)
		
		var oName={};
		oName= Object.create(HumanName);
		oName.resourceType="HumanName";
		oName.use="official";
		//
		var oAddress={};
		oAddress= Object.create(Address);
		oAddress.resourceType="Address";
		oPatient.careProvider=[];
		oPatient.telecom=[];
		var PatientSet=false;
		var listOfIdentifier=[];
		//Populate with entityTracker attribute
		//First populate the trackerEntity
		for(var iteratorEntity=0;iteratorEntity<listofTrackedEntity.length;iteratorEntity++)
		{
			var oTrackedEntity=listofTrackedEntity[iteratorEntity];
			//oPatient.id=oTrackedEntity.trackedEntityInstance;
			//oPatient.meta={"lastUpdated": formatDateInZform(oTrackedEntity.lastUpdated)};
			oPatient.managingOrganization={"reference":"Organization/"+oTrackedEntity.orgUnit}
			oPatient.active=true;
			
			for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
			{
				var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName.trim();
				var inTheList=false;
				//inTheList=checkAttributeInList
				var itemListAttributesMapping=[];
				itemListAttributesMapping=getListOfPatientAttributeMapping();
				inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
				if(inTheList==true)
				{
					var identifierListAttributes=patientAttributesMapping.identifier.split(",");
					//console.log(identifierListAttributes);
					//console.log("----------------------------------------------");
					var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
					if(resCheck==true)
					{
						var orgIdentifier={};
						oIdentifier=Object.create(Identifier);
						//assignment of Identifier
						oIdentifier.use="official";
						oIdentifier.type={"text":""+oAttribute};
						oIdentifier.system="http://hl7.org/fhir/";
						oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
						listOfIdentifier.push(oIdentifier);
						PatientSet=true;
						continue;
					}
					
					switch(oAttribute)
					{
						case patientAttributesMapping.id:
							if(formatPatientId==true)
							{
								oPatient.id=oTrackedEntity.attributes[iteratorAttribute].value.trim()+"-";
							}
							else if (formatPatientId==false)
							{
								oPatient.id=oTrackedEntity.attributes[iteratorAttribute].value.trim();
							}
							
							var orgIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":""+oAttribute};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value.trim();
							listOfIdentifier.push(oIdentifier);
							PatientSet=true;
							break;
						case patientAttributesMapping.name_family:
							oName.family=oTrackedEntity.attributes[iteratorAttribute].value;
							oName.text+=oTrackedEntity.attributes[iteratorAttribute].value+" ";
							PatientSet=true;
						break;
						case patientAttributesMapping.name_given:
							oName.given=oTrackedEntity.attributes[iteratorAttribute].value;
							oName.text+=oTrackedEntity.attributes[iteratorAttribute].value+" ";
							PatientSet=true;
						break;
						case patientAttributesMapping.telecom_phone:
							var oContact={};
							oContact= Object.create(ContactPoint);
							oContact.resourceType="ContactPoint";
							oContact.system="phone";
							oContact.value=oTrackedEntity.attributes[iteratorAttribute].value;
							oContact.use="home";
							oContact.rank="1";
							oPatient.telecom.push(oContact);
							PatientSet=true;
						break;
						case patientAttributesMapping.telecom_email:
							var oContact={};
							oContact= Object.create(ContactPoint);
							oContact.resourceType="ContactPoint";
							oContact.system="email";
							oContact.value=oTrackedEntity.attributes[iteratorAttribute].value;
							oContact.use="home";
							oContact.rank="2";
							oPatient.telecom.push(oContact);
							PatientSet=true;
						break;
						case patientAttributesMapping.gender:
							if(getAssociatedGenderValueSet(oTrackedEntity.attributes[iteratorAttribute].value)!="")
							{
								oPatient.gender=getAssociatedGenderValueSet(oTrackedEntity.attributes[iteratorAttribute].value);
							}
							PatientSet=true;
						break;
						case patientAttributesMapping.birthDate:
							if(oTrackedEntity.attributes[iteratorAttribute].value!="" && oTrackedEntity.attributes[iteratorAttribute].value.includes("-")==false)
							{
								var currentYear=new Date().getFullYear();
								var ageOfPatient=parseInt(oTrackedEntity.attributes[iteratorAttribute].value);
								var yearOfBirth=currentYear-ageOfPatient;
								//console.log(yearOfBirth);
								var dateOfBirth=""+yearOfBirth+"-01-01";
								oPatient.birthDate=dateOfBirth;
								PatientSet=true;
								//console.log(new Date().getFullYear()-patientAttributesMapping.birthDate);
							}
							else if(oTrackedEntity.attributes[iteratorAttribute].value!="" && oTrackedEntity.attributes[iteratorAttribute].value.includes("-")==true)
							{
								//console.log(oTrackedEntity.attributes[iteratorAttribute].value);
								oPatient.birthDate=oTrackedEntity.attributes[iteratorAttribute].value;
								PatientSet=true;
							}
							
						case patientAttributesMapping.deceasedBoolean:
							//var displayNameOption=getDisplayNameFromListOptionSet(oTrackedEntity.attributes[iteratorAttribute].value,listOptionSets)
							if(oTrackedEntity.attributes[iteratorAttribute].value==vitalStatus.alive)
							{
								oPatient.deceasedBoolean=false;
							}
							else
							{
								oPatient.deceasedBoolean=true;
							}
							PatientSet=true;
							//oTrackedEntity.attributes[i].value;
						break;
						case patientAttributesMapping.address_text:
							oAddress.text=oTrackedEntity.attributes[iteratorAttribute].value;
							//oPatient.address=[oAddress];
							PatientSet=true;
						break;
						case patientAttributesMapping.address_city:
							oAddress.city=oTrackedEntity.attributes[iteratorAttribute].value;
							//oPatient.address=[oAddress];
							PatientSet=true;
						break;
						case patientAttributesMapping.deceasedDateTime:
							if(oTrackedEntity.attributes[iteratorAttribute].value!="")
							{
								oPatient.deceasedDateTime=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
							}
						break;
						
					}
			
				}
				
			}
			break;
		}//fin for iterator entity
		//Special loop for adding extra patient attribute from event
		for(var iteratorEvent=0;iteratorEvent<listOfEvents.length;iteratorEvent++)
		{
			var oEvent=listOfEvents[iteratorEvent];
			for(var iteratorDataValues=0;iteratorDataValues<oEvent.dataValues.length;iteratorDataValues++)
			{
				var oAttribute=oEvent.dataValues[iteratorDataValues].displayName.trim();
				var inTheList=false;
				inTheList=false;
				itemListAttributesMapping=[];
				itemListAttributesMapping=getListOfPatientAttributeMapping();
				if(inTheList==true)
				{
					switch(oAttribute)
					{
						case patientAttributesMapping.telecom_phone:
							var oContact={};
							oContact= Object.create(ContactPoint);
							oContact.resourceType="ContactPoint";
							oContact.system="phone";
							oContact.value=oEvent.dataValues[iteratorDataValues].value;
							oContact.use="home";
							oContact.rank="1";
							oPatient.telecom.push(oContact);
							PatientSet=true;;
						break;
						case patientAttributesMapping.telecom_email:
							var oContact={};
							oContact= Object.create(ContactPoint);
							oContact.resourceType="ContactPoint";
							oContact.system="email";
							oContact.value=oEvent.dataValues[iteratorDataValues].value;
							oContact.use="home";
							oContact.rank="2";
							oPatient.telecom.push(oContact);
							PatientSet=true;
						break;
						case patientAttributesMapping.gender:
							if(getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value)!="")
							{
								oPatient.gender=getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value);
							}
							PatientSet=true;
						break;
						case patientAttributesMapping.deceasedBoolean:
							if(oEvent.dataValues[iteratorDataValues].value==vitalStatus.alive)
							{
								oPatient.deceasedBoolean=false;
							}
							else
							{
								oPatient.deceasedBoolean=true;
							}
							oPatient.deceasedDateTime=formatDateInZform(oEvent.eventDate);
							PatientSet=true;
							//oTrackedEntity.attributes[i].value;
						break;
						case patientAttributesMapping.deceasedDateTime:
							if(oEvent.dataValues[iteratorDataValues].value!="")
							{
								oPatient.deceasedDateTime=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							}
						break;
						case patientAttributesMapping.address_text:
							oAddress.text=oEvent.dataValues[iteratorDataValues].value;
							//oPatient.address=[oAddress];
							PatientSet=true;
						break;
						case patientAttributesMapping.address_city:
							oAddress.city=oEvent.dataValues[iteratorDataValues].value;
							//oPatient.address=[oAddress];
							PatientSet=true;
						break;
					}//end Switch
				}//end if inTheList
				
			}//End for iteratorDataValues
		}//End for iteratorEvent
		
		if(PatientSet==true)
		{
			oPatient.name=[oName];
			var instanceIdentifier={};
			instanceIdentifier=Object.create(Identifier);
			//assignment of Identifier
			instanceIdentifier.use="official";
			instanceIdentifier.type={"text":"Tracker identifier"};
			instanceIdentifier.system="http://hl7.org/fhir/";
			instanceIdentifier.value=oTrackedEntity.trackedEntityInstance;
			listOfIdentifier.push(instanceIdentifier);
			oPatient.identifier=listOfIdentifier;
			oPatient.address=[oAddress];
			//entityPatient=oPatient;
			listPatientExtrated.push(oPatient);
		}
		
		//Populate with Event attribute
		for(var iteratorEvent=0;iteratorEvent<listOfEvents.length;iteratorEvent++)
		{
			var oEvent=listOfEvents[iteratorEvent];
			//console.log(oEvent);
			//Specimen initialization
			var oSpecimen={};
			oSpecimen= Object.create(Specimen);
			oSpecimen.resourceType="Specimen";
			//oSpecimen.id=oTrackedEntity.trackedEntityInstance;
			//oSpecimen.meta={"lastUpdated": formatDateInZform(oTrackedEntity.lastUpdated)};
			oSpecimen.active=true;
			var listOfSpecimenIdentifier=[];
			var listOfTraitment=[];
			var oConceptProcedure={};
			oConceptProcedure= Object.create(CodeableConcept);
			var oConceptCollectionMethod={};
			oConceptCollectionMethod= Object.create(CodeableConcept);
			var oConceptBodySite={};
			oConceptBodySite= Object.create(CodeableConcept);
			//oConceptProcedure.
			var oTraitment={
				"description":"",
				"procedure":{}
				};
			var oCollection={};
			oCollection= Object.create(Collection);
			var oContainer={};
			oContainer= Object.create(Container);
			var specimenIsSet=false;
			var hasCollectionInfo=false;
			var hasTraitementInfo=false;
			var hasContainerInfo=false;
			
			//Condition Initialization
			var oCondition={};
			oCondition= Object.create(Condition);
			oCondition.resourceType="Condition";
			var listOfConditionIdentifier=[];
			var conditionIsSet=false;
			
			//Observation initialization
			var oObservation={};
			oObservation= Object.create(Observation);
			oObservation.resourceType="Observation";
			oObservation.performer=[];
			var listOfObservationIdentifier=[];
			var oSampledData={};
			oSampledData= Object.create(SampledData);
			var oPeriodEffective={};
			oPeriodEffective= Object.create(Period);
			var oPeriodResult={};
			oPeriodResult= Object.create(Period);
			var oValueQuantity={};
			oValueQuantity= Object.create(Quantity);
			var oOriginQuantity={};
			oOriginQuantity= Object.create(Quantity);
			var oObservationRange={};
			oObservationRange=Object.create(Range);
			var oObservationRatio={};
			oObservationRatio=Object.create(Ratio);
			var oBodySiteConcept={};
			oBodySiteConcept=Object.create(CodeableConcept);
			var oAbsentRaisonConcept={};
			oAbsentRaisonConcept=Object.create(CodeableConcept);
			var observationIsSet=false;
			var hasValueSampledDataInfo=false;
			var hasEffectivePeriodInfo=false;
			var hasValueQuantityInfo=false;
			var hasValueRangeInfo=false;
			var hasValueRatioInfo=false;
			var hasValuePeriodInfo=false;
			
			//Practitioner Initialization
			var oPractitioner={};
			oPractitioner= Object.create(Practitioner);
			oPractitioner.resourceType="Practitioner";
			var oName={};
			oName= Object.create(HumanName);
			oName.resourceType="HumanName";
			oName.use="official";
			var oAddress={};
			oAddress= Object.create(Address);
			oAddress.resourceType="Address";
			oPractitioner.telecom=[];
			oPractitioner.practitionerRole=[];
			var oPractitionerRole={};
			oPractitionerRole= Object.create(PractitionerRole);
			var practitionerSet=false;
			var listOfPractitionerIdentifier=[];
			
			var practitionerNature=getPractitionerNature(oEvent.programStageName);
			
			//console.log(oEvent.dataValues[1]);
			for(var iteratorDataValues=0;iteratorDataValues<oEvent.dataValues.length;iteratorDataValues++)
			{
				var oAttribute=oEvent.dataValues[iteratorDataValues].displayName.trim();
				var inTheList=false;
				inTheList=false;
				itemListAttributesMapping=[];
				itemListAttributesMapping=getListOfSpecimenAttributeMapping();
				//console.log(itemListAttributesMapping);
				inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
				if(inTheList==true)
				{
					//if(specimenIsSet)
					//console.log(oEvent.dataValues[iteratorDataValues].displayName+":"+oEvent.dataValues[iteratorDataValues].value);
					var identifierListAttributes=specimenAttributesMapping.identifier.split(",");
					var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
					if(resCheck==true)
					{
						var orgIdentifier={};
						oIdentifier=Object.create(Identifier);
						//assignment of Identifier
						oIdentifier.use="official";
						oIdentifier.type={"text":"Specimen Identification"};
						oIdentifier.system="http://hl7.org/fhir/";
						oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
						listOfSpecimenIdentifier.push(oIdentifier);
						specimenIsSet=true;
						continue;
					}
					switch(oAttribute)
					{
						case specimenAttributesMapping.id:
							if(formatSpecimenId==true)
							{
								oSpecimen.id=oEvent.dataValues[iteratorDataValues].value.trim()+"-";
							}
							else
							{
								oSpecimen.id=oEvent.dataValues[iteratorDataValues].value.trim();
							}
							
							var orgIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"Specimen Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							listOfSpecimenIdentifier.push(oIdentifier);
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.status:
							oSpecimen.status=oEvent.dataValues[iteratorDataValues].value;
							//oSpecimen.status="available";
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.type:
							var oConceptSpecimenType={};
							oConceptSpecimenType= Object.create(oConceptSpecimenType);
							oConceptSpecimenType.text=oEvent.dataValues[iteratorDataValues].value;
							oSpecimen.type=oConceptSpecimenType;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.accession:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							oIdentifier.use="official";
							oIdentifier.type={"text":"Lab Identification"};
							oIdentifier.system="http://hl7.org/fhir";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							oSpecimen.accession=oIdentifier;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.receivedTime:
							oSpecimen.receivedTime=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							break;
						case specimenAttributesMapping.collector:
							//oCollection.collector=oEvent.dataValues[iteratorDataValues].value;
							//specimenIsSet=true;
							break;
						case specimenAttributesMapping.collection_comment:
							oCollection.comment=oEvent.dataValues[iteratorDataValues].value;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.collectedDateTime:
							oCollection.collectedDateTime=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							hasCollectionInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.collection_quantity_unit:
							oCollection.quantity.unit=oEvent.dataValues[iteratorDataValues].value;
							hasCollectionInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.collection_quantity_value:
							oCollection.quantity.value=oEvent.dataValues[iteratorDataValues].value;
							hasCollectionInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.collection_method:
							oConceptCollectionMethod.text=oEvent.dataValues[iteratorDataValues].value;
							oCollection.method=oConceptCollectionMethod;
							hasCollectionInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.collection_bodySite:
							oConceptBodySite.text=oEvent.dataValues[iteratorDataValues].value;
							oCollection.bodySite=oConceptBodySite;
							hasCollectionInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.container_capacity_unit:
							oContainer.capacity.unit=oEvent.dataValues[iteratorDataValues].value;
							hasContainerInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.container_capacity_value:
							oContainer.capacity.value=oEvent.dataValues[iteratorDataValues].value;
							hasContainerInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.container_description:
							oContainer.description=oEvent.dataValues[iteratorDataValues].value;
							hasContainerInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.traitment_description:
							oTraitment.description=oEvent.dataValues[iteratorDataValues].value;
							hasTraitementInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.traitment_procedure:
							oConceptProcedure.text=oEvent.dataValues[iteratorDataValues].value;
							oTraitment.procedure=oConceptProcedure;
							hasTraitementInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.container_identifier:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"Container Identification"};
							oIdentifier.system="http://hl7.org/fhir";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							oContainer.Identifier=[oIdentifier];
							specimenIsSet=true;
							break;
					}
					
				}
				
				inTheList=false;
				itemListAttributesMapping=[];
				itemListAttributesMapping=getListOfConditionAttributeMapping();
				inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
				if(inTheList==true)
				{
					switch(oAttribute)
					{
						case conditionAttributesMapping.identifier:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"Condition Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							listOfConditionIdentifier.push(oIdentifier);
							conditionIsSet=true;
							break;
						case conditionAttributesMapping.patient:
							//oCondition.patient={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
							//conditionIsSet=true;
							break;
						case conditionAttributesMapping.encounter:
							//oCondition.encounter={"reference":"Encounter/"+oEvent.dataValues[iteratorDataValues].value};
							//conditionIsSet=true;
							break;
						case conditionAttributesMapping.dateRecorded:
							//oCondition.dateRecorded=extractDateFromDateTime(oEvent.dataValues[iteratorDataValues].value);
							//conditionIsSet=true;
							break;
						case conditionAttributesMapping.code:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oCondition.code=oConcept;
							conditionIsSet=true;
							break;
						case conditionAttributesMapping.category:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oCondition.category=oConcept;
							conditionIsSet=true;
							break;
						case conditionAttributesMapping.clinicalStatus:
							oCondition.clinicalStatus=oEvent.dataValues[iteratorDataValues].value;
							//active
							conditionIsSet=true;
							break;
						case conditionAttributesMapping.verificationStatus:
							oCondition.verificationStatus=oEvent.dataValues[iteratorDataValues].value;
							//provisional
							conditionIsSet=true;
							break;
						case conditionAttributesMapping.severity:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oCondition.severity=oConcept;
							//provisional
							conditionIsSet=true;
							break;
						case conditionAttributesMapping.onsetDateTime:
							oCondition.onsetDateTime=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							conditionIsSet=true;
							break;
					}//End of switch
					
				}
				
				inTheList=false;
				itemListAttributesMapping=[];
				itemListAttributesMapping=getListOfObservationAttributeMapping();
				inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
				if(inTheList==true)
				{
					/*
					var identifierListAttributes=observationAttributesMapping.performer.split(",");
					var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
					if(resCheck==true)
					{
						var oPerformerRef={"reference":"Organization/"+oEvent.dataValues[iteratorDataValues].value}
						oObservation.performer.push(oPerformerRef);
						observationIsSet=true;
						continue;
					}*/
					switch(oAttribute)
					{
						case observationAttributesMapping.identifier:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"Observation Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							listOfObservationIdentifier.push(oIdentifier);
							observationIsSet=true;
							break;
						case observationAttributesMapping.status:
							oObservation.status=oEvent.dataValues[iteratorDataValues].value;
							observationIsSet=true;
							break;
						case observationAttributesMapping.category:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oObservation.category=oConcept;
							observationIsSet=true;
							break;
						case observationAttributesMapping.code:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oObservation.code=oConcept;
							observationIsSet=true;
							break;
						case observationAttributesMapping.subject:
							//oObservation.subject={"reference":"Patient/"+oEvent.dataValues[iteratorDataValues].value};
							//observationIsSet=true;
							break;
						case observationAttributesMapping.encounter:
							//oObservation.encounter={"reference":"Encounter/"+oEvent.dataValues[iteratorDataValues].value};
							//observationIsSet=true;
							break;
						case observationAttributesMapping.effectiveDateTime:
							//console.log(oEvent.dataValues[iteratorDataValues]);
							oObservation.effectiveDateTime=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							observationIsSet=true;
							break;
						case observationAttributesMapping.effectivePeriod_dateSup:
							oPeriodEffective.end= formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							hasEffectivePeriodInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.effectivePeriod_dateInf:
							oPeriodEffective.start=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							hasEffectivePeriodInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.issued:
							oObservation.issued=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueQuantity_unit:
							oValueQuantity.unit=oEvent.dataValues[iteratorDataValues].value;
							hasValueQuantityInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueQuantity_value:
							oValueQuantity.value=oEvent.dataValues[iteratorDataValues].value;
							hasValueQuantityInfo=true;
							break;
						case observationAttributesMapping.valueCodeableConcept:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oObservation.valueCodeableConcept=oConcept;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueString:
							oObservation.valueString=oEvent.dataValues[iteratorDataValues].value;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueRange_sup:
							var rangeQuantity=Object.create(Quantity);
							rangeQuantity.value=oEvent.dataValues[iteratorDataValues].value;
							oObservationRange.high=rangeQuantity;
							hasValueRangeInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueRange_Inf:
							var rangeQuantity=Object.create(Quantity);
							rangeQuantity.value=oEvent.dataValues[iteratorDataValues].value;
							oObservationRange.low=rangeQuantity;
							hasValueRangeInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueRatio_num:
							oObservationRatio.numerator=oEvent.dataValues[iteratorDataValues].value;
							hasValueRatioInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueRatio_denom:
							oObservationRatio.denominator=oEvent.dataValues[iteratorDataValues].value;
							hasValueRatioInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueSampledData_origin:
							oOriginQuantity.value=oEvent.dataValues[iteratorDataValues].value;
							break;
						case observationAttributesMapping.valueSampledData_period:
							oSampledData.period=oEvent.dataValues[iteratorDataValues].value;
							hasValueSampledDataInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueSampledData_factor:
							oSampledData.factor=oEvent.dataValues[iteratorDataValues].value;
							hasValueSampledDataInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueSampledData_lowerLimit:
							oSampledData.lowerLimit=oEvent.dataValues[iteratorDataValues].value;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueSampledData_upperLimit:
							oSampledData.upperLimit=oEvent.dataValues[iteratorDataValues].value;
							hasValueSampledDataInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueSampledData_dimensions:
							oSampledData.dimensions=oEvent.dataValues[iteratorDataValues].value;
							 hasValueSampledDataInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueSampledData_data:
							oSampledData.data=oEvent.dataValues[iteratorDataValues].value;
							hasValueSampledDataInfo=true;
							break;
						case observationAttributesMapping.valueTime:
							oObservation.valueTime=oEvent.dataValues[iteratorDataValues].value;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueDateTime:
							oObservation.valueDateTime=oEvent.dataValues[iteratorDataValues].value;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valuePeriod_start:
							oPeriodResult.start=oEvent.dataValues[iteratorDataValues].value;
							hasValuePeriodInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valuePeriod_end:
							oPeriodResult.end=oEvent.dataValues[iteratorDataValues].value;
							hasValuePeriodInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.dataAbsentReason:
							oAbsentRaisonConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oObservation.dataAbsentReason=oAbsentRaisonConcept;
							observationIsSet=true;
							break;
						case observationAttributesMapping.interpretation:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oObservation.interpretation=oConcept;
							observationIsSet=true;
							break;
						case observationAttributesMapping.comments:
							oObservation.comments=oEvent.dataValues[iteratorDataValues].value;
							observationIsSet=true;
							break;
						case observationAttributesMapping.bodySite:
							oBodySiteConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oObservation.bodySite=oBodySiteConcept;
							observationIsSet=true;
							break;
						case observationAttributesMapping.method:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oObservation.method=oConcept;
							observationIsSet=true;
							break;
						case observationAttributesMapping.specimen:
							oObservation.specimen={"reference":"Specimen/"+oEvent.dataValues[iteratorDataValues].value+"-"};
							observationIsSet=true;
							break;
						case observationAttributesMapping.device:
							//oObservation.device={"reference":"Device/"+oEvent.dataValues[iteratorDataValues].value};
							//observationIsSet=true;
							break;
						case observationAttributesMapping.referenceRange:
							//oObservation.referenceRange=[];
							break;
						case observationAttributesMapping.related:
							//oObservation.related=[];
							break;
						case observationAttributesMapping.component:
							//oObservation.component=[];
							break;
						}
					
				}//End of inthe List Observation
				inTheList=false;
				itemListAttributesMapping=[];
				if(practitionerNature=="care_provider")
				{
					itemListAttributesMapping=getListOfPractitionerAttributeMapping();
				}
				else if (practitionerNature=="specimen_collector")
				{
					itemListAttributesMapping=getListOfPractitionerSpecimenHandlingAttributeMapping();
				}
				else if (practitionerNature=="observation_performer")
				{
					itemListAttributesMapping=getListOfPractitionerObservationPerformerAttributeMapping();
				}
				
				inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
				if(inTheList==true)
				{
					if(practitionerNature=="care_provider")
					{
						var identifierListAttributes=practitionerAttributesMapping.identifier.split(",");
						var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
						if(resCheck==true)
						{
							var orgIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":""+oAttribute};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							listOfPractitionerIdentifier.push(oIdentifier);
							practitionerSet=true;
							continue;
						}
						switch(oAttribute)
						{
							case practitionerAttributesMapping.id:
								oPractitioner.id=oEvent.dataValues[iteratorDataValues].value.trim()+"-";
								var orgIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":""+oAttribute};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oEvent.dataValues[iteratorDataValues].value.trim();
								listOfPractitionerIdentifier.push(oIdentifier);
								practitionerSet=true;
								break;
							case practitionerAttributesMapping.name_family:
								oName.family=oEvent.dataValues[iteratorDataValues].value;
								oName.text+=oEvent.dataValues[iteratorDataValues].value+" ";
								practitionerSet=true;
							break;
							case practitionerAttributesMapping.name_given:
								oName.given=oEvent.dataValues[iteratorDataValues].value;
								oName.text+=oEvent.dataValues[iteratorDataValues].value+" ";
								practitionerSet=true;;
							break;
							case practitionerAttributesMapping.telecom_phone:
								var oContact={};
								oContact= Object.create(ContactPoint);
								oContact.resourceType="ContactPoint";
								oContact.system="phone";
								oContact.value=oEvent.dataValues[iteratorDataValues].value;
								oContact.use="home";
								oContact.rank="1";
								oPractitioner.telecom.push(oContact);
								practitionerSet=true;;
							break;
							case practitionerAttributesMapping.telecom_email:
								var oContact={};
								oContact= Object.create(ContactPoint);
								oContact.resourceType="ContactPoint";
								oContact.system="email";
								oContact.value=oEvent.dataValues[iteratorDataValues].value;
								oContact.use="home";
								oContact.rank="2";
								oPractitioner.telecom.push(oContact);
								practitionerSet=true;
							break;
							case practitionerAttributesMapping.gender:
								if(getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value)!="")
								{
									oPractitioner.gender=getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value);
								}
								practitionerSet=true;
							break;
							case practitionerAttributesMapping.address:
								oAddress.text=oEvent.dataValues[iteratorDataValues].value;
								oPractitioner.address=[oAddress];
								practitionerSet=true;
							break;
							case practitionerAttributesMapping.practitionerRole_managingOrganization:
								oPractitionerRole.managingOrganization={"reference":"Organization/"+oEvent.dataValues[iteratorDataValues].value};
								practitionerSet=true;
							break;
							case practitionerAttributesMapping.practitionerRole_role:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oEvent.dataValues[iteratorDataValues].value.trim();
								oPractitionerRole.role=oConcept;
								practitionerSet=true;
							break;
						}
					
					}
					if(practitionerNature=="specimen_collector")
					{
						var identifierListAttributes=practitionerSpecimenHandlingAttributesMapping.identifier.split(",");
						var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
						if(resCheck==true)
						{
							var orgIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":""+oAttribute};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							listOfPractitionerIdentifier.push(oIdentifier);
							practitionerSet=true;
							continue;
						}
						switch(oAttribute)
						{
							case practitionerSpecimenHandlingAttributesMapping.id:
								oPractitioner.id=oEvent.dataValues[iteratorDataValues].value.trim()+"-";
								var orgIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":""+oAttribute};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oEvent.dataValues[iteratorDataValues].value.trim();
								listOfPractitionerIdentifier.push(oIdentifier);
								practitionerSet=true;
								break;
							case practitionerSpecimenHandlingAttributesMapping.name_family:
								oName.family=oEvent.dataValues[iteratorDataValues].value;
								oName.text+=oEvent.dataValues[iteratorDataValues].value+" ";
								practitionerSet=true;
							break;
							case practitionerSpecimenHandlingAttributesMapping.name_given:
								oName.given=oEvent.dataValues[iteratorDataValues].value;
								oName.text+=oEvent.dataValues[iteratorDataValues].value+" ";
								practitionerSet=true;;
							break;
							case practitionerSpecimenHandlingAttributesMapping.telecom_phone:
								var oContact={};
								oContact= Object.create(ContactPoint);
								oContact.resourceType="ContactPoint";
								oContact.system="phone";
								oContact.value=oEvent.dataValues[iteratorDataValues].value;
								oContact.use="home";
								oContact.rank="1";
								oPractitioner.telecom.push(oContact);
								practitionerSet=true;;
							break;
							case practitionerSpecimenHandlingAttributesMapping.telecom_email:
								var oContact={};
								oContact= Object.create(ContactPoint);
								oContact.resourceType="ContactPoint";
								oContact.system="email";
								oContact.value=oEvent.dataValues[iteratorDataValues].value;
								oContact.use="home";
								oContact.rank="2";
								oPractitioner.telecom.push(oContact);
								practitionerSet=true;
							break;
							case practitionerSpecimenHandlingAttributesMapping.gender:
								if(getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value)!="")
								{
									oPractitioner.gender=getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value);
								}
								practitionerSet=true;
							break;
							case practitionerSpecimenHandlingAttributesMapping.address:
								oAddress.text=oEvent.dataValues[iteratorDataValues].value;
								oPractitioner.address=[oAddress];
								practitionerSet=true;
							break;
							case practitionerSpecimenHandlingAttributesMapping.practitionerRole_managingOrganization:
								oPractitionerRole.managingOrganization={"reference":"Organization/"+oEvent.dataValues[iteratorDataValues].value};
								practitionerSet=true;
							break;
							case practitionerSpecimenHandlingAttributesMapping.practitionerRole_role:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oEvent.dataValues[iteratorDataValues].value.trim();
								oPractitionerRole.role=oConcept;
								practitionerSet=true;
							break;
						}
					
					}
					if(practitionerNature=="observation_performer")
					{
						var identifierListAttributes=practitionerObservationPerformerAttributesMapping.identifier.split(",");
						var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
						if(resCheck==true)
						{
							var orgIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":""+oAttribute};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							listOfPractitionerIdentifier.push(oIdentifier);
							practitionerSet=true;
							continue;
						}
						switch(oAttribute)
						{
							case practitionerObservationPerformerAttributesMapping.id:
								oPractitioner.id=oEvent.dataValues[iteratorDataValues].value.trim()+"-";
								var orgIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":""+oAttribute};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oEvent.dataValues[iteratorDataValues].value.trim();
								listOfPractitionerIdentifier.push(oIdentifier);
								practitionerSet=true;
								break;
							case practitionerObservationPerformerAttributesMapping.name_family:
								oName.family=oEvent.dataValues[iteratorDataValues].value;
								oName.text+=oEvent.dataValues[iteratorDataValues].value+" ";
								practitionerSet=true;
							break;
							case practitionerObservationPerformerAttributesMapping.name_given:
								oName.given=oEvent.dataValues[iteratorDataValues].value;
								oName.text+=oEvent.dataValues[iteratorDataValues].value+" ";
								practitionerSet=true;;
							break;
							case practitionerObservationPerformerAttributesMapping.telecom_phone:
								var oContact={};
								oContact= Object.create(ContactPoint);
								oContact.resourceType="ContactPoint";
								oContact.system="phone";
								oContact.value=oEvent.dataValues[iteratorDataValues].value;
								oContact.use="home";
								oContact.rank="1";
								oPractitioner.telecom.push(oContact);
								practitionerSet=true;;
							break;
							case practitionerObservationPerformerAttributesMapping.telecom_email:
								var oContact={};
								oContact= Object.create(ContactPoint);
								oContact.resourceType="ContactPoint";
								oContact.system="email";
								oContact.value=oEvent.dataValues[iteratorDataValues].value;
								oContact.use="home";
								oContact.rank="2";
								oPractitioner.telecom.push(oContact);
								practitionerSet=true;
							break;
							case practitionerObservationPerformerAttributesMapping.gender:
								if(getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value)!="")
								{
									oPractitioner.gender=getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value);
								}
								practitionerSet=true;
							break;
							case practitionerObservationPerformerAttributesMapping.address:
								oAddress.text=oEvent.dataValues[iteratorDataValues].value;
								oPractitioner.address=[oAddress];
								practitionerSet=true;
							break;
							case practitionerObservationPerformerAttributesMapping.practitionerRole_managingOrganization:
								oPractitionerRole.managingOrganization={"reference":"Organization/"+oEvent.dataValues[iteratorDataValues].value};
								practitionerSet=true;
							break;
							case practitionerObservationPerformerAttributesMapping.practitionerRole_role:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oEvent.dataValues[iteratorDataValues].value.trim();
								oPractitionerRole.role=oConcept;
								practitionerSet=true;
							break;
						}
					
					}
					
				}//End If inTheList PractitionerAttributeMapping
				
				
			}//End for iteratorDataValues
			if(practitionerSet==true)
			{
				if(oPractitioner.id=="")
				{
					oPractitioner.id=oEvent.id;
					if(listOfPractitionerIdentifier.length==0)
					{
						var orgIdentifier={};
						oIdentifier=Object.create(Identifier);
						//assignment of Identifier
						oIdentifier.use="official";
						oIdentifier.type={"text":"Practitioner Identifier"};
						oIdentifier.system="http://hl7.org/fhir/";
						oIdentifier.value=oEvent.id;
						listOfPractitionerIdentifier.push(oIdentifier);
					}
				}
				if(oPractitionerRole.managingOrganization=="")
				{
					oPractitionerRole.managingOrganization=oPatient.managingOrganization;
				}
				/*
				if(oPractitionerRole.managingOrganization!="" || oPractitionerRole.role!="")
				{
					oPractitioner.practitionerRole.push(oPractitionerRole);
				}*/
				oPractitioner.practitionerRole.push(oPractitionerRole);
				oPractitioner.name=[oName];
				oPractitioner.identifier=listOfPractitionerIdentifier;
				//console.log(oSpecimen);
				if(practitionerNature=="care_provider")
				{
					var oRef= {"reference":"Practitioner/"+oPractitioner.id};
					oPatient.careProvider.push(oRef);
				}
				listPractitionerExtrated.push(oPractitioner);
				
			}
			
			if(specimenIsSet==true)
			{
				//console.log(oSpecimen);
				if(getIndexOfFhirResourceById(listSpecimenExtracted,oSpecimen.id)==-1 && oSpecimen.id!="")
				{
					var associatedEntityIdentifier={};
					associatedEntityIdentifier=Object.create(Identifier);
					//assignment of Identifier
					associatedEntityIdentifier.use="secondary";
					associatedEntityIdentifier.type={"text":"Associated TEI"};
					associatedEntityIdentifier.system="http://hl7.org/fhir/";
					associatedEntityIdentifier.value=oEvent.trackedEntityInstance;
					listOfSpecimenIdentifier.push(associatedEntityIdentifier);
					oSpecimen.identifier=listOfSpecimenIdentifier;
					/*
					if(listOfSpecimenIdentifier.length)
					{
						oSpecimen.id=listOfSpecimenIdentifier[0].value;
					}*/
					if(hasCollectionInfo==true)
					{
						oSpecimen.collection=oCollection;
					}
					if(hasTraitementInfo==true)
					{
						oSpecimen.treatment=[oTraitment];
					}
					if(hasContainerInfo==true)
					{
						oSpecimen.Container=[oContainer];
					}
					if (PatientSet==true)
					{
						oSpecimen.subject={"reference":"Patient/"+oPatient.id};
					}
					//entitySpecimen=oSpecimen;
					
					//listEntityObject.push(entitySpecimen);
					if(practitionerSet==true)
					{
						if(practitionerNature=="specimen_collector")
						{
							oSpecimen.collection.collector={"reference":"Practitioner/"+oPractitioner.id};
						}
					}
					listSpecimenExtracted.push(oSpecimen);
					//Then check if there is refence list Elements 
					for(var iteratorDataValues=0;iteratorDataValues<oEvent.dataValues.length;iteratorDataValues++)
					{
						var oAttribute=oEvent.dataValues[iteratorDataValues].displayName.trim();
						var inTheRefList=false;
						itemRefListAttributesMapping=[];
						itemRefListAttributesMapping=specimenAttributesMapping.list_reference.split(",");
						inTheRefList=checkAttributeInList(itemRefListAttributesMapping,oAttribute);
						if(inTheRefList==true)
						{
							//List initialization;
							var oList= Object.create(List);
							oList.resourceType="List";
							oList.entry=[];
							var listIsSet=false;
							var listResourceIdentifier=[];
							oList.id=oSpecimen.id+""+oEvent.dataValues[iteratorDataValues].dataElementId;
							oList.status="current";
							oList.mode="working";
							oList.title=oAttribute;
							oList.note=oEvent.dataValues[iteratorDataValues].value.trim();
							oList.entry.push({"deleted":false,"item":{"reference":"Specimen/"+oSpecimen.id}});
							listResourceListExtracted.push(oList);
							
						}
						
					}
					
				}
				
				//console.log(oSpecimen);
				
				
			}//End if specimenIsSet
			if(observationIsSet==true)
			{
				//console.log(oSpecimen);
				if(oObservation.code!="")
				{
					oObservation.id=oEvent.id;
					oSampledData.origin=oOriginQuantity;
					//oObservation.identifier=listOfObservationIdentifier;
					if(hasValueSampledDataInfo==true)
					{
						oObservation.valueSampledData=oSampledData;
					}
					if(hasEffectivePeriodInfo==true)
					{
						oObservation.effectivePeriod=oPeriodEffective;
					}
					if(hasValueQuantityInfo==true)
					{
						oObservation.valueQuantity=oValueQuantity;
					}
					if(hasValueRangeInfo==true)
					{
						oObservation.valueRange=oObservationRange;
					}
					//checkIfAsProperties(oObservationRange);
					if(hasValueRatioInfo==true)
					{
						oObservation.valueRatio=oObservationRatio;
					}
					if(hasValuePeriodInfo==true)
					{
						oObservation.valuePeriod=oPeriodResult;
					}
					
					//
					var associatedEntityIdentifier={};
					associatedEntityIdentifier=Object.create(Identifier);
					//assignment of Identifier
					associatedEntityIdentifier.use="secondary";
					associatedEntityIdentifier.type={"text":"Associated TEI"};
					associatedEntityIdentifier.system="http://hl7.org/fhir/";
					associatedEntityIdentifier.value=oEvent.trackedEntityInstance;
					listOfObservationIdentifier.push(associatedEntityIdentifier);
					oObservation.identifier=listOfObservationIdentifier;
					//Add additional information for validation
					
					if(oObservation.interpretation=="")
					{
						oObservation.status="registered";
					}
					else
					{
						oObservation.status="final";
					}
					
					//By Default used Microscopy observation as code
					if(oObservation.code=="")
					{
						var oConcept={};
						oConcept= Object.create(CodeableConcept);
						oConcept.text="Microscopic Observation";
						oConcept.code=[{"code":"10355-6"}];
						oObservation.code=oConcept;
					}
					if (PatientSet==true)
					{
						oObservation.subject={"reference":"Patient/"+oPatient.id};
					}
					if (specimenIsSet==true && oSpecimen.id!="")
					{
						//console.log("Observation specimen setted :"+oSpecimen.id);
						oObservation.specimen={"reference":"Specimen/"+oSpecimen.id};
					}
					//Check if there is not performer info to add orgUnit
					if(oObservation.performer.length==0)
					{
						if(practitionerSet==true && practitionerNature=="observation_performer")
						{
							var oPerformerRef={"reference":"Practitioner/"+oPractitioner.id};
							oObservation.performer.push(oPerformerRef);
						}
						else
						{
							var oPerformerRef={"reference":"Organization/"+oEvent.orgUnit};
							oObservation.performer.push(oPerformerRef);
						}
						
					}
					listObservationExtracted.push(oObservation);
				}
				
				
			}
			if(conditionIsSet==true)
			{
				oCondition.id=oEvent.id;
					//
				var associatedEntityIdentifier={};
				associatedEntityIdentifier=Object.create(Identifier);
				//assignment of Identifier
				associatedEntityIdentifier.use="secondary";
				associatedEntityIdentifier.type={"text":"Associated TEI"};
				associatedEntityIdentifier.system="http://hl7.org/fhir/";
				associatedEntityIdentifier.value=oEvent.trackedEntityInstance;
				listOfConditionIdentifier.push(associatedEntityIdentifier);
				oCondition.identifier=listOfObservationIdentifier;
				//Add additional information for validation
				if(oCondition.dateRecorded=="")
				{
					oCondition.dateRecorded=extractDateFromDateTime(oTrackedEntity.created);
				}
				if(oCondition.clinicalStatus=="")
				{
					oCondition.clinicalStatus="active";
				}
				if(oCondition.onsetDateTime=="")
				{
					oCondition.onsetDateTime=formatDateInZform(oTrackedEntity.created);
				}
				if(oCondition.verificationStatus=="")
				{
					oCondition.verificationStatus="provisional";
				}
				if (PatientSet==true)
				{
					oCondition.patient={"reference":"Patient/"+oPatient.id};
				}
				listConditionExtracted.push(oCondition);
			}
			
		}//end iteratorEvent
		//console.log(listDiagnosticOrderExtracted);
		//Special loop for DiagnosticReport
		//console.log(listSpecimenExtracted);
		for(var iteratorEvent=0;iteratorEvent<listOfEvents.length;iteratorEvent++)
		{
			//DiagnosticReport initialization
			var oEvent=listOfEvents[iteratorEvent];
			var oDiagnosticReport={};
			oDiagnosticReport= Object.create(DiagnosticReport);
			oDiagnosticReport.resourceType="DiagnosticReport";
			var listOfDiagnosticReportIdentifier=[];
			var oEffectivePeriod={};
			oEffectivePeriod= Object.create(Period);
			oDiagnosticReport.request=[];
			oDiagnosticReport.specimen=[];
			oDiagnosticReport.result=[];
			var diagnosticReportIsSet=false;
			for(var iteratorDataValues=0;iteratorDataValues<oEvent.dataValues.length;iteratorDataValues++)
			{
				var oAttribute=oEvent.dataValues[iteratorDataValues].displayName.trim();
				var inTheList=false;
				inTheList=false;
				itemListAttributesMapping=[];
				itemListAttributesMapping=getListOfDiagnosticReportAttributeMapping();
				inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
				if(inTheList==true)
				{
					switch(oAttribute)
					{
						case diagnosticReportAttributesMapping.identifier:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"DiagnosticReport Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							listOfDiagnosticReportIdentifier.push(oIdentifier);
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.status:
							oDiagnosticReport.status=oEvent.dataValues[iteratorDataValues].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.category:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oDiagnosticReport.category=oConcept;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.code:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oDiagnosticReport.code=oConcept;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.subject:
							//oDiagnosticReport.subject={"reference":"Patient/"+oEvent.dataValues[iteratorDataValues].value};
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.encounter:
							//oDiagnosticReport.encounter={"reference":"Encounter/"+oEvent.dataValues[iteratorDataValues].value};
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectiveDateTime:
							//oDiagnosticReport.effectiveDateTime=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectivePeriod_start:
							oEffectivePeriod.start=oEvent.dataValues[iteratorDataValues].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectivePeriod_end:
							oEffectivePeriod.end=oEvent.dataValues[iteratorDataValues].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.issued:
							//oDiagnosticReport.issued=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.performer:
							//oDiagnosticReport.performer={"reference":"Organization/"+oEvent.dataValues[iteratorDataValues].value};
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.request:
							//oDiagnosticReport.request=[{"reference":"DiagnosticOrder/"+oEvent.dataValues[iteratorDataValues].value}];
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.specimen:
							//oDiagnosticReport.specimen=[{"reference":"Specimen/"+oEvent.dataValues[iteratorDataValues].value}];
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.result:
							//oDiagnosticReport.result=[{"reference":"Observation/"+oEvent.dataValues[iteratorDataValues].value}];
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.imagingStudy:
							oDiagnosticReport.imagingStudy=[];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.image:
							oDiagnosticReport.image=[];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.conclusion:
							oDiagnosticReport.conclusion=oEvent.dataValues[iteratorDataValues].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.codedDiagnosis:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oDiagnosticReport.codedDiagnosis=[oConcept];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.presentedForm:
							oDiagnosticReport.presentedForm=[];
							diagnosticReportIsSet=true;
							break;
					}
				
				}
				
			}//End for iteratorDataValues
			if(diagnosticReportIsSet==true)
			{
				oDiagnosticReport.id=oEvent.id;
				var associatedEntityIdentifier={};
				associatedEntityIdentifier=Object.create(Identifier);
				//assignment of Identifier
				associatedEntityIdentifier.use="secondary";
				associatedEntityIdentifier.type={"text":"Associated TEI"};
				associatedEntityIdentifier.system="http://hl7.org/fhir/";
				associatedEntityIdentifier.value=oEvent.trackedEntityInstance;
				listOfDiagnosticReportIdentifier.push(associatedEntityIdentifier);
				oDiagnosticReport.identifier=listOfDiagnosticReportIdentifier;
				oDiagnosticReport.effectivePeriod=oEffectivePeriod;
				//Add additional information for validation
				oDiagnosticReport.status="final";
				//By Default used Acyclovir for code
				var oConcept={};
				oConcept= Object.create(CodeableConcept);
				oConcept.text="Acyclovir";
				oConcept.code=[{"code":"1-8"}];
				oDiagnosticReport.code=oConcept;
				if (PatientSet==true)
				{
					oDiagnosticReport.subject={"reference":"Patient/"+oPatient.id};
				}
				if(listDiagnosticOrderExtracted.length>=1)
				{
					//console.log(listDiagnosticOrderExtracted);
					var listOrderAssociated=[];
					listOrderAssociated=getListEntityInstanceAssociatedDiagnosticOrders(listDiagnosticOrderExtracted,oEvent.trackedEntityInstance,'Associated TEI');
					//console.log(listOrderAssociated);
					//console.log("------------------");
					for(var i=0;i<listOrderAssociated.length;i++)
					{
						var diagnosticOrderRef={"reference":"DiagnosticOrder/"+listOrderAssociated[i].id};
						oDiagnosticReport.request.push(diagnosticOrderRef);
					}
				}
				else
				{
					oDiagnosticReport.request=null;
				}
				if(listSpecimenExtracted.length>=1)
				{
					//console.log(listSpecimenExtracted);
					var listSpecimenAssociated=[];
					listSpecimenAssociated=getListEntityInstanceAssociatedSpecimens(listSpecimenExtracted,oEvent.trackedEntityInstance,'Associated TEI');
					for(var i=0;i<listSpecimenAssociated.length;i++)
					{
						var specimenRef={"reference":"Specimen/"+listSpecimenAssociated[i].id};
						oDiagnosticReport.specimen.push(specimenRef);
					}
					
				}
				else
				{
					oDiagnosticReport.specimen=null;
				}
				if(listObservationExtracted.length>=1)
				{
					var listObservationAssociated=[];
					listObservationAssociated=getListEntityInstanceAssociatedDiagnosticOrders(listObservationAssociated,oEvent.trackedEntityInstance,'Associated TEI');
					for(var i=0;i<listObservationAssociated.length;i++)
					{
						var observatioRef={"reference":"Observation/"+listObservationAssociated[i].id};
						oDiagnosticReport.result.push(observatioRef);
					}
					//Add the effectiveDateTime information if not yet setted
					if(oDiagnosticReport.effectiveDateTime=="")
					{
						//get the RecenteffectiveDateTime of all observation
						var listOfEffectiveDateTime=[];
						for(var i=0;i<listObservationAssociated.length;i++)
						{
							listOfEffectiveDateTime.push(listObservationAssociated[i].effectiveDateTime);
						}
						var recentEffectiveDateTime=getRecentDate(listOfEffectiveDateTime);
						console.log("recent effectivetime :"+recentEffectiveDateTime);
						oDiagnosticReport.effectiveDateTime=formatDateInZform(recentEffectiveDateTime);
						oDiagnosticReport.issued= formatDateInZform(recentEffectiveDateTime);
					}
				}
				else
				{
					oDiagnosticReport.effectiveDateTime=formatDateInZform(oEvent.eventDate);
					oDiagnosticReport.result=null;
					
				}
				if(oDiagnosticReport.performer=="")
				{
					oDiagnosticReport.performer={"reference":"Organization/"+oEvent.orgUnit};
				}
				listDiagnosticReportExtracted.push(oDiagnosticReport);
			}
		
			
		}//End iteratorEvents
		
		//Then populate others resources founded based on attribute fields
		//Populate Specimen
		for(var iteratorEntity=0;iteratorEntity<listofTrackedEntity.length;iteratorEntity++)
		{
			var oTrackedEntity=listofTrackedEntity[iteratorEntity];
			var indexIdSpecimen=-1;
			var indexIdOrder=-1;
			var indexIdObservation=-1;
			orderIsSet=false;
			observationIsSet=false;
			//Extract the data from entity attribute
			//Check for Specimen Information
			var idSpecimenToSearch=oTrackedEntity.trackedEntityInstance;
			indexIdSpecimen=getIndexOfFhirResourceByIdentification(listSpecimenExtracted,idSpecimenToSearch);
			if(indexIdSpecimen>=0)
			{
				var listOfSpecimenIdentifier=[];
				if(listSpecimenExtracted[indexIdSpecimen].identifier.length>0)
				{
					listOfSpecimenIdentifier=listSpecimenExtracted[indexIdSpecimen].identifier;
				}
				var oTraitment={
					"description":"",
					"procedure":{}
					};
				var oConceptProcedure={};
				oConceptProcedure= Object.create(CodeableConcept);
				if(listSpecimenExtracted[indexIdSpecimen].treatment.length>0)
				{
					oTraitment=listSpecimenExtracted[indexIdSpecimen].treatment[0];
				}
				var oConceptCollectionMethod={};
				oConceptCollectionMethod= Object.create(CodeableConcept);
				var oConceptBodySite={};
				oConceptBodySite= Object.create(CodeableConcept);
				
				var oCollection={};
				
				if(listSpecimenExtracted[indexIdSpecimen].collection!={})
				{
					oCollection=listSpecimenExtracted[indexIdSpecimen].collection;
				}
				else
				{
					oCollection= Object.create(Collection);
				}
				var oContainer={};
				if(listSpecimenExtracted[indexIdSpecimen].container.length>0)
				{
					oContainer=listSpecimenExtracted[indexIdSpecimen].container[0];
				}
				else
				{
					oContainer= Object.create(Container);
				}
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName;
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfSpecimenAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						var identifierListAttributes=specimenAttributesMapping.identifier.split(",");
						var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
						if(resCheck==true)
						{
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"Specimen Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
							listSpecimenExtracted[indexIdSpecimen].id=oTrackedEntity.attributes[iteratorAttribute].value;
							listOfSpecimenIdentifier.push(oIdentifier);
							specimenIsSet=true;
							continue;
						}
						switch(oAttribute)
						{
							case specimenAttributesMapping.status:
								listSpecimenExtracted[indexIdSpecimen].status=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.type:
								var oConceptSpecimenType={};
								oConceptSpecimenType= Object.create(oConceptSpecimenType);
								oConceptSpecimenType.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listSpecimenExtracted[indexIdSpecimen].type=oConceptSpecimenType;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.accession:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								oIdentifier.use="official";
								oIdentifier.type={"text":"Lab Identification"};
								oIdentifier.system="http://hl7.org/fhir";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								listSpecimenExtracted[indexIdSpecimen].accession=oIdentifier;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.receivedTime:
								listSpecimenExtracted[indexIdSpecimen].receivedTime=oTrackedEntity.attributes[iteratorAttribute].value;
								break;
							case specimenAttributesMapping.collectedDateTime:
								oCollection.collectedDateTime=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_quantity_unit:
								oCollection.quantity.unit=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_quantity_value:
								oCollection.quantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_method:
								oConceptCollectionMethod.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oCollection.method=oConceptCollectionMethod;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_bodySite:
								oConceptBodySite.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oCollection.bodySite=oConceptBodySite;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_capacity_unit:
								oContainer.capacity.unit=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_capacity_value:
								oContainer.capacity.value=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_description:
								oContainer.description=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.traitment_description:
								oTraitment.description=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.traitment_procedure:
								oConceptProcedure.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oTraitment.procedure=oConceptProcedure;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Container Identification"};
								oIdentifier.system="http://hl7.org/fhir";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								oContainer.Identifier=[oIdentifier];
								specimenIsSet=true;
								break;
						}
					
					}
				}//End for iteratorAttribute
				
			}//End if IndexIdSpecimen
			else
			{
				
				//Specimen initialization
				var oSpecimen={};
				oSpecimen= Object.create(Specimen);
				oSpecimen.resourceType="Specimen";
				//oSpecimen.id=oTrackedEntity.trackedEntityInstance;
				//oSpecimen.meta={"lastUpdated": formatDateInZform(oTrackedEntity.lastUpdated)};
				oSpecimen.active=true;
				var listOfSpecimenIdentifier=[];
				var listOfTraitment=[];
				var oConceptProcedure={};
				oConceptProcedure= Object.create(CodeableConcept);
				var oConceptCollectionMethod={};
				oConceptCollectionMethod= Object.create(CodeableConcept);
				var oConceptBodySite={};
				oConceptBodySite= Object.create(CodeableConcept);
				//oConceptProcedure.
				var oTraitment={
					"description":"",
					"procedure":{}
					};
				var oCollection={};
				oCollection= Object.create(Collection);
				var oContainer={};
				oContainer= Object.create(Container);
				var specimenIsSet=false;
				var hasCollectionInfo=false;
				var hasTraitementInfo=false;
				var hasContainerInfo=false;
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName.trim();
					var inTheList=false;
					var itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfSpecimenAttributeMapping();
					//console.log(itemListAttributesMapping);
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						var identifierListAttributes=specimenAttributesMapping.identifier.split(",");
						var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
						if(resCheck==true)
						{
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"Specimen Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
							oSpecimen.id=oTrackedEntity.attributes[iteratorAttribute].value+"-";
							listOfSpecimenIdentifier.push(oIdentifier);
							specimenIsSet=true;
							continue;
						}
						switch(oAttribute)
						{
							case specimenAttributesMapping.status:
								oSpecimen.status=oTrackedEntity.attributes[iteratorAttribute].value;
								//oSpecimen.status="available";
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.type:
								var oConceptSpecimenType={};
								oConceptSpecimenType= Object.create(oConceptSpecimenType);
								oConceptSpecimenType.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oSpecimen.type=oConceptSpecimenType;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.accession:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								oIdentifier.use="official";
								oIdentifier.type={"text":"Lab Identification"};
								oIdentifier.system="http://hl7.org/fhir";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								oSpecimen.accession=oIdentifier;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.receivedTime:
								oSpecimen.receivedTime=oTrackedEntity.attributes[iteratorAttribute].value;
								break;
							case specimenAttributesMapping.collectedDateTime:
								oCollection.collectedDateTime=oTrackedEntity.attributes[iteratorAttribute].value;
								hasCollectionInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_quantity_unit:
								oCollection.quantity.unit=oTrackedEntity.attributes[iteratorAttribute].value;
								hasCollectionInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_quantity_value:
								oCollection.quantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
								hasCollectionInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_method:
								oConceptCollectionMethod.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oCollection.method=oConceptCollectionMethod;
								hasCollectionInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_bodySite:
								oConceptBodySite.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oCollection.bodySite=oConceptBodySite;
								hasCollectionInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_capacity_unit:
								oContainer.capacity.unit=oTrackedEntity.attributes[iteratorAttribute].value;
								hasContainerInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_capacity_value:
								oContainer.capacity.value=oTrackedEntity.attributes[iteratorAttribute].value;
								hasContainerInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_description:
								oContainer.description=oTrackedEntity.attributes[iteratorAttribute].value;
								hasContainerInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.traitment_description:
								oTraitment.description=oTrackedEntity.attributes[iteratorAttribute].value;
								hasTraitementInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.traitment_procedure:
								oConceptProcedure.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oTraitment.procedure=oConceptProcedure;
								hasTraitementInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Container Identification"};
								oIdentifier.system="http://hl7.org/fhir";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								oContainer.Identifier=[oIdentifier];
								specimenIsSet=true;
								break;
						}
					
					}
				}
				
				if(specimenIsSet==true)
				{
					if(getIndexOfFhirResourceById(listSpecimenExtracted,oSpecimen.id)==-1)
					{
						var associatedEntityIdentifier={};
						associatedEntityIdentifier=Object.create(Identifier);
						//assignment of Identifier
						associatedEntityIdentifier.use="secondary";
						associatedEntityIdentifier.type={"text":"Associated TEI"};
						associatedEntityIdentifier.system="http://hl7.org/fhir/";
						associatedEntityIdentifier.value=oTrackedEntity.trackedEntityInstance;
						listOfSpecimenIdentifier.push(associatedEntityIdentifier);
						oSpecimen.Identifier=listOfSpecimenIdentifier;
						/*
						if(listOfSpecimenIdentifier.length)
						{
							oSpecimen.id=listOfSpecimenIdentifier[0].value;
						}*/
						if(hasCollectionInfo==true)
						{
							oSpecimen.collection=oCollection;
						}
						if(hasTraitementInfo==true)
						{
							oSpecimen.treatment=[oTraitment];
						}
						if(hasContainerInfo==true)
						{
							oSpecimen.Container=[oContainer];
						}
						if (PatientSet==true)
						{
							oSpecimen.subject={"reference":"Patient/"+oPatient.id};
						}
						//entitySpecimen=oSpecimen;
						
						//listEntityObject.push(entitySpecimen);
						listSpecimenExtracted.push(oSpecimen);
					}
					//console.log(oSpecimen);
				}
			
			
			}//End else indexIdSpecimen
			//Check for DiagnosticOrder Information
		}//End for IteratorEntity to search for specimen
		//Populate Condition
		for(var iteratorEntity=0;iteratorEntity<listofTrackedEntity.length;iteratorEntity++)
		{
			var oTrackedEntity=listofTrackedEntity[iteratorEntity];
			var indexIdCondition=-1;
			var conditionIsSet=false;
			var idConditionToSearch=oTrackedEntity.trackedEntityInstance;
			indexIdCondition=getIndexOfFhirResourceByIdentification(listConditionExtracted,idConditionToSearch);
			if(indexIdCondition>=0)
			{
				//console.log("Entered in condition statement!!")
				var listOfConditionIdentifier=[];
				if(listConditionExtracted[indexIdCondition].identifier.length>0)
				{
					listOfConditionIdentifier=listObservationExtracted[indexIdCondition].identifier;
				}
				
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName;
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfConditionAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						switch(oAttribute)
						{
							case conditionAttributesMapping.identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Condition Identification"};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								listOfConditionIdentifier.push(oIdentifier);
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.patient:
								listConditionExtracted[indexIdCondition].patient={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.encounter:
								listConditionExtracted[indexIdCondition].encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.dateRecorded:
								listConditionExtracted[indexIdCondition].dateRecorded=extractDateFromDateTime(oTrackedEntity.attributes[iteratorAttribute].value);
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.code:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listConditionExtracted[indexIdCondition].code=oConcept;
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.category:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listConditionExtracted[indexIdCondition].category=oConcept;
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.clinicalStatus:
								listConditionExtracted[indexIdCondition].clinicalStatus=oTrackedEntity.attributes[iteratorAttribute].value;
								//active
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.verificationStatus:
								listConditionExtracted[indexIdCondition].verificationStatus=oTrackedEntity.attributes[iteratorAttribute].value;
								//provisional
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.severity:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listConditionExtracted[indexIdCondition].severity=oConcept;
								//provisional
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.onsetDateTime:
								listConditionExtracted[indexIdCondition].onsetDateTime=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								
								conditionIsSet=true;
								break;
							
							}
						
					}
				}
				if(conditionIsSet==true)
				{
					listConditionExtracted[indexIdCondition].identifier=listOfConditionIdentifier;
				}
			}
			else
			{
				//Observation initialization
				var oCondition={};
				oCondition= Object.create(Condition);
				oCondition.resourceType="Condition";
				var listOfConditionIdentifier=[];
				var listOfDateCreatedAttribute=[];
				
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName.trim();
					listOfDateCreatedAttribute.push(oTrackedEntity.attributes[iteratorAttribute].created);
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfConditionAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true && oTrackedEntity.attributes[iteratorAttribute].value!="")
					{
						switch(oAttribute)
						{
							case conditionAttributesMapping.identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Condition Identification"};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								listOfConditionIdentifier.push(oIdentifier);
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.patient:
								//oCondition.patient={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.encounter:
								//oCondition.encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
								//conditionIsSet=true;
								break;
							case conditionAttributesMapping.dateRecorded:
								oCondition.dateRecorded=extractDateFromDateTime(oTrackedEntity.attributes[iteratorAttribute].value);
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.code:
								
								if(oTrackedEntity.attributes[iteratorAttribute].value!="")
								{
									var  oConcept={};
									oConcept= Object.create(CodeableConcept);
									oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
									oCondition.code=oConcept;
									conditionIsSet=true;
								}
								break;
							case conditionAttributesMapping.category:
								if(oTrackedEntity.attributes[iteratorAttribute].value!="")
								{
									var  oConcept={};
									oConcept= Object.create(CodeableConcept);
									oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
									oCondition.category=oConcept;
									conditionIsSet=true;
								}
								break;
							case conditionAttributesMapping.clinicalStatus:
								oCondition.clinicalStatus=oTrackedEntity.attributes[iteratorAttribute].value;
								//active
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.verificationStatus:
								oCondition.verificationStatus=oTrackedEntity.attributes[iteratorAttribute].value;
								//provisional
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.severity:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oCondition.severity=oConcept;
								//provisional
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.onsetDateTime:
								oCondition.onsetDateTime=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								
								conditionIsSet=true;
								break;
						}//End of switch
					
					}
				}
				if(conditionIsSet==true && oCondition.code!="")
				{
					
					oCondition.id=oTrackedEntity.trackedEntityInstance;
					//
					var associatedEntityIdentifier={};
					associatedEntityIdentifier=Object.create(Identifier);
					//assignment of Identifier
					associatedEntityIdentifier.use="secondary";
					associatedEntityIdentifier.type={"text":"Associated TEI"};
					associatedEntityIdentifier.system="http://hl7.org/fhir/";
					associatedEntityIdentifier.value=oTrackedEntity.trackedEntityInstance;
					listOfConditionIdentifier.push(associatedEntityIdentifier);
					oCondition.identifier=listOfConditionIdentifier;
					//Add additional information for validation
					if(oCondition.dateRecorded=="")
					{
						var dateCreated=getOldDate(listOfDateCreatedAttribute);
						oCondition.dateRecorded=extractDateFromDateTime(dateCreated);
					}
					if(oCondition.clinicalStatus=="")
					{
						oCondition.clinicalStatus="active";
					}
					if(oCondition.onsetDateTime=="")
					{
						var dateCreated=getOldDate(listOfDateCreatedAttribute);
						oCondition.onsetDateTime=formatDateInZform(dateCreated);
					}
					if(oCondition.verificationStatus=="")
					{
						oCondition.verificationStatus="provisional";
					}
					if (PatientSet==true)
					{
						oCondition.patient={"reference":"Patient/"+oPatient.id};
					}
					listConditionExtracted.push(oCondition);
				}
		
			}
		}//End for IteratorEntity to search for Condition
		//console.log(listConditionExtracted);
		//Populate DiagnosticOrder
		for(var iteratorEntity=0;iteratorEntity<listofTrackedEntity.length;iteratorEntity++)
		{
			var oTrackedEntity=listofTrackedEntity[iteratorEntity];
			var indexIdOrder=-1;
			orderIsSet=false;
			var idOrderToSearch=oTrackedEntity.trackedEntityInstance;
			indexIdOrder=getIndexOfFhirResourceByIdentification(listDiagnosticOrderExtracted,idOrderToSearch);
			if(indexIdOrder>=0)
			{
				var oOrderEvent={};
				if(listDiagnosticOrderExtracted[indexIdOrder].event.length>0)
				{
					oOrderEvent=listDiagnosticOrderExtracted[indexIdOrder].event[0];
				}
				else
				{
					oOrderEvent= Object.create(OrderEvent);
				}
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName;
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfDiagnosticOrderAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						
						switch(oAttribute)
						{
							case orderAttributesMapping.identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Order Identification"};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								listOfOrderIdentifier.push(oIdentifier);
								orderIsSet=true;
								break;
							case orderAttributesMapping.subject:
								listDiagnosticOrderExtracted[indexIdOrder].subject={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value.trim()+"-"};
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderer:
								//listDiagnosticOrderExtracted[indexIdOrder].orderer={"reference":"Practitioner/"+oTrackedEntity.attributes[iteratorAttribute].value};
								//orderIsSet=true;
								break;
							case orderAttributesMapping.encounter:
								//listDiagnosticOrderExtracted[indexIdOrder].encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
								//orderIsSet=true;
								break;
							case orderAttributesMapping.reason:
								var oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listDiagnosticOrderExtracted[indexIdOrder].reason=[oConcept];
								orderIsSet=true;
								break;
							case orderAttributesMapping.supportingInformation:
								listDiagnosticOrderExtracted[indexIdOrder].supportingInformation=[oTrackedEntity.attributes[iteratorAttribute].value];
								orderIsSet=true;
								break;
							case orderAttributesMapping.specimen:
								//listDiagnosticOrderExtracted[indexIdOrder].specimen={"reference":"Specimen/"+oTrackedEntity.attributes[i].value};
								//orderIsSet=true;
								break;
							case orderAttributesMapping.status:
								listDiagnosticOrderExtracted[indexIdOrder].status=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.priority:
								listDiagnosticOrderExtracted[indexIdOrder].priority=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderEvent_dateTime:
								oOrderEvent.dateTime=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderEvent_status:
								oOrderEvent.status=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderEvent_description:
								var oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oOrderEvent.description=oConcept;
								orderIsSet=true;
								break;
							case orderAttributesMapping.item:
								var oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listDiagnosticOrderExtracted[indexIdOrder].item=[oConcept];
								orderIsSet=true;
								break;
							case orderAttributesMapping.note:
								listDiagnosticOrderExtracted[indexIdOrder].note={"text":oTrackedEntity.attributes[i].value};
								orderIsSet=true;
								break;
							
						}
							
					}
			
				}//End for oTrackedEntity.attributes
				
				//Get the corresponding Order if from the extracted order entry
				if(orderIsSet==true)
				{
					listDiagnosticOrderExtracted[indexIdOrder].event[oOrderEvent];
				}
				if (listConditionExtracted.length>0)
				{
					listDiagnosticOrderExtracted[indexIdOrder].supportingInformation=[];
					var listAssociatedCondition=getListEntityInstanceAssociatedCondition(listConditionExtracted,oTrackedEntity.trackedEntityInstance,"Associated TEI");
					for(var iteratorResource=0;iteratorResource<listAssociatedCondition.length;iteratorResource++)
					{
						var resourceRef={"reference":"Condition/"+listAssociatedCondition[iteratorResource].id};
						listDiagnosticOrderExtracted[indexIdOrder].supportingInformation.push(resourceRef);
					}
				}
				
			}//End if indexIdOrder
			else
			{
				//Order Initialization
				var oOrder={};
				oOrder= Object.create(DiagnosticOrder);
				oOrder.resourceType="DiagnosticOrder";
				var listOfOrderIdentifier=[];
				var oOrderEvent={};
				oOrderEvent= Object.create(OrderEvent);
				oOrder.specimen=[];
				var orderIsSet=false;
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName.trim();
					var inTheList=false;
					//inTheList=checkAttributeInList
					var itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfDiagnosticOrderAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						switch(oAttribute)
						{
							case orderAttributesMapping.identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Order Identification"};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								listOfOrderIdentifier.push(oIdentifier);
								orderIsSet=true;
								break;
							case orderAttributesMapping.subject:
								oOrder.subject={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderer:
								oOrder.orderer={"reference":"Practitioner/"+oTrackedEntity.attributes[iteratorAttribute].value};
								orderIsSet=true;
								break;
							case orderAttributesMapping.encounter:
								oOrder.encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
								orderIsSet=true;
								break;
							case orderAttributesMapping.reason:
								var oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oOrder.reason=[oConcept];
								orderIsSet=true;
								break;
							case orderAttributesMapping.supportingInformation:
								oOrder.supportingInformation=[oTrackedEntity.attributes[iteratorAttribute].value];
								orderIsSet=true;
								break;
							case orderAttributesMapping.specimen:
								oOrder.specimen={"reference":"Specimen/"+oTrackedEntity.attributes[iteratorAttribute].value};
								orderIsSet=true;
								break;
							case orderAttributesMapping.status:
								oOrder.status=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.priority:
								oOrder.priority=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderEvent_dateTime:
								oOrderEvent.dateTime=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderEvent_status:
								oOrderEvent.status=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderEvent_description:
								var oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oOrderEvent.description=oConcept;
								orderIsSet=true;
								break;
							case orderAttributesMapping.item:
								var oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oOrder.item=[oConcept];
								orderIsSet=true;
								break;
							case orderAttributesMapping.note:
								oOrder.note={"text":oTrackedEntity.attributes[iteratorAttribute].value};
								orderIsSet=true;
								break;
							
						}//End of switch
					
					}
					
				}
				if(orderIsSet==true)
				{
					
					oOrder.id=oTrackedEntity.trackedEntityInstance;
					//oOrder.Identifier=listOfOrderIdentifier;
					//Add additional information to allow to mapping of order to the patient
					//as there is information of order amoung the patient attribute
					//
					var associatedEntityIdentifier={};
					associatedEntityIdentifier=Object.create(Identifier);
					//assignment of Identifier
					associatedEntityIdentifier.use="secondary";
					associatedEntityIdentifier.type={"text":"Associated TEI"};
					associatedEntityIdentifier.system="http://hl7.org/fhir/";
					associatedEntityIdentifier.value=oTrackedEntity.trackedEntityInstance;
					listOfOrderIdentifier.push(associatedEntityIdentifier);
					oOrder.identifier=listOfOrderIdentifier;
					//Add additional information for validation
					oOrderEvent.status="requested";
					
					if (PatientSet==true)
					{
						oOrder.subject={"reference":"Patient/"+oPatient.id};
					}
					if (listSpecimenExtracted.length>0)
					{
						var listAssociatedSpecimen=getListEntityInstanceAssociatedSpecimens(listSpecimenExtracted,oTrackedEntity.trackedEntityInstance,"Associated TEI");
						for(var iteratorSpecimen=0;iteratorSpecimen<listAssociatedSpecimen.length;iteratorSpecimen++)
						{
							var specimenRef={"reference":"Specimen/"+listAssociatedSpecimen[iteratorSpecimen].id};
							oOrder.specimen.push(specimenRef);
						}
					}
					if (listConditionExtracted.length>0)
					{
						oOrder.supportingInformation=[];
						var listAssociatedCondition=getListEntityInstanceAssociatedCondition(listConditionExtracted,oTrackedEntity.trackedEntityInstance,"Associated TEI");
						for(var iteratorResource=0;iteratorResource<listAssociatedCondition.length;iteratorResource++)
						{
							var resourceRef={"reference":"Condition/"+listAssociatedCondition[iteratorResource].id};
							oOrder.supportingInformation.push(resourceRef);
						}
					}
					listDiagnosticOrderExtracted.push(oOrder);
					
				}
				
			}
			
		}//En for IteratorEntity to search for DiagnosticOrder
		//Populate Observation
		for(var iteratorEntity=0;iteratorEntity<listofTrackedEntity.length;iteratorEntity++)
		{
			var oTrackedEntity=listofTrackedEntity[iteratorEntity];
			var indexIdObservation=-1;
			var observationIsSet=false;
			var idObservationToSearch=oTrackedEntity.trackedEntityInstance;
			indexIdObservation=getIndexOfFhirResourceByIdentification(listObservationExtracted,idObservationToSearch);
			if(indexIdObservation>=0)
			{
				var listOfObservationIdentifier=[];
				if(listObservationExtracted[indexIdObservation].identifier.length>0)
				{
					listOfObservationIdentifier=listObservationExtracted[indexIdObservation].identifier;
				}
				var oSampledData={};
				if(listObservationExtracted[indexIdObservation].valueSampledData=={})
				{
					oSampledData= Object.create(SampledData);
				}
				else
				{
					oSampledData=listObservationExtracted[indexIdObservation].valueSampledData;
				}
				var oPeriodEffective={};
				if(listObservationExtracted[indexIdObservation].effectivePeriod=={})
				{
					oPeriodEffective= Object.create(Period);
				}
				else
				{
					oPeriodEffective=listObservationExtracted[indexIdObservation].effectivePeriod;
				}
				
				var oPeriodResult={};
				if(listObservationExtracted[indexIdObservation].valuePeriod=={})
				{
					oPeriodResult= Object.create(Period);
				}
				else
				{
					oPeriodResult=listObservationExtracted[indexIdObservation].valuePeriod;
				}
				
				var oValueQuantity={};
				if(listObservationExtracted[indexIdObservation].valueQuantity=={})
				{
					oValueQuantity= Object.create(Quantity);
				}
				else
				{
					oValueQuantity=listObservationExtracted[indexIdObservation].valueQuantity;
				}
				var oObservationRange={};
				if(listObservationExtracted[indexIdObservation].valueRange=={})
				{
					oObservationRange=Object.create(Range);
				}
				else
				{
					oObservationRange=listObservationExtracted[indexIdObservation].valueRange;
				}
				
				var oObservationRatio={};
				if(listObservationExtracted[indexIdObservation].valueRatio=={})
				{
					oObservationRatio=Object.create(Ratio);
				}
				else
				{
					oObservationRatio=listObservationExtracted[indexIdObservation].valueRatio;
				}
				var oBodySiteConcept={};
				if(listObservationExtracted[indexIdObservation].bodySite=={})
				{
					oBodySiteConcept=Object.create(CodeableConcept);
				}
				else
				{
					oBodySiteConcept=listObservationExtracted[indexIdObservation]
				}
				
				var oAbsentRaisonConcept={};
				if(listObservationExtracted[indexIdObservation].dataAbsentReason=={})
				{
					oAbsentRaisonConcept=Object.create(CodeableConcept);
				}
				else
				{
					oAbsentRaisonConcept=listObservationExtracted[indexIdObservation].dataAbsentReason;
				}
				
				
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName;
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfObservationAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						switch(oAttribute)
						{
							case observationAttributesMapping.identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Observation Identification"};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								listOfObservationIdentifier.push(oIdentifier);
								observationIsSet=true;
								break;
							case observationAttributesMapping.status:
								listObservationExtracted[indexIdObservation].status=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.category:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listObservationExtracted[indexIdObservation].category=oConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.code:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listObservationExtracted[indexIdObservation].code=oConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.subject:
								//listObservationExtracted[indexIdObservation].subject={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
								break;
							case observationAttributesMapping.encounter:
								listObservationExtracted[indexIdObservation].encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
								observationIsSet=true;
								break;
							case observationAttributesMapping.effectiveDateTime:
								listObservationExtracted[indexIdObservation].effectiveDateTime=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.effectivePeriod_dateSup:
								oPeriodEffective.end= formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								observationIsSet=true;
								break;
							case observationAttributesMapping.effectivePeriod_dateInf:
								oPeriodEffective.start=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								observationIsSet=true;
								break;
							case observationAttributesMapping.issued:
								listObservationExtracted[indexIdObservation].issued=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								break;
							case observationAttributesMapping.performer:
								//listObservationExtracted[indexIdObservation].performer=[{"reference":"Practitioner/"+oTrackedEntity.attributes[iteratorAttribute].value}];
								//observationIsSet=true;
								break;
							case observationAttributesMapping.valueQuantity_unit:
									oValueQuantity.unit=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueQuantity_value:
									oValueQuantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueCodeableConcept:
									var  oConcept={};
									oConcept= Object.create(CodeableConcept);
									oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
									listObservationExtracted[indexIdObservation].valueCodeableConcept=oConcept;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueString:
									listObservationExtracted[indexIdObservation].valueString=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueRange_sup:
									var rangeQuantity=Object.create(Quantity);
									rangeQuantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
									oObservationRange.high=rangeQuantity;
									break;
							case observationAttributesMapping.valueRange_Inf:
									var rangeQuantity=Object.create(Quantity);
									rangeQuantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
									oObservationRange.low=rangeQuantity;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueRatio_num:
									oObservationRatio.numerator=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueRatio_denom:
									oObservationRatio.denominator=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueSampledData_origin:
									oOriginQuantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
									break;
							case observationAttributesMapping.valueSampledData_period:
									oSampledData.period=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueSampledData_factor:
									oSampledData.factor=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueSampledData_lowerLimit:
									oSampledData.lowerLimit=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueSampledData_upperLimit:
									oSampledData.upperLimit=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueSampledData_dimensions:
									oSampledData.dimensions=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueSampledData_data:
									oSampledData.data=oTrackedEntity.attributes[iteratorAttribute].value;
									break;
							case observationAttributesMapping.valueTime:
									listObservationExtracted[indexIdObservation].valueTime=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueDateTime:
									listObservationExtracted[indexIdObservation].valueDateTime=oTrackedEntity.attributes[iteratorAttribute].value;
									break;
							case observationAttributesMapping.valuePeriod_start:
									oPeriodResult.start=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valuePeriod_end:
									oPeriodResult.end=oTrackedEntity.attributes[iteratorAttribute].value;
									break;
							case observationAttributesMapping.dataAbsentReason:
									oAbsentRaisonConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
									listObservationExtracted[indexIdObservation].dataAbsentReason=oAbsentRaisonConcept;
									observationIsSet=true;
									break;
							case observationAttributesMapping.interpretation:
									var  oConcept={};
									oConcept= Object.create(CodeableConcept);
									oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
									listObservationExtracted[indexIdObservation].interpretation=oConcept;
									break;
							case observationAttributesMapping.comments:
									listObservationExtracted[indexIdObservation].comments=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.bodySite:
									oBodySiteConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
									listObservationExtracted[indexIdObservation].bodySite=oBodySiteConcept;
									observationIsSet=true;
									break;
							case observationAttributesMapping.method:
									var  oConcept={};
									oConcept= Object.create(CodeableConcept);
									oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
									listObservationExtracted[indexIdObservation].method=oConcept;
									observationIsSet=true;
									break;
							case observationAttributesMapping.specimen:
									//listObservationExtracted[indexIdObservation].specimen={"reference":"Specimen/"+oTrackedEntity.attributes[iteratorAttribute].value};
									break;
							case observationAttributesMapping.device:
									//listObservationExtracted[indexIdObservation].device={"reference":"Device/"+oTrackedEntity.attributes[iteratorAttribute].value};
									//observationIsSet=true;
									break;
							case observationAttributesMapping.referenceRange:
									listObservationExtracted[indexIdObservation].referenceRange=[];
									break;
							case observationAttributesMapping.related:
									listObservationExtracted[indexIdObservation].related=[];
									observationIsSet=true;
									break;
							case observationAttributesMapping.component:
									listObservationExtracted[indexIdObservation].component=[];
									observationIsSet=true;
									break;
							}
						
					}
				}
				if(observationIsSet==true)
				{
					oSampledData.origin=oOriginQuantity;
					listObservationExtracted[indexIdObservation].valueSampledData=oSampledData;
					listObservationExtracted[indexIdObservation].identifier=listOfObservationIdentifier;
					listObservationExtracted[indexIdObservation].effectivePeriod=oPeriodEffective;
					listObservationExtracted[indexIdObservation].valueQuantity=oValueQuantity;
					listObservationExtracted[indexIdObservation].valueRange=oObservationRange;
					//checkIfAsProperties(oObservationRange);
					listObservationExtracted[indexIdObservation].valueRatio=oObservationRatio;
					listObservationExtracted[indexIdObservation].valuePeriod=oPeriodResult;
				}
			}
			else
			{
				//Observation initialization
				var oObservation={};
				oObservation= Object.create(Observation);
				oObservation.resourceType="Observation";
				var listOfObservationIdentifier=[];
				var oSampledData={};
				oSampledData= Object.create(SampledData);
				var oPeriodEffective={};
				oPeriodEffective= Object.create(Period);
				var oPeriodResult={};
				oPeriodResult= Object.create(Period);
				var oValueQuantity={};
				oValueQuantity= Object.create(Quantity);
				var oOriginQuantity={};
				oOriginQuantity= Object.create(Quantity);
				var oObservationRange={};
				oObservationRange=Object.create(Range);
				var oObservationRatio={};
				oObservationRatio=Object.create(Ratio);
				var oBodySiteConcept={};
				oBodySiteConcept=Object.create(CodeableConcept);
				var oAbsentRaisonConcept={};
				oAbsentRaisonConcept=Object.create(CodeableConcept);
				var observationIsSet=false;
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName.trim();
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfObservationAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						switch(oAttribute)
						{
							case observationAttributesMapping.identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Observation Identification"};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								listOfObservationIdentifier.push(oIdentifier);
								observationIsSet=true;
								break;
							case observationAttributesMapping.status:
								oObservation.status=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.category:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservation.category=oConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.code:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservation.code=oConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.subject:
								oObservation.subject={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
								break;
							case observationAttributesMapping.encounter:
								oObservation.encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
								observationIsSet=true;
								break;
							case observationAttributesMapping.effectiveDateTime:
								oObservation.effectiveDateTime=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.effectivePeriod_dateSup:
								oPeriodEffective.end= formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								observationIsSet=true;
								break;
							case observationAttributesMapping.effectivePeriod_dateInf:
								oPeriodEffective.start=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								observationIsSet=true;
								break;
							case observationAttributesMapping.issued:
								oObservation.issued=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								break;
							case observationAttributesMapping.performer:
								oObservation.performer=[{"reference":"Practitioner/"+oTrackedEntity.attributes[iteratorAttribute].value}];
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueQuantity_unit:
								oValueQuantity.unit=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueQuantity_value:
								oValueQuantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueCodeableConcept:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservation.valueCodeableConcept=oConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueString:
								oObservation.valueString=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueRange_sup:
								var rangeQuantity=Object.create(Quantity);
								rangeQuantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservationRange.high=rangeQuantity;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueRange_Inf:
								var rangeQuantity=Object.create(Quantity);
								rangeQuantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservationRange.low=rangeQuantity;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueRatio_num:
								oObservationRatio.numerator=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueRatio_denom:
								oObservationRatio.denominator=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueSampledData_origin:
									oOriginQuantity.value=oEvent.dataValues[iteratorDataValues].value;
									break;
							case observationAttributesMapping.valueSampledData_period:
								oSampledData.period=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueSampledData_factor:
								oSampledData.factor=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueSampledData_lowerLimit:
								oSampledData.lowerLimit=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueSampledData_upperLimit:
								oSampledData.upperLimit=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueSampledData_dimensions:
								oSampledData.dimensions=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueSampledData_data:
								oSampledData.data=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueTime:
								oObservation.valueTime=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueDateTime:
								oObservation.valueDateTime=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valuePeriod_start:
								oPeriodResult.start=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valuePeriod_end:
								oPeriodResult.end=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.dataAbsentReason:
								oAbsentRaisonConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservation.dataAbsentReason=oAbsentRaisonConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.interpretation:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservation.interpretation=oConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.comments:
								oObservation.comments=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.bodySite:
								oBodySiteConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservation.bodySite=oBodySiteConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.method:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservation.method=oConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.specimen:
								oObservation.specimen={"reference":"Specimen/"+oTrackedEntity.attributes[iteratorAttribute].value};
								observationIsSet=true;
								break;
							case observationAttributesMapping.device:
								oObservation.device={"reference":"Device/"+oTrackedEntity.attributes[iteratorAttribute].value};
								observationIsSet=true;
								break;
							case observationAttributesMapping.referenceRange:
									//oObservation.referenceRange=[];
									break;
							case observationAttributesMapping.related:
									//oObservation.related=[];
									break;
							case observationAttributesMapping.component:
									//oObservation.component=[];
									break;
							}//End of switch
					
					}
				}
				if(observationIsSet==true)
				{
					
					oObservation.id=oTrackedEntity.trackedEntityInstance;
					//
					oSampledData.origin=oOriginQuantity;
					oObservation.valueSampledData=oSampledData;
					//oObservation.identifier=listOfObservationIdentifier;
					oObservation.effectivePeriod=oPeriodEffective;
					oObservation.valueQuantity=oValueQuantity;
					oObservation.valueRange=oObservationRange;
					//checkIfAsProperties(oObservationRange);
					oObservation.valueRatio=oObservationRatio;
					oObservation.valuePeriod=oPeriodResult;
					//
					var associatedEntityIdentifier={};
					associatedEntityIdentifier=Object.create(Identifier);
					//assignment of Identifier
					associatedEntityIdentifier.use="secondary";
					associatedEntityIdentifier.type={"text":"Associated TEI"};
					associatedEntityIdentifier.system="http://hl7.org/fhir/";
					associatedEntityIdentifier.value=oTrackedEntity.trackedEntityInstance;
					listOfObservationIdentifier.push(associatedEntityIdentifier);
					oObservation.identifier=listOfObservationIdentifier;
					//Add additional information for validation
					oObservation.status="registered";
					//By Default used Microscopy observation as code
					var oConcept={};
					oConcept= Object.create(CodeableConcept);
					oConcept.text="Microscopic Observation";
					oConcept.code=[{"code":"10355-6"}];
					if (PatientSet==true)
					{
						oObservation.subject={"reference":"Patient/"+oPatient.id};
					}
					if (listSpecimenExtracted.length>0)
					{
						var listAssociatedSpecimen=getListEntityInstanceAssociatedSpecimens(listSpecimenExtracted,oTrackedEntity.trackedEntityInstance,"Associated TEI");
						for(var iteratorSpecimen=0;iteratorSpecimen<listAssociatedSpecimen.length;iteratorSpecimen++)
						{
							var specimenRef={"reference":"Specimen/"+listAssociatedSpecimen[iteratorSpecimen].id};
							oObservation.specimen=specimenRef;
							break;
						}
					}
					listObservationExtracted.push(oObservation);
				}
		
			}
		}//End for IteratorEntity to search for Observation
		
		//Populate DiagnosticReport
		for(var iteratorEntity=0;iteratorEntity<listofTrackedEntity.length;iteratorEntity++)
		{
			var oTrackedEntity=listofTrackedEntity[iteratorEntity];
			var indexIdDiagnosticReport=-1;
			var diagnosticReportIsSet=false;
			var idDiagnosticReportToSearch=oTrackedEntity.trackedEntityInstance;
			indexIdDiagnosticReport=getIndexOfFhirResourceByIdentification(listDiagnosticReportExtracted,idDiagnosticReportToSearch);
			if(indexIdDiagnosticReport>=0)
			{
				var listOfDiagnosticReportIdentifier=[];
				if(listDiagnosticReportExtracted[indexIdDiagnosticReport].identifier.length>0)
				{
					listOfDiagnosticReportIdentifier=listDiagnosticReportExtracted[indexIdDiagnosticReport].identifier;
				}
				var oEffectivePeriod={};
				if(listDiagnosticReportExtracted[indexIdDiagnosticReport].effectivePeriod!="")
				{
					oEffectivePeriod=listDiagnosticReportExtracted[indexIdDiagnosticReport].effectivePeriod;
				}
				else
				{
					oEffectivePeriod= Object.create(Period);
				}
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName;
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfDiagnosticReportAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						switch(oAttribute)
						{
						case diagnosticReportAttributesMapping.identifier:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"DiagnosticReport Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
							listOfDiagnosticReportIdentifier.push(oIdentifier);
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.status:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].status=oTrackedEntity.attributes[iteratorAttribute].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.category:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
							listDiagnosticReportExtracted[indexIdDiagnosticReport].category=oConcept;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.code:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
							listDiagnosticReportExtracted[indexIdDiagnosticReport].code=oConcept;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.subject:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].subject={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.encounter:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectiveDateTime:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].effectiveDateTime=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectivePeriod_start:
							oEffectivePeriod.start=oTrackedEntity.attributes[iteratorAttribute].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectivePeriod_end:
							oEffectivePeriod.end=oTrackedEntity.attributes[iteratorAttribute].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.issued:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].issued=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.performer:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].performer={"reference":"Organization/"+oTrackedEntity.attributes[iteratorAttribute].value};
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.request:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].request=[{"reference":"DiagnosticOrder/"+oTrackedEntity.attributes[iteratorAttribute].value}];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.specimen:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].specimen=[{"reference":"Specimen/"+oTrackedEntity.attributes[iteratorAttribute].value}];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.result:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].result=[{"reference":"Observation/"+oTrackedEntity.attributes[iteratorAttribute].value}];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.imagingStudy:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].imagingStudy=[];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.image:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].image=[];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.conclusion:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].conclusion=oTrackedEntity.attributes[iteratorAttribute].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.codedDiagnosis:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
							listDiagnosticReportExtracted[indexIdDiagnosticReport].codedDiagnosis=[oConcept];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.presentedForm:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].presentedForm=[];
							diagnosticReportIsSet=true;
							break;
						}
						
					}
				}
				if(diagnosticReportIsSet==true)
				{
					listDiagnosticReportExtracted[indexIdDiagnosticReport].identifier=listOfDiagnosticReportIdentifier;
					listDiagnosticReportExtracted[indexIdDiagnosticReport].effectivePeriod=oEffectivePeriod;
					//Add additional information for validation
				}
			}
			else
			{
				//Observation initialization
				
				
				var oDiagnosticReport={};
				oDiagnosticReport= Object.create(DiagnosticReport);
				oDiagnosticReport.resourceType="DiagnosticReport";
				var listOfDiagnosticReportIdentifier=[];
				var oEffectivePeriod={};
				oEffectivePeriod= Object.create(Period);
				oDiagnosticReport.request=[];
				oDiagnosticReport.specimen=[];
				oDiagnosticReport.result=[];
				var diagnosticReportIsSet=false;
				var effectivePeriodIsSet=false;
				var listOfDateCreatedAttribute=[];
				//console.log(listSpecimenExtracted);
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName;
					listOfDateCreatedAttribute.push(oTrackedEntity.attributes[iteratorAttribute].created);
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfDiagnosticReportAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						switch(oAttribute)
						{
						case diagnosticReportAttributesMapping.identifier:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"DiagnosticReport Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
							listOfDiagnosticReportIdentifier.push(oIdentifier);
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.status:
							oDiagnosticReport.status=oTrackedEntity.attributes[iteratorAttribute].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.category:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
							oDiagnosticReport.category=oConcept;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.code:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
							oDiagnosticReport.code=oConcept;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.subject:
							//oDiagnosticReport.subject={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.encounter:
							oDiagnosticReport.encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectiveDateTime:
							//oDiagnosticReport.effectiveDateTime=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectivePeriod_start:
							oEffectivePeriod.start=oTrackedEntity.attributes[iteratorAttribute].value;
							effectivePeriodIsSet=true;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectivePeriod_end:
							oEffectivePeriod.end=oTrackedEntity.attributes[iteratorAttribute].value;
							effectivePeriodIsSet=true;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.issued:
							//oDiagnosticReport.issued=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.performer:
							//oDiagnosticReport.performer={"reference":"Organization/"+oTrackedEntity.attributes[iteratorAttribute].value};
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.request:
							//oDiagnosticReport.request=[{"reference":"DiagnosticOrder/"+oTrackedEntity.attributes[iteratorAttribute].value}];
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.specimen:
							//oDiagnosticReport.specimen=[{"reference":"Specimen/"+oTrackedEntity.attributes[iteratorAttribute].value}];
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.result:
							//oDiagnosticReport.result=[{"reference":"Observation/"+oTrackedEntity.attributes[iteratorAttribute].value}];
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.imagingStudy:
							oDiagnosticReport.imagingStudy=[];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.image:
							oDiagnosticReport.image=[];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.conclusion:
							oDiagnosticReport.conclusion=oTrackedEntity.attributes[iteratorAttribute].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.codedDiagnosis:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
							oDiagnosticReport.codedDiagnosis=[oConcept];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.presentedForm:
							oDiagnosticReport.presentedForm=[];
							diagnosticReportIsSet=true;
							break;
						}//End of switch
					
					}
				}
				if(diagnosticReportIsSet==true)
				{
					//console.log(listSpecimenExtracted);
					oDiagnosticReport.id=oTrackedEntity.trackedEntityInstance;
					var associatedEntityIdentifier={};
					associatedEntityIdentifier=Object.create(Identifier);
					//assignment of Identifier
					associatedEntityIdentifier.use="secondary";
					associatedEntityIdentifier.type={"text":"Associated TEI"};
					associatedEntityIdentifier.system="http://hl7.org/fhir/";
					associatedEntityIdentifier.value=oTrackedEntity.trackedEntityInstance;
					listOfDiagnosticReportIdentifier.push(associatedEntityIdentifier);
					oDiagnosticReport.identifier=listOfDiagnosticReportIdentifier;
					if(effectivePeriodIsSet==true)
					{
						oDiagnosticReport.effectivePeriod=oEffectivePeriod;
					}
					//Add additional information for validation
					oDiagnosticReport.status="final";
					//By Default used Acyclovir for code
					var oConcept={};
					oConcept= Object.create(CodeableConcept);
					oConcept.text="Acyclovir";
					oConcept.code=[{"code":"1-8"}];
					oDiagnosticReport.code=oConcept;
					if (PatientSet==true)
					{
						oDiagnosticReport.subject={"reference":"Patient/"+oPatient.id};
					}
					if(listDiagnosticOrderExtracted.length>=1)
					{
						//console.log(listDiagnosticOrderExtracted);
						var listOrderAssociated=[];
						listOrderAssociated=getListEntityInstanceAssociatedDiagnosticOrders(listDiagnosticOrderExtracted,oTrackedEntity.trackedEntityInstance,'Associated TEI');
						//console.log(listDiagnosticOrderExtracted);
						//console.log("------------------");
						//console.log("------And------------");
						//console.log("Search item: "+oTrackedEntity.trackedEntityInstance);
						
						for(var i=0;i<listOrderAssociated.length;i++)
						{
							var diagnosticOrderRef={"reference":"DiagnosticOrder/"+listOrderAssociated[i].id};
							oDiagnosticReport.request.push(diagnosticOrderRef);
						}
					}
					else
					{
						oDiagnosticReport.request=null;
					}
					if(listSpecimenExtracted.length>=1)
					{
						//console.log(listSpecimenExtracted);
						var listSpecimenAssociated=[];
						listSpecimenAssociated=getListEntityInstanceAssociatedSpecimens(listSpecimenExtracted,oTrackedEntity.trackedEntityInstance,'Associated TEI');
						for(var i=0;i<listSpecimenAssociated.length;i++)
						{
							var specimenRef={"reference":"Specimen/"+listSpecimenAssociated[i].id};
							oDiagnosticReport.specimen.push(specimenRef);
						}
						
					}
					else
					{
						oDiagnosticReport.specimen=null;
					}
					var createdDate=getOldDate(listOfDateCreatedAttribute);
					if(listObservationExtracted.length>=1)
					{
						var listObservationAssociated=[];
						listObservationAssociated=getListEntityInstanceAssociatedObservation(listObservationExtracted,oTrackedEntity.trackedEntityInstance,'Associated TEI');
						for(var i=0;i<listObservationAssociated.length;i++)
						{
							var observatioRef={"reference":"Observation/"+listObservationAssociated[i].id};
							oDiagnosticReport.result.push(observatioRef);
						}
						if(oDiagnosticReport.effectiveDateTime=="" && listObservationAssociated.length>0)
						{
							//get the RecenteffectiveDateTime of all observation
							var listOfEffectiveDateTime=[];
							for(var i=0;i<listObservationAssociated.length;i++)
							{
								if(listObservationAssociated[i].effectiveDateTime!="")
								{
									listOfEffectiveDateTime.push(listObservationAssociated[i].effectiveDateTime);
								}
								
							}
							if(listOfEffectiveDateTime.length>0)
							{
								var recentEffectiveDateTime=getRecentDate(listOfEffectiveDateTime);
								if(recentEffectiveDateTime!="")
								{
									oDiagnosticReport.effectiveDateTime= formatDateInZform(recentEffectiveDateTime);
									oDiagnosticReport.issued=formatDateInZform( recentEffectiveDateTime);
								}
								else
								{
									oDiagnosticReport.effectiveDateTime=formatDateInZform( createdDate);
									oDiagnosticReport.issued=formatDateInZform( createdDate);
								}
							}
							else
							{
								oDiagnosticReport.effectiveDateTime=formatDateInZform( createdDate);
								oDiagnosticReport.issued=formatDateInZform( createdDate);
							}
							
						}
						else
						{
							oDiagnosticReport.effectiveDateTime=formatDateInZform( createdDate);
							oDiagnosticReport.issued=formatDateInZform( createdDate);
						}
						
					}
					else
					{
						if(oDiagnosticReport.effectiveDateTime=="")
						{
							oDiagnosticReport.effectiveDateTime=formatDateInZform(createdDate);
						}
						if(oDiagnosticReport.issued=="")
						{
							oDiagnosticReport.issued=formatDateInZform(createdDate);
						}
						oDiagnosticReport.result=null;
						
					}
					if(oDiagnosticReport.performer=="")
					{
						oDiagnosticReport.performer={"reference":"Organization/"+oTrackedEntity.orgUnit};
					}
					listDiagnosticReportExtracted.push(oDiagnosticReport);
				}
		
			}
		}//End for IteratorEntity to search for Observation
		
		
		for(var i=0;i<listPractitionerExtrated.length;i++)
		{
			listEntityObject.push(listPractitionerExtrated[i]);
		}
		for(var i=0;i<listPatientExtrated.length;i++)
		{
			listEntityObject.push(listPatientExtrated[i]);
		}
		for(var i=0;i<listSpecimenExtracted.length;i++)
		{
			listEntityObject.push(listSpecimenExtracted[i]);
		}
		for(var i=0;i<listConditionExtracted.length;i++)
		{
			listEntityObject.push(listConditionExtracted[i]);
		}
		for(var i=0;i<listDiagnosticOrderExtracted.length;i++)
		{
			listEntityObject.push(listDiagnosticOrderExtracted[i]);
		}
		for(var i=0;i<listObservationExtracted.length;i++)
		{
			listEntityObject.push(listObservationExtracted[i]);
		}
		for(var i=0;i<listDiagnosticReportExtracted.length;i++)
		{
			listEntityObject.push(listDiagnosticReportExtracted[i]);
		}
		for(var i=0;i<listResourceListExtracted.length;i++)
		{
			listEntityObject.push(listResourceListExtracted[i]);
		}
		//console.log(listSpecimenExtracted);
		//console.log("#######################################################################");
		return listEntityObject;
	}
	//Return the displayname from the value of option
	function getDisplayNameFromListOptionSet(code,listOptionSets)
	{
		var displayName="";
		for(var iterator=0;iterator<listOptionSets.length;iterator++)
		{
			if (listOptionSets[iterator].code==code)
			{
				displayName=listOptionSets[iterator].displayName;
				break;
			}
			
			
		}
		return displayName;
	}
	//Return the code from the displayedName of options
	function getCodeFromDisplayNameInListOptionSet(itemDisplayName,listOptionSets)
	{
		var code="";
		for(var iterator=0;iterator<listOptionSets.length;iterator++)
		{
			//console.log(listOptionSets[iterator].displayName.toLowerCase()+"=="+itemDisplayName.toLowerCase());
			if (listOptionSets[iterator].displayName.toLowerCase().includes(itemDisplayName.toLowerCase())==true)
			{
				code=listOptionSets[iterator].code;
				break;
			}
			
			
		}
		return code;
	}
	//Check if the attribute is an optionset (contains code=>value)
	function checkAttributeMarkedAsOptionSet(attributeId)
	{
		var itemFound=false;
		for(var iterator=0;iterator<listAttributeWithOptionSetValues.length;iterator++)
		{
			if(listAttributeWithOptionSetValues[iterator].id==attributeId)
			{
				itemFound=true;
				break;
			}
		}
		return itemFound;
	}
	//Transform the list of optionSets to Fhir resource of type Basics
	function getAssociatedFhirResourceFromOptionSets(listOptionSets)
	{
		var listBasicExtracted=[];
		for(var iteratorOptionSet=0;iteratorOptionSet<listOptionSets.length;iteratorOptionSet++)
		{
			var oBasic={};
			oBasic= Object.create(Basic);
			oBasic.resourceType="Basic";
			var  oConcept={};
			oConcept= Object.create(CodeableConcept);
			oBasic.id=listOptionSets[iteratorOptionSet].id;
			oConcept.coding=[{"code":listOptionSets[iteratorOptionSet].code}];
			oConcept.text=listOptionSets[iteratorOptionSet].displayName;
			oBasic.code=oConcept;
			listBasicExtracted.push(oBasic);
		}
		return listBasicExtracted;
	}
	//Extract Fhir resource from tracked entity, event and resolve the associated optionset
	function GetAssociatedFhirResourceFromMappingAndEventAndOptionSet(listofTrackedEntity,listOfEvents,listOptionSets)
	{
		//const entityCode=oTrackedEntity.trackedEntity;
		//console.log(getListOfPatientAttributeMapping());
		listEntityObject=[];
		var entityPatient=null;
		var entitySpecimen=null;
		var entityOrder=null;
		var listPatientExtrated=[];
		var listPractitionerExtrated=[];
		var listSpecimenExtracted=[];
		var listDiagnosticOrderExtracted=[];
		var listObservationExtracted=[];
		var listConditionExtracted=[];
		var listDiagnosticReportExtracted=[];
		var listResourceListExtracted=[];
		
		//Patient Initialization
		
		var oPatient={};
		oPatient= Object.create(Patient);
		oPatient.resourceType="Patient";
		//if(oTrackedEntity)
		
		var oName={};
		oName= Object.create(HumanName);
		oName.resourceType="HumanName";
		oName.use="official";
		//
		var oAddress={};
		oAddress= Object.create(Address);
		oAddress.resourceType="Address";
		oPatient.careProvider=[];
		oPatient.telecom=[];
		var PatientSet=false;
		var listOfIdentifier=[];
		//Populate Fhir Resources with entityTracker attribute, not events associated
		//First populate the trackerEntity
		for(var iteratorEntity=0;iteratorEntity<listofTrackedEntity.length;iteratorEntity++)
		{
			var oTrackedEntity=listofTrackedEntity[iteratorEntity];
			//oPatient.id=oTrackedEntity.trackedEntityInstance;
			//oPatient.meta={"lastUpdated": formatDateInZform(oTrackedEntity.lastUpdated)};
			oPatient.managingOrganization={"reference":"Organization/"+oTrackedEntity.orgUnit}
			oPatient.active=true;
			
			for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
			{
				var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName.trim();
				var inTheList=false;
				//inTheList=checkAttributeInList
				var itemListAttributesMapping=[];
				itemListAttributesMapping=getListOfPatientAttributeMapping();
				inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
				if(inTheList==true)
				{
					var identifierListAttributes=patientAttributesMapping.identifier.split(",");
					//console.log(identifierListAttributes);
					//console.log("----------------------------------------------");
					var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
					if(resCheck==true)
					{
						var orgIdentifier={};
						oIdentifier=Object.create(Identifier);
						//assignment of Identifier
						oIdentifier.use="official";
						oIdentifier.type={"text":""+oAttribute};
						oIdentifier.system="http://hl7.org/fhir/";
						oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
						listOfIdentifier.push(oIdentifier);
						PatientSet=true;
						continue;
					}
					
					switch(oAttribute)
					{
						case patientAttributesMapping.id:
							if(formatPatientId==true)
							{
								oPatient.id=oTrackedEntity.attributes[iteratorAttribute].value.trim()+"-";
							}
							else if (formatPatientId==false)
							{
								oPatient.id=oTrackedEntity.attributes[iteratorAttribute].value.trim();
							}
							
							var orgIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":""+oAttribute};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value.trim();
							listOfIdentifier.push(oIdentifier);
							PatientSet=true;
							break;
						case patientAttributesMapping.name_family:
							oName.family=oTrackedEntity.attributes[iteratorAttribute].value;
							oName.text+=oTrackedEntity.attributes[iteratorAttribute].value+" ";
							PatientSet=true;
						break;
						case patientAttributesMapping.name_given:
							oName.given=oTrackedEntity.attributes[iteratorAttribute].value;
							oName.text+=oTrackedEntity.attributes[iteratorAttribute].value+" ";
							PatientSet=true;
						break;
						case patientAttributesMapping.telecom_phone:
							var oContact={};
							oContact= Object.create(ContactPoint);
							oContact.resourceType="ContactPoint";
							oContact.system="phone";
							oContact.value=oTrackedEntity.attributes[iteratorAttribute].value;
							oContact.use="home";
							oContact.rank="1";
							oPatient.telecom.push(oContact);
							PatientSet=true;
						break;
						case patientAttributesMapping.telecom_email:
							var oContact={};
							oContact= Object.create(ContactPoint);
							oContact.resourceType="ContactPoint";
							oContact.system="email";
							oContact.value=oTrackedEntity.attributes[iteratorAttribute].value;
							oContact.use="home";
							oContact.rank="2";
							oPatient.telecom.push(oContact);
							PatientSet=true;
						break;
						case patientAttributesMapping.gender:
							if(getAssociatedGenderValueSet(oTrackedEntity.attributes[iteratorAttribute].value)!="")
							{
								oPatient.gender=getAssociatedGenderValueSet(oTrackedEntity.attributes[iteratorAttribute].value);
							}
							PatientSet=true;
						break;
						case patientAttributesMapping.birthDate:
							if(oTrackedEntity.attributes[iteratorAttribute].value!="" && oTrackedEntity.attributes[iteratorAttribute].value.includes("-")==false)
							{
								var currentYear=new Date().getFullYear();
								var ageOfPatient=parseInt(oTrackedEntity.attributes[iteratorAttribute].value);
								var yearOfBirth=currentYear-ageOfPatient;
								//console.log(yearOfBirth);
								var dateOfBirth=""+yearOfBirth+"-01-01";
								oPatient.birthDate=dateOfBirth;
								PatientSet=true;
								//console.log(new Date().getFullYear()-patientAttributesMapping.birthDate);
							}
							else if(oTrackedEntity.attributes[iteratorAttribute].value!="" && oTrackedEntity.attributes[iteratorAttribute].value.includes("-")==true)
							{
								//console.log(oTrackedEntity.attributes[iteratorAttribute].value);
								oPatient.birthDate=oTrackedEntity.attributes[iteratorAttribute].value;
								PatientSet=true;
							}
							
						case patientAttributesMapping.deceasedBoolean:
							var displayNameOption=getDisplayNameFromListOptionSet(oTrackedEntity.attributes[iteratorAttribute].value,listOptionSets);
							var res=getAssociatedVitalStatusValueSet(displayNameOption);
							oPatient.deceasedBoolean=res;
							PatientSet=true;
							//oTrackedEntity.attributes[i].value;
						break;
						case patientAttributesMapping.address_text:
							oAddress.text=oTrackedEntity.attributes[iteratorAttribute].value;
							//oPatient.address=[oAddress];
							PatientSet=true;
						break;
						case patientAttributesMapping.address_city:
							oAddress.city=oTrackedEntity.attributes[iteratorAttribute].value;
							//oPatient.address=[oAddress];
							PatientSet=true;
						break;
						case patientAttributesMapping.deceasedDateTime:
							if(oTrackedEntity.attributes[iteratorAttribute].value!="")
							{
								oPatient.deceasedDateTime=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
							}
						break;
						
					}
			
				}
				
			}
			break;
		}//fin for iterator entity
		//Special loop for adding extra patient attribute from event
		for(var iteratorEvent=0;iteratorEvent<listOfEvents.length;iteratorEvent++)
		{
			var oEvent=listOfEvents[iteratorEvent];
			for(var iteratorDataValues=0;iteratorDataValues<oEvent.dataValues.length;iteratorDataValues++)
			{
				var oAttribute=oEvent.dataValues[iteratorDataValues].displayName.trim();
				var inTheList=false;
				inTheList=false;
				itemListAttributesMapping=[];
				itemListAttributesMapping=getListOfPatientAttributeMapping();
				if(inTheList==true)
				{
					switch(oAttribute)
					{
						case patientAttributesMapping.telecom_phone:
							var oContact={};
							oContact= Object.create(ContactPoint);
							oContact.resourceType="ContactPoint";
							oContact.system="phone";
							oContact.value=oEvent.dataValues[iteratorDataValues].value;
							oContact.use="home";
							oContact.rank="1";
							oPatient.telecom.push(oContact);
							PatientSet=true;;
						break;
						case patientAttributesMapping.telecom_email:
							var oContact={};
							oContact= Object.create(ContactPoint);
							oContact.resourceType="ContactPoint";
							oContact.system="email";
							oContact.value=oEvent.dataValues[iteratorDataValues].value;
							oContact.use="home";
							oContact.rank="2";
							oPatient.telecom.push(oContact);
							PatientSet=true;
						break;
						case patientAttributesMapping.gender:
							if(getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value)!="")
							{
								oPatient.gender=getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value);
							}
							PatientSet=true;
						break;
						case patientAttributesMapping.deceasedBoolean:
							var displayNameOption=getDisplayNameFromListOptionSet(oEvent.dataValues[iteratorDataValues].value,listOptionSets);
							var res=getAssociatedVitalStatusValueSet(displayNameOption);
							oPatient.deceasedBoolean=res;
							//oPatient.deceasedDateTime=formatDateInZform(oEvent.eventDate);
							PatientSet=true;
							//oTrackedEntity.attributes[i].value;
						break;
						case patientAttributesMapping.deceasedDateTime:
							if(oEvent.dataValues[iteratorDataValues].value!="")
							{
								oPatient.deceasedDateTime=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							}
						break;
						case patientAttributesMapping.address_text:
							oAddress.text=oEvent.dataValues[iteratorDataValues].value;
							//oPatient.address=[oAddress];
							PatientSet=true;
						break;
						case patientAttributesMapping.address_city:
							oAddress.city=oEvent.dataValues[iteratorDataValues].value;
							//oPatient.address=[oAddress];
							PatientSet=true;
						break;
					}//end Switch
				}//end if inTheList
				
			}//End for iteratorDataValues
		}//End for iteratorEvent
		
		if(PatientSet==true)
		{
			oPatient.name=[oName];
			var instanceIdentifier={};
			instanceIdentifier=Object.create(Identifier);
			//assignment of Identifier
			instanceIdentifier.use="official";
			instanceIdentifier.type={"text":"Tracker identifier"};
			instanceIdentifier.system="http://hl7.org/fhir/";
			instanceIdentifier.value=oTrackedEntity.trackedEntityInstance;
			listOfIdentifier.push(instanceIdentifier);
			oPatient.identifier=listOfIdentifier;
			oPatient.address=[oAddress];
			//entityPatient=oPatient;
			listPatientExtrated.push(oPatient);
		}
		
		//Populate with Event attribute
		for(var iteratorEvent=0;iteratorEvent<listOfEvents.length;iteratorEvent++)
		{
			var oEvent=listOfEvents[iteratorEvent];
			
			//console.log(oEvent);
			//Specimen initialization
			var oSpecimen={};
			oSpecimen= Object.create(Specimen);
			oSpecimen.resourceType="Specimen";
			//oSpecimen.id=oTrackedEntity.trackedEntityInstance;
			//oSpecimen.meta={"lastUpdated": formatDateInZform(oTrackedEntity.lastUpdated)};
			oSpecimen.active=true;
			var listOfSpecimenIdentifier=[];
			var listOfTraitment=[];
			var oConceptProcedure={};
			oConceptProcedure= Object.create(CodeableConcept);
			var oConceptCollectionMethod={};
			oConceptCollectionMethod= Object.create(CodeableConcept);
			var oConceptBodySite={};
			oConceptBodySite= Object.create(CodeableConcept);
			//oConceptProcedure.
			var oTraitment={
				"description":"",
				"procedure":{}
				};
			var oCollection={};
			oCollection= Object.create(Collection);
			var oContainer={};
			oContainer= Object.create(Container);
			var specimenIsSet=false;
			var hasCollectionInfo=false;
			var hasTraitementInfo=false;
			var hasContainerInfo=false;
			
			//Condition Initialization
			var oCondition={};
			oCondition= Object.create(Condition);
			oCondition.resourceType="Condition";
			var listOfConditionIdentifier=[];
			var conditionIsSet=false;
			
			//Observation initialization
			var oObservation={};
			oObservation= Object.create(Observation);
			oObservation.resourceType="Observation";
			oObservation.performer=[];
			var listOfObservationIdentifier=[];
			var oSampledData={};
			oSampledData= Object.create(SampledData);
			var oPeriodEffective={};
			oPeriodEffective= Object.create(Period);
			var oPeriodResult={};
			oPeriodResult= Object.create(Period);
			var oValueQuantity={};
			oValueQuantity= Object.create(Quantity);
			var oOriginQuantity={};
			oOriginQuantity= Object.create(Quantity);
			var oObservationRange={};
			oObservationRange=Object.create(Range);
			var oObservationRatio={};
			oObservationRatio=Object.create(Ratio);
			var oBodySiteConcept={};
			oBodySiteConcept=Object.create(CodeableConcept);
			var oAbsentRaisonConcept={};
			oAbsentRaisonConcept=Object.create(CodeableConcept);
			var observationIsSet=false;
			var hasValueSampledDataInfo=false;
			var hasEffectivePeriodInfo=false;
			var hasValueQuantityInfo=false;
			var hasValueRangeInfo=false;
			var hasValueRatioInfo=false;
			var hasValuePeriodInfo=false;
			
			//Practitioner Initialization
			var oPractitioner={};
			oPractitioner= Object.create(Practitioner);
			oPractitioner.resourceType="Practitioner";
			var oName={};
			oName= Object.create(HumanName);
			oName.resourceType="HumanName";
			oName.use="official";
			var oAddress={};
			oAddress= Object.create(Address);
			oAddress.resourceType="Address";
			oPractitioner.telecom=[];
			oPractitioner.practitionerRole=[];
			var oPractitionerRole={};
			oPractitionerRole= Object.create(PractitionerRole);
			var practitionerSet=false;
			var listOfPractitionerIdentifier=[];
			
			var practitionerNature=getPractitionerNature(oEvent.programStageName);
			
			//console.log(oEvent.dataValues[1]);
			for(var iteratorDataValues=0;iteratorDataValues<oEvent.dataValues.length;iteratorDataValues++)
			{
				var oAttribute=oEvent.dataValues[iteratorDataValues].displayName.trim();
				var inTheList=false;
				inTheList=false;
				itemListAttributesMapping=[];
				itemListAttributesMapping=getListOfSpecimenAttributeMapping();
				//console.log(itemListAttributesMapping);
				inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
				if(inTheList==true)
				{
					//if(specimenIsSet)
					//console.log(oEvent.dataValues[iteratorDataValues].displayName+":"+oEvent.dataValues[iteratorDataValues].value);
					var identifierListAttributes=specimenAttributesMapping.identifier.split(",");
					var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
					if(resCheck==true)
					{
						var orgIdentifier={};
						oIdentifier=Object.create(Identifier);
						//assignment of Identifier
						oIdentifier.use="official";
						oIdentifier.type={"text":"Specimen Identification"};
						oIdentifier.system="http://hl7.org/fhir/";
						oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
						listOfSpecimenIdentifier.push(oIdentifier);
						specimenIsSet=true;
						continue;
					}
					switch(oAttribute)
					{
						case specimenAttributesMapping.id:
							if(formatSpecimenId==true)
							{
								oSpecimen.id=oEvent.dataValues[iteratorDataValues].value.trim()+"-";
							}
							else
							{
								oSpecimen.id=oEvent.dataValues[iteratorDataValues].value.trim();
							}
							
							var orgIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"Specimen Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							listOfSpecimenIdentifier.push(oIdentifier);
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.status:
							oSpecimen.status=oEvent.dataValues[iteratorDataValues].value;
							//oSpecimen.status="available";
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.type:
							var oConceptSpecimenType={};
							oConceptSpecimenType= Object.create(oConceptSpecimenType);
							oConceptSpecimenType.text=oEvent.dataValues[iteratorDataValues].value;
							oSpecimen.type=oConceptSpecimenType;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.accession:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							oIdentifier.use="official";
							oIdentifier.type={"text":"Lab Identification"};
							oIdentifier.system="http://hl7.org/fhir";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							oSpecimen.accession=oIdentifier;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.receivedTime:
							oSpecimen.receivedTime=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							break;
						case specimenAttributesMapping.collector:
							//oCollection.collector=oEvent.dataValues[iteratorDataValues].value;
							//specimenIsSet=true;
							break;
						case specimenAttributesMapping.collection_comment:
							oCollection.comment=oEvent.dataValues[iteratorDataValues].value;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.collectedDateTime:
							oCollection.collectedDateTime=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							hasCollectionInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.collection_quantity_unit:
							oCollection.quantity.unit=oEvent.dataValues[iteratorDataValues].value;
							hasCollectionInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.collection_quantity_value:
							oCollection.quantity.value=oEvent.dataValues[iteratorDataValues].value;
							hasCollectionInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.collection_method:
							oConceptCollectionMethod.text=oEvent.dataValues[iteratorDataValues].value;
							oCollection.method=oConceptCollectionMethod;
							hasCollectionInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.collection_bodySite:
							oConceptBodySite.text=oEvent.dataValues[iteratorDataValues].value;
							oCollection.bodySite=oConceptBodySite;
							hasCollectionInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.container_capacity_unit:
							oContainer.capacity.unit=oEvent.dataValues[iteratorDataValues].value;
							hasContainerInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.container_capacity_value:
							oContainer.capacity.value=oEvent.dataValues[iteratorDataValues].value;
							hasContainerInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.container_description:
							oContainer.description=oEvent.dataValues[iteratorDataValues].value;
							hasContainerInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.traitment_description:
							oTraitment.description=oEvent.dataValues[iteratorDataValues].value;
							hasTraitementInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.traitment_procedure:
							oConceptProcedure.text=oEvent.dataValues[iteratorDataValues].value;
							oTraitment.procedure=oConceptProcedure;
							hasTraitementInfo=true;
							specimenIsSet=true;
							break;
						case specimenAttributesMapping.container_identifier:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"Container Identification"};
							oIdentifier.system="http://hl7.org/fhir";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							oContainer.Identifier=[oIdentifier];
							specimenIsSet=true;
							break;
					}
					
				}
				
				inTheList=false;
				itemListAttributesMapping=[];
				itemListAttributesMapping=getListOfConditionAttributeMapping();
				inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
				if(inTheList==true)
				{
					switch(oAttribute)
					{
						case conditionAttributesMapping.identifier:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"Condition Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							listOfConditionIdentifier.push(oIdentifier);
							conditionIsSet=true;
							break;
						case conditionAttributesMapping.patient:
							//oCondition.patient={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
							//conditionIsSet=true;
							break;
						case conditionAttributesMapping.encounter:
							//oCondition.encounter={"reference":"Encounter/"+oEvent.dataValues[iteratorDataValues].value};
							//conditionIsSet=true;
							break;
						case conditionAttributesMapping.dateRecorded:
							//oCondition.dateRecorded=extractDateFromDateTime(oEvent.dataValues[iteratorDataValues].value);
							//conditionIsSet=true;
							break;
						case conditionAttributesMapping.code:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oCondition.code=oConcept;
							conditionIsSet=true;
							break;
						case conditionAttributesMapping.category:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oCondition.category=oConcept;
							conditionIsSet=true;
							break;
						case conditionAttributesMapping.clinicalStatus:
							oCondition.clinicalStatus=oEvent.dataValues[iteratorDataValues].value;
							//active
							conditionIsSet=true;
							break;
						case conditionAttributesMapping.verificationStatus:
							oCondition.verificationStatus=oEvent.dataValues[iteratorDataValues].value;
							//provisional
							conditionIsSet=true;
							break;
						case conditionAttributesMapping.severity:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oCondition.severity=oConcept;
							//provisional
							conditionIsSet=true;
							break;
						case conditionAttributesMapping.onsetDateTime:
							oCondition.onsetDateTime=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							conditionIsSet=true;
							break;
					}//End of switch
					
				}
				
				inTheList=false;
				itemListAttributesMapping=[];
				itemListAttributesMapping=getListOfObservationAttributeMapping();
				inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
				if(inTheList==true)
				{
					/*
					var identifierListAttributes=observationAttributesMapping.performer.split(",");
					var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
					if(resCheck==true)
					{
						var oPerformerRef={"reference":"Organization/"+oEvent.dataValues[iteratorDataValues].value}
						oObservation.performer.push(oPerformerRef);
						observationIsSet=true;
						continue;
					}*/
					switch(oAttribute)
					{
						case observationAttributesMapping.identifier:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"Observation Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							listOfObservationIdentifier.push(oIdentifier);
							observationIsSet=true;
							break;
						case observationAttributesMapping.status:
							oObservation.status=oEvent.dataValues[iteratorDataValues].value;
							observationIsSet=true;
							break;
						case observationAttributesMapping.category:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oObservation.category=oConcept;
							observationIsSet=true;
							break;
						case observationAttributesMapping.code:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oObservation.code=oConcept;
							observationIsSet=true;
							break;
						case observationAttributesMapping.subject:
							//oObservation.subject={"reference":"Patient/"+oEvent.dataValues[iteratorDataValues].value};
							//observationIsSet=true;
							break;
						case observationAttributesMapping.encounter:
							//oObservation.encounter={"reference":"Encounter/"+oEvent.dataValues[iteratorDataValues].value};
							//observationIsSet=true;
							break;
						case observationAttributesMapping.effectiveDateTime:
							//console.log(oEvent.dataValues[iteratorDataValues]);
							oObservation.effectiveDateTime=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							observationIsSet=true;
							break;
						case observationAttributesMapping.effectivePeriod_dateSup:
							oPeriodEffective.end= formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							hasEffectivePeriodInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.effectivePeriod_dateInf:
							oPeriodEffective.start=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							hasEffectivePeriodInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.issued:
							oObservation.issued=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueQuantity_unit:
							oValueQuantity.unit=oEvent.dataValues[iteratorDataValues].value;
							hasValueQuantityInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueQuantity_value:
							oValueQuantity.value=oEvent.dataValues[iteratorDataValues].value;
							hasValueQuantityInfo=true;
							break;
						case observationAttributesMapping.valueCodeableConcept:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oObservation.valueCodeableConcept=oConcept;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueString:
							oObservation.valueString=oEvent.dataValues[iteratorDataValues].value;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueRange_sup:
							var rangeQuantity=Object.create(Quantity);
							rangeQuantity.value=oEvent.dataValues[iteratorDataValues].value;
							oObservationRange.high=rangeQuantity;
							hasValueRangeInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueRange_Inf:
							var rangeQuantity=Object.create(Quantity);
							rangeQuantity.value=oEvent.dataValues[iteratorDataValues].value;
							oObservationRange.low=rangeQuantity;
							hasValueRangeInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueRatio_num:
							oObservationRatio.numerator=oEvent.dataValues[iteratorDataValues].value;
							hasValueRatioInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueRatio_denom:
							oObservationRatio.denominator=oEvent.dataValues[iteratorDataValues].value;
							hasValueRatioInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueSampledData_origin:
							oOriginQuantity.value=oEvent.dataValues[iteratorDataValues].value;
							break;
						case observationAttributesMapping.valueSampledData_period:
							oSampledData.period=oEvent.dataValues[iteratorDataValues].value;
							hasValueSampledDataInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueSampledData_factor:
							oSampledData.factor=oEvent.dataValues[iteratorDataValues].value;
							hasValueSampledDataInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueSampledData_lowerLimit:
							oSampledData.lowerLimit=oEvent.dataValues[iteratorDataValues].value;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueSampledData_upperLimit:
							oSampledData.upperLimit=oEvent.dataValues[iteratorDataValues].value;
							hasValueSampledDataInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueSampledData_dimensions:
							oSampledData.dimensions=oEvent.dataValues[iteratorDataValues].value;
							 hasValueSampledDataInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueSampledData_data:
							oSampledData.data=oEvent.dataValues[iteratorDataValues].value;
							hasValueSampledDataInfo=true;
							break;
						case observationAttributesMapping.valueTime:
							oObservation.valueTime=oEvent.dataValues[iteratorDataValues].value;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valueDateTime:
							oObservation.valueDateTime=oEvent.dataValues[iteratorDataValues].value;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valuePeriod_start:
							oPeriodResult.start=oEvent.dataValues[iteratorDataValues].value;
							hasValuePeriodInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.valuePeriod_end:
							oPeriodResult.end=oEvent.dataValues[iteratorDataValues].value;
							hasValuePeriodInfo=true;
							observationIsSet=true;
							break;
						case observationAttributesMapping.dataAbsentReason:
							oAbsentRaisonConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oObservation.dataAbsentReason=oAbsentRaisonConcept;
							observationIsSet=true;
							break;
						case observationAttributesMapping.interpretation:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oObservation.interpretation=oConcept;
							observationIsSet=true;
							break;
						case observationAttributesMapping.comments:
							oObservation.comments=oEvent.dataValues[iteratorDataValues].value;
							observationIsSet=true;
							break;
						case observationAttributesMapping.bodySite:
							oBodySiteConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oObservation.bodySite=oBodySiteConcept;
							observationIsSet=true;
							break;
						case observationAttributesMapping.method:
							var  oConcept={};
							oConcept= Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oObservation.method=oConcept;
							observationIsSet=true;
							break;
						case observationAttributesMapping.specimen:
							if(formatSpecimenId==true)
							{
								oObservation.specimen={"reference":"Specimen/"+oEvent.dataValues[iteratorDataValues].value+"-"};
							}
							else
							{
								oObservation.specimen={"reference":"Specimen/"+oEvent.dataValues[iteratorDataValues].value};
							}
							observationIsSet=true;
							break;
						case observationAttributesMapping.device:
							//oObservation.device={"reference":"Device/"+oEvent.dataValues[iteratorDataValues].value};
							//observationIsSet=true;
							break;
						case observationAttributesMapping.referenceRange:
							//oObservation.referenceRange=[];
							break;
						case observationAttributesMapping.related:
							//oObservation.related=[];
							break;
						case observationAttributesMapping.component:
							//oObservation.component=[];
							break;
						}
					
				}//End of inthe List Observation
				inTheList=false;
				itemListAttributesMapping=[];
				if(practitionerNature=="care_provider")
				{
					itemListAttributesMapping=getListOfPractitionerAttributeMapping();
				}
				else if (practitionerNature=="specimen_collector")
				{
					itemListAttributesMapping=getListOfPractitionerSpecimenHandlingAttributeMapping();
				}
				else if (practitionerNature=="observation_performer")
				{
					itemListAttributesMapping=getListOfPractitionerObservationPerformerAttributeMapping();
				}
				
				inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
				if(inTheList==true)
				{
					if(practitionerNature=="care_provider")
					{
						var identifierListAttributes=practitionerAttributesMapping.identifier.split(",");
						var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
						if(resCheck==true)
						{
							var orgIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":""+oAttribute};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							listOfPractitionerIdentifier.push(oIdentifier);
							practitionerSet=true;
							continue;
						}
						switch(oAttribute)
						{
							case practitionerAttributesMapping.id:
								oPractitioner.id=oEvent.dataValues[iteratorDataValues].value.trim()+"-";
								var orgIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":""+oAttribute};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oEvent.dataValues[iteratorDataValues].value.trim();
								listOfPractitionerIdentifier.push(oIdentifier);
								practitionerSet=true;
								break;
							case practitionerAttributesMapping.name_family:
								oName.family=oEvent.dataValues[iteratorDataValues].value;
								oName.text+=oEvent.dataValues[iteratorDataValues].value+" ";
								practitionerSet=true;
							break;
							case practitionerAttributesMapping.name_given:
								oName.given=oEvent.dataValues[iteratorDataValues].value;
								oName.text+=oEvent.dataValues[iteratorDataValues].value+" ";
								practitionerSet=true;;
							break;
							case practitionerAttributesMapping.telecom_phone:
								var oContact={};
								oContact= Object.create(ContactPoint);
								oContact.resourceType="ContactPoint";
								oContact.system="phone";
								oContact.value=oEvent.dataValues[iteratorDataValues].value;
								oContact.use="home";
								oContact.rank="1";
								oPractitioner.telecom.push(oContact);
								practitionerSet=true;;
							break;
							case practitionerAttributesMapping.telecom_email:
								var oContact={};
								oContact= Object.create(ContactPoint);
								oContact.resourceType="ContactPoint";
								oContact.system="email";
								oContact.value=oEvent.dataValues[iteratorDataValues].value;
								oContact.use="home";
								oContact.rank="2";
								oPractitioner.telecom.push(oContact);
								practitionerSet=true;
							break;
							case practitionerAttributesMapping.gender:
								if(getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value)!="")
								{
									oPractitioner.gender=getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value);
								}
								practitionerSet=true;
							break;
							case practitionerAttributesMapping.address:
								oAddress.text=oEvent.dataValues[iteratorDataValues].value;
								oPractitioner.address=[oAddress];
								practitionerSet=true;
							break;
							case practitionerAttributesMapping.practitionerRole_managingOrganization:
								oPractitionerRole.managingOrganization={"reference":"Organization/"+oEvent.dataValues[iteratorDataValues].value};
								practitionerSet=true;
							break;
							case practitionerAttributesMapping.practitionerRole_role:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oEvent.dataValues[iteratorDataValues].value.trim();
								oPractitionerRole.role=oConcept;
								practitionerSet=true;
							break;
						}
					
					}
					if(practitionerNature=="specimen_collector")
					{
						var identifierListAttributes=practitionerSpecimenHandlingAttributesMapping.identifier.split(",");
						var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
						if(resCheck==true)
						{
							var orgIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":""+oAttribute};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							listOfPractitionerIdentifier.push(oIdentifier);
							practitionerSet=true;
							continue;
						}
						switch(oAttribute)
						{
							case practitionerSpecimenHandlingAttributesMapping.id:
								oPractitioner.id=oEvent.dataValues[iteratorDataValues].value.trim()+"-";
								var orgIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":""+oAttribute};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oEvent.dataValues[iteratorDataValues].value.trim();
								listOfPractitionerIdentifier.push(oIdentifier);
								practitionerSet=true;
								break;
							case practitionerSpecimenHandlingAttributesMapping.name_family:
								oName.family=oEvent.dataValues[iteratorDataValues].value;
								oName.text+=oEvent.dataValues[iteratorDataValues].value+" ";
								practitionerSet=true;
							break;
							case practitionerSpecimenHandlingAttributesMapping.name_given:
								oName.given=oEvent.dataValues[iteratorDataValues].value;
								oName.text+=oEvent.dataValues[iteratorDataValues].value+" ";
								practitionerSet=true;;
							break;
							case practitionerSpecimenHandlingAttributesMapping.telecom_phone:
								var oContact={};
								oContact= Object.create(ContactPoint);
								oContact.resourceType="ContactPoint";
								oContact.system="phone";
								oContact.value=oEvent.dataValues[iteratorDataValues].value;
								oContact.use="home";
								oContact.rank="1";
								oPractitioner.telecom.push(oContact);
								practitionerSet=true;;
							break;
							case practitionerSpecimenHandlingAttributesMapping.telecom_email:
								var oContact={};
								oContact= Object.create(ContactPoint);
								oContact.resourceType="ContactPoint";
								oContact.system="email";
								oContact.value=oEvent.dataValues[iteratorDataValues].value;
								oContact.use="home";
								oContact.rank="2";
								oPractitioner.telecom.push(oContact);
								practitionerSet=true;
							break;
							case practitionerSpecimenHandlingAttributesMapping.gender:
								if(getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value)!="")
								{
									oPractitioner.gender=getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value);
								}
								practitionerSet=true;
							break;
							case practitionerSpecimenHandlingAttributesMapping.address:
								oAddress.text=oEvent.dataValues[iteratorDataValues].value;
								oPractitioner.address=[oAddress];
								practitionerSet=true;
							break;
							case practitionerSpecimenHandlingAttributesMapping.practitionerRole_managingOrganization:
								oPractitionerRole.managingOrganization={"reference":"Organization/"+oEvent.dataValues[iteratorDataValues].value};
								practitionerSet=true;
							break;
							case practitionerSpecimenHandlingAttributesMapping.practitionerRole_role:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oEvent.dataValues[iteratorDataValues].value.trim();
								oPractitionerRole.role=oConcept;
								practitionerSet=true;
							break;
						}
					
					}
					if(practitionerNature=="observation_performer")
					{
						var identifierListAttributes=practitionerObservationPerformerAttributesMapping.identifier.split(",");
						var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
						if(resCheck==true)
						{
							var orgIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":""+oAttribute};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							listOfPractitionerIdentifier.push(oIdentifier);
							practitionerSet=true;
							continue;
						}
						switch(oAttribute)
						{
							case practitionerObservationPerformerAttributesMapping.id:
								oPractitioner.id=oEvent.dataValues[iteratorDataValues].value.trim()+"-";
								var orgIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":""+oAttribute};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oEvent.dataValues[iteratorDataValues].value.trim();
								listOfPractitionerIdentifier.push(oIdentifier);
								practitionerSet=true;
								break;
							case practitionerObservationPerformerAttributesMapping.name_family:
								oName.family=oEvent.dataValues[iteratorDataValues].value;
								oName.text+=oEvent.dataValues[iteratorDataValues].value+" ";
								practitionerSet=true;
							break;
							case practitionerObservationPerformerAttributesMapping.name_given:
								oName.given=oEvent.dataValues[iteratorDataValues].value;
								oName.text+=oEvent.dataValues[iteratorDataValues].value+" ";
								practitionerSet=true;;
							break;
							case practitionerObservationPerformerAttributesMapping.telecom_phone:
								var oContact={};
								oContact= Object.create(ContactPoint);
								oContact.resourceType="ContactPoint";
								oContact.system="phone";
								oContact.value=oEvent.dataValues[iteratorDataValues].value;
								oContact.use="home";
								oContact.rank="1";
								oPractitioner.telecom.push(oContact);
								practitionerSet=true;;
							break;
							case practitionerObservationPerformerAttributesMapping.telecom_email:
								var oContact={};
								oContact= Object.create(ContactPoint);
								oContact.resourceType="ContactPoint";
								oContact.system="email";
								oContact.value=oEvent.dataValues[iteratorDataValues].value;
								oContact.use="home";
								oContact.rank="2";
								oPractitioner.telecom.push(oContact);
								practitionerSet=true;
							break;
							case practitionerObservationPerformerAttributesMapping.gender:
								if(getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value)!="")
								{
									oPractitioner.gender=getAssociatedGenderValueSet(oEvent.dataValues[iteratorDataValues].value);
								}
								practitionerSet=true;
							break;
							case practitionerObservationPerformerAttributesMapping.address:
								oAddress.text=oEvent.dataValues[iteratorDataValues].value;
								oPractitioner.address=[oAddress];
								practitionerSet=true;
							break;
							case practitionerObservationPerformerAttributesMapping.practitionerRole_managingOrganization:
								oPractitionerRole.managingOrganization={"reference":"Organization/"+oEvent.dataValues[iteratorDataValues].value};
								practitionerSet=true;
							break;
							case practitionerObservationPerformerAttributesMapping.practitionerRole_role:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oEvent.dataValues[iteratorDataValues].value.trim();
								oPractitionerRole.role=oConcept;
								practitionerSet=true;
							break;
						}
					
					}
					
				}//End If inTheList PractitionerAttributeMapping
				
				
			}//End for iteratorDataValues
			if(practitionerSet==true)
			{
				if(oPractitioner.id=="")
				{
					oPractitioner.id=oEvent.id;
					if(listOfPractitionerIdentifier.length==0)
					{
						var orgIdentifier={};
						oIdentifier=Object.create(Identifier);
						//assignment of Identifier
						oIdentifier.use="official";
						oIdentifier.type={"text":"Practitioner Identifier"};
						oIdentifier.system="http://hl7.org/fhir/";
						oIdentifier.value=oEvent.id;
						listOfPractitionerIdentifier.push(oIdentifier);
					}
				}
				if(oPractitionerRole.managingOrganization=="")
				{
					oPractitionerRole.managingOrganization=oPatient.managingOrganization;
				}
				/*
				if(oPractitionerRole.managingOrganization!="" || oPractitionerRole.role!="")
				{
					oPractitioner.practitionerRole.push(oPractitionerRole);
				}*/
				oPractitioner.practitionerRole.push(oPractitionerRole);
				oPractitioner.name=[oName];
				oPractitioner.identifier=listOfPractitionerIdentifier;
				//console.log(oSpecimen);
				if(practitionerNature=="care_provider")
				{
					var oRef= {"reference":"Practitioner/"+oPractitioner.id};
					oPatient.careProvider.push(oRef);
				}
				listPractitionerExtrated.push(oPractitioner);
				for(var iteratorDataValues=0;iteratorDataValues<oEvent.dataValues.length;iteratorDataValues++)
				{
					var oAttribute=oEvent.dataValues[iteratorDataValues].displayName.trim();
					var inTheRefList=false;
					itemRefListAttributesMapping=[];
					itemRefListAttributesMapping=practitionerAttributesMapping.list_reference.split(",");
					//console.log(oAttribute);
					inTheRefList=checkAttributeInList(itemRefListAttributesMapping,oAttribute);
					if(inTheRefList==true)
					{
						//List initialization;
						var oList= Object.create(List);
						oList.resourceType="List";
						oList.entry=[];
						var listIsSet=false;
						var listResourceIdentifier=[];
						oList.id=oPractitioner.id+""+oEvent.dataValues[iteratorDataValues].dataElementId;
						oList.status="current";
						oList.mode="working";
						oList.title=oAttribute;
						oList.note=oEvent.dataValues[iteratorDataValues].value.trim();
						oList.entry.push({"deleted":false,"item":{"reference":"Practitioner/"+oPractitioner.id}});
						listResourceListExtracted.push(oList);
					}
				}
				
			}
			
			if(specimenIsSet==true)
			{
				//console.log(oSpecimen);
				if(getIndexOfFhirResourceById(listSpecimenExtracted,oSpecimen.id)==-1 && oSpecimen.id!="")
				{
					var associatedEntityIdentifier={};
					associatedEntityIdentifier=Object.create(Identifier);
					//assignment of Identifier
					associatedEntityIdentifier.use="secondary";
					associatedEntityIdentifier.type={"text":"Associated TEI"};
					associatedEntityIdentifier.system="http://hl7.org/fhir/";
					associatedEntityIdentifier.value=oEvent.trackedEntityInstance;
					listOfSpecimenIdentifier.push(associatedEntityIdentifier);
					oSpecimen.identifier=listOfSpecimenIdentifier;
					/*
					if(listOfSpecimenIdentifier.length)
					{
						oSpecimen.id=listOfSpecimenIdentifier[0].value;
					}*/
					if(hasCollectionInfo==true)
					{
						oSpecimen.collection=oCollection;
					}
					if(hasTraitementInfo==true)
					{
						oSpecimen.treatment=[oTraitment];
					}
					if(hasContainerInfo==true)
					{
						oSpecimen.Container=[oContainer];
					}
					if (PatientSet==true)
					{
						oSpecimen.subject={"reference":"Patient/"+oPatient.id};
					}
					//entitySpecimen=oSpecimen;
					
					//listEntityObject.push(entitySpecimen);
					if(practitionerSet==true)
					{
						if(practitionerNature=="specimen_collector")
						{
							oSpecimen.collection.collector={"reference":"Practitioner/"+oPractitioner.id};
						}
					}
					listSpecimenExtracted.push(oSpecimen);
					//Then check if there is refence list Elements 
					for(var iteratorDataValues=0;iteratorDataValues<oEvent.dataValues.length;iteratorDataValues++)
					{
						var oAttribute=oEvent.dataValues[iteratorDataValues].displayName.trim();
						var inTheRefList=false;
						itemRefListAttributesMapping=[];
						itemRefListAttributesMapping=specimenAttributesMapping.list_reference.split(",");
						inTheRefList=checkAttributeInList(itemRefListAttributesMapping,oAttribute);
						if(inTheRefList==true)
						{
							//List initialization;
							var oList= Object.create(List);
							oList.resourceType="List";
							oList.entry=[];
							var listIsSet=false;
							var listResourceIdentifier=[];
							oList.id=oSpecimen.id+""+oEvent.dataValues[iteratorDataValues].dataElementId;
							oList.status="current";
							oList.mode="working";
							oList.title=oAttribute;
							oList.note=oEvent.dataValues[iteratorDataValues].value.trim();
							oList.entry.push({"deleted":false,"item":{"reference":"Specimen/"+oSpecimen.id}});
							listResourceListExtracted.push(oList);
							
						}
						
					}
					
				}
				
				//console.log(oSpecimen);
				
				
			}//End if specimenIsSet
			if(observationIsSet==true)
			{
				//console.log(oSpecimen);
				if(oObservation.code!="")
				{
					oObservation.id=oEvent.id;
					oSampledData.origin=oOriginQuantity;
					//oObservation.identifier=listOfObservationIdentifier;
					if(hasValueSampledDataInfo==true)
					{
						oObservation.valueSampledData=oSampledData;
					}
					if(hasEffectivePeriodInfo==true)
					{
						oObservation.effectivePeriod=oPeriodEffective;
					}
					if(hasValueQuantityInfo==true)
					{
						oObservation.valueQuantity=oValueQuantity;
					}
					if(hasValueRangeInfo==true)
					{
						oObservation.valueRange=oObservationRange;
					}
					//checkIfAsProperties(oObservationRange);
					if(hasValueRatioInfo==true)
					{
						oObservation.valueRatio=oObservationRatio;
					}
					if(hasValuePeriodInfo==true)
					{
						oObservation.valuePeriod=oPeriodResult;
					}
					
					//
					var associatedEntityIdentifier={};
					associatedEntityIdentifier=Object.create(Identifier);
					//assignment of Identifier
					associatedEntityIdentifier.use="secondary";
					associatedEntityIdentifier.type={"text":"Associated TEI"};
					associatedEntityIdentifier.system="http://hl7.org/fhir/";
					associatedEntityIdentifier.value=oEvent.trackedEntityInstance;
					listOfObservationIdentifier.push(associatedEntityIdentifier);
					oObservation.identifier=listOfObservationIdentifier;
					//Add additional information for validation
					
					if(oObservation.interpretation=="")
					{
						oObservation.status="registered";
					}
					else
					{
						oObservation.status="final";
					}
					
					//By Default used Microscopy observation as code
					if(oObservation.code=="")
					{
						var oConcept={};
						oConcept= Object.create(CodeableConcept);
						oConcept.text="Microscopic Observation";
						oConcept.code=[{"code":"10355-6"}];
						oObservation.code=oConcept;
					}
					if (PatientSet==true)
					{
						oObservation.subject={"reference":"Patient/"+oPatient.id};
					}
					if (specimenIsSet==true && oSpecimen.id!="")
					{
						//console.log("Observation specimen setted :"+oSpecimen.id);
						oObservation.specimen={"reference":"Specimen/"+oSpecimen.id};
					}
					//Check if there is not performer info to add orgUnit
					if(oObservation.performer.length==0)
					{
						if(practitionerSet==true && practitionerNature=="observation_performer")
						{
							var oPerformerRef={"reference":"Practitioner/"+oPractitioner.id};
							oObservation.performer.push(oPerformerRef);
						}
						else
						{
							var oPerformerRef={"reference":"Organization/"+oEvent.orgUnit};
							oObservation.performer.push(oPerformerRef);
						}
						
					}
					listObservationExtracted.push(oObservation);
				}
				
				
			}
			if(conditionIsSet==true)
			{
				oCondition.id=oEvent.id;
					//
				var associatedEntityIdentifier={};
				associatedEntityIdentifier=Object.create(Identifier);
				//assignment of Identifier
				associatedEntityIdentifier.use="secondary";
				associatedEntityIdentifier.type={"text":"Associated TEI"};
				associatedEntityIdentifier.system="http://hl7.org/fhir/";
				associatedEntityIdentifier.value=oEvent.trackedEntityInstance;
				listOfConditionIdentifier.push(associatedEntityIdentifier);
				oCondition.identifier=listOfObservationIdentifier;
				//Add additional information for validation
				if(oCondition.dateRecorded=="")
				{
					oCondition.dateRecorded=extractDateFromDateTime(oTrackedEntity.created);
				}
				if(oCondition.clinicalStatus=="")
				{
					oCondition.clinicalStatus="active";
				}
				if(oCondition.onsetDateTime=="")
				{
					oCondition.onsetDateTime=formatDateInZform(oTrackedEntity.created);
				}
				if(oCondition.verificationStatus=="")
				{
					oCondition.verificationStatus="provisional";
				}
				if (PatientSet==true)
				{
					oCondition.patient={"reference":"Patient/"+oPatient.id};
				}
				listConditionExtracted.push(oCondition);
			}
			
		}//end iteratorEvent
		//console.log(listDiagnosticOrderExtracted);
		//Special loop for DiagnosticReport
		//console.log(listSpecimenExtracted);
		for(var iteratorEvent=0;iteratorEvent<listOfEvents.length;iteratorEvent++)
		{
			//DiagnosticReport initialization
			var oEvent=listOfEvents[iteratorEvent];
			var oDiagnosticReport={};
			oDiagnosticReport= Object.create(DiagnosticReport);
			oDiagnosticReport.resourceType="DiagnosticReport";
			var listOfDiagnosticReportIdentifier=[];
			var oEffectivePeriod={};
			oEffectivePeriod= Object.create(Period);
			oDiagnosticReport.request=[];
			oDiagnosticReport.specimen=[];
			oDiagnosticReport.result=[];
			var diagnosticReportIsSet=false;
			for(var iteratorDataValues=0;iteratorDataValues<oEvent.dataValues.length;iteratorDataValues++)
			{
				var oAttribute=oEvent.dataValues[iteratorDataValues].displayName.trim();
				var inTheList=false;
				inTheList=false;
				itemListAttributesMapping=[];
				itemListAttributesMapping=getListOfDiagnosticReportAttributeMapping();
				inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
				if(inTheList==true)
				{
					switch(oAttribute)
					{
						case diagnosticReportAttributesMapping.identifier:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"DiagnosticReport Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oEvent.dataValues[iteratorDataValues].value;
							listOfDiagnosticReportIdentifier.push(oIdentifier);
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.status:
							oDiagnosticReport.status=oEvent.dataValues[iteratorDataValues].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.category:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oDiagnosticReport.category=oConcept;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.code:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oDiagnosticReport.code=oConcept;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.subject:
							//oDiagnosticReport.subject={"reference":"Patient/"+oEvent.dataValues[iteratorDataValues].value};
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.encounter:
							//oDiagnosticReport.encounter={"reference":"Encounter/"+oEvent.dataValues[iteratorDataValues].value};
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectiveDateTime:
							//oDiagnosticReport.effectiveDateTime=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectivePeriod_start:
							oEffectivePeriod.start=oEvent.dataValues[iteratorDataValues].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectivePeriod_end:
							oEffectivePeriod.end=oEvent.dataValues[iteratorDataValues].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.issued:
							//oDiagnosticReport.issued=formatDateInZform(oEvent.dataValues[iteratorDataValues].value);
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.performer:
							//oDiagnosticReport.performer={"reference":"Organization/"+oEvent.dataValues[iteratorDataValues].value};
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.request:
							//oDiagnosticReport.request=[{"reference":"DiagnosticOrder/"+oEvent.dataValues[iteratorDataValues].value}];
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.specimen:
							//oDiagnosticReport.specimen=[{"reference":"Specimen/"+oEvent.dataValues[iteratorDataValues].value}];
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.result:
							//oDiagnosticReport.result=[{"reference":"Observation/"+oEvent.dataValues[iteratorDataValues].value}];
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.imagingStudy:
							oDiagnosticReport.imagingStudy=[];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.image:
							oDiagnosticReport.image=[];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.conclusion:
							oDiagnosticReport.conclusion=oEvent.dataValues[iteratorDataValues].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.codedDiagnosis:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oEvent.dataValues[iteratorDataValues].value;
							oDiagnosticReport.codedDiagnosis=[oConcept];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.presentedForm:
							oDiagnosticReport.presentedForm=[];
							diagnosticReportIsSet=true;
							break;
					}
				
				}
				
			}//End for iteratorDataValues
			if(diagnosticReportIsSet==true)
			{
				oDiagnosticReport.id=oEvent.id;
				var associatedEntityIdentifier={};
				associatedEntityIdentifier=Object.create(Identifier);
				//assignment of Identifier
				associatedEntityIdentifier.use="secondary";
				associatedEntityIdentifier.type={"text":"Associated TEI"};
				associatedEntityIdentifier.system="http://hl7.org/fhir/";
				associatedEntityIdentifier.value=oEvent.trackedEntityInstance;
				listOfDiagnosticReportIdentifier.push(associatedEntityIdentifier);
				oDiagnosticReport.identifier=listOfDiagnosticReportIdentifier;
				oDiagnosticReport.effectivePeriod=oEffectivePeriod;
				//Add additional information for validation
				oDiagnosticReport.status="final";
				//By Default used Acyclovir for code
				var oConcept={};
				oConcept= Object.create(CodeableConcept);
				oConcept.text="Acyclovir";
				oConcept.code=[{"code":"1-8"}];
				oDiagnosticReport.code=oConcept;
				if (PatientSet==true)
				{
					oDiagnosticReport.subject={"reference":"Patient/"+oPatient.id};
				}
				if(listDiagnosticOrderExtracted.length>=1)
				{
					//console.log(listDiagnosticOrderExtracted);
					var listOrderAssociated=[];
					listOrderAssociated=getListEntityInstanceAssociatedDiagnosticOrders(listDiagnosticOrderExtracted,oEvent.trackedEntityInstance,'Associated TEI');
					//console.log(listOrderAssociated);
					//console.log("------------------");
					for(var i=0;i<listOrderAssociated.length;i++)
					{
						var diagnosticOrderRef={"reference":"DiagnosticOrder/"+listOrderAssociated[i].id};
						oDiagnosticReport.request.push(diagnosticOrderRef);
					}
				}
				else
				{
					oDiagnosticReport.request=null;
				}
				if(listSpecimenExtracted.length>=1)
				{
					//console.log(listSpecimenExtracted);
					var listSpecimenAssociated=[];
					listSpecimenAssociated=getListEntityInstanceAssociatedSpecimens(listSpecimenExtracted,oEvent.trackedEntityInstance,'Associated TEI');
					for(var i=0;i<listSpecimenAssociated.length;i++)
					{
						var specimenRef={"reference":"Specimen/"+listSpecimenAssociated[i].id};
						oDiagnosticReport.specimen.push(specimenRef);
					}
					
				}
				else
				{
					oDiagnosticReport.specimen=null;
				}
				if(listObservationExtracted.length>=1)
				{
					var listObservationAssociated=[];
					listObservationAssociated=getListEntityInstanceAssociatedDiagnosticOrders(listObservationAssociated,oEvent.trackedEntityInstance,'Associated TEI');
					for(var i=0;i<listObservationAssociated.length;i++)
					{
						var observatioRef={"reference":"Observation/"+listObservationAssociated[i].id};
						oDiagnosticReport.result.push(observatioRef);
					}
					//Add the effectiveDateTime information if not yet setted
					if(oDiagnosticReport.effectiveDateTime=="")
					{
						//get the RecenteffectiveDateTime of all observation
						var listOfEffectiveDateTime=[];
						for(var i=0;i<listObservationAssociated.length;i++)
						{
							listOfEffectiveDateTime.push(listObservationAssociated[i].effectiveDateTime);
						}
						var recentEffectiveDateTime=getRecentDate(listOfEffectiveDateTime);
						console.log("recent effectivetime :"+recentEffectiveDateTime);
						oDiagnosticReport.effectiveDateTime=formatDateInZform(recentEffectiveDateTime);
						oDiagnosticReport.issued= formatDateInZform(recentEffectiveDateTime);
					}
				}
				else
				{
					oDiagnosticReport.effectiveDateTime=formatDateInZform(oEvent.eventDate);
					oDiagnosticReport.result=null;
					
				}
				if(oDiagnosticReport.performer=="")
				{
					oDiagnosticReport.performer={"reference":"Organization/"+oEvent.orgUnit};
				}
				listDiagnosticReportExtracted.push(oDiagnosticReport);
			}
		
			
		}//End iteratorEvents
		
		//Then populate others resources founded based on attribute fields
		//Populate Specimen
		for(var iteratorEntity=0;iteratorEntity<listofTrackedEntity.length;iteratorEntity++)
		{
			var oTrackedEntity=listofTrackedEntity[iteratorEntity];
			var indexIdSpecimen=-1;
			var indexIdOrder=-1;
			var indexIdObservation=-1;
			orderIsSet=false;
			observationIsSet=false;
			//Extract the data from entity attribute
			//Check for Specimen Information
			var idSpecimenToSearch=oTrackedEntity.trackedEntityInstance;
			indexIdSpecimen=getIndexOfFhirResourceByIdentification(listSpecimenExtracted,idSpecimenToSearch);
			if(indexIdSpecimen>=0)
			{
				var listOfSpecimenIdentifier=[];
				if(listSpecimenExtracted[indexIdSpecimen].identifier.length>0)
				{
					listOfSpecimenIdentifier=listSpecimenExtracted[indexIdSpecimen].identifier;
				}
				var oTraitment={
					"description":"",
					"procedure":{}
					};
				var oConceptProcedure={};
				oConceptProcedure= Object.create(CodeableConcept);
				if(listSpecimenExtracted[indexIdSpecimen].treatment.length>0)
				{
					oTraitment=listSpecimenExtracted[indexIdSpecimen].treatment[0];
				}
				var oConceptCollectionMethod={};
				oConceptCollectionMethod= Object.create(CodeableConcept);
				var oConceptBodySite={};
				oConceptBodySite= Object.create(CodeableConcept);
				
				var oCollection={};
				
				if(listSpecimenExtracted[indexIdSpecimen].collection!={})
				{
					oCollection=listSpecimenExtracted[indexIdSpecimen].collection;
				}
				else
				{
					oCollection= Object.create(Collection);
				}
				var oContainer={};
				if(listSpecimenExtracted[indexIdSpecimen].container.length>0)
				{
					oContainer=listSpecimenExtracted[indexIdSpecimen].container[0];
				}
				else
				{
					oContainer= Object.create(Container);
				}
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName;
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfSpecimenAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						var identifierListAttributes=specimenAttributesMapping.identifier.split(",");
						var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
						if(resCheck==true)
						{
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"Specimen Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
							listSpecimenExtracted[indexIdSpecimen].id=oTrackedEntity.attributes[iteratorAttribute].value;
							listOfSpecimenIdentifier.push(oIdentifier);
							specimenIsSet=true;
							continue;
						}
						switch(oAttribute)
						{
							case specimenAttributesMapping.status:
								listSpecimenExtracted[indexIdSpecimen].status=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.type:
								var oConceptSpecimenType={};
								oConceptSpecimenType= Object.create(oConceptSpecimenType);
								oConceptSpecimenType.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listSpecimenExtracted[indexIdSpecimen].type=oConceptSpecimenType;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.accession:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								oIdentifier.use="official";
								oIdentifier.type={"text":"Lab Identification"};
								oIdentifier.system="http://hl7.org/fhir";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								listSpecimenExtracted[indexIdSpecimen].accession=oIdentifier;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.receivedTime:
								listSpecimenExtracted[indexIdSpecimen].receivedTime=oTrackedEntity.attributes[iteratorAttribute].value;
								break;
							case specimenAttributesMapping.collectedDateTime:
								oCollection.collectedDateTime=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_quantity_unit:
								oCollection.quantity.unit=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_quantity_value:
								oCollection.quantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_method:
								oConceptCollectionMethod.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oCollection.method=oConceptCollectionMethod;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_bodySite:
								oConceptBodySite.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oCollection.bodySite=oConceptBodySite;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_capacity_unit:
								oContainer.capacity.unit=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_capacity_value:
								oContainer.capacity.value=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_description:
								oContainer.description=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.traitment_description:
								oTraitment.description=oTrackedEntity.attributes[iteratorAttribute].value;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.traitment_procedure:
								oConceptProcedure.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oTraitment.procedure=oConceptProcedure;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Container Identification"};
								oIdentifier.system="http://hl7.org/fhir";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								oContainer.Identifier=[oIdentifier];
								specimenIsSet=true;
								break;
						}
					
					}
				}//End for iteratorAttribute
				
			}//End if IndexIdSpecimen
			else
			{
				
				//Specimen initialization
				var oSpecimen={};
				oSpecimen= Object.create(Specimen);
				oSpecimen.resourceType="Specimen";
				//oSpecimen.id=oTrackedEntity.trackedEntityInstance;
				//oSpecimen.meta={"lastUpdated": formatDateInZform(oTrackedEntity.lastUpdated)};
				oSpecimen.active=true;
				var listOfSpecimenIdentifier=[];
				var listOfTraitment=[];
				var oConceptProcedure={};
				oConceptProcedure= Object.create(CodeableConcept);
				var oConceptCollectionMethod={};
				oConceptCollectionMethod= Object.create(CodeableConcept);
				var oConceptBodySite={};
				oConceptBodySite= Object.create(CodeableConcept);
				//oConceptProcedure.
				var oTraitment={
					"description":"",
					"procedure":{}
					};
				var oCollection={};
				oCollection= Object.create(Collection);
				var oContainer={};
				oContainer= Object.create(Container);
				var specimenIsSet=false;
				var hasCollectionInfo=false;
				var hasTraitementInfo=false;
				var hasContainerInfo=false;
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName.trim();
					var inTheList=false;
					var itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfSpecimenAttributeMapping();
					//console.log(itemListAttributesMapping);
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						var identifierListAttributes=specimenAttributesMapping.identifier.split(",");
						var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
						if(resCheck==true)
						{
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"Specimen Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
							oSpecimen.id=oTrackedEntity.attributes[iteratorAttribute].value+"-";
							listOfSpecimenIdentifier.push(oIdentifier);
							specimenIsSet=true;
							continue;
						}
						switch(oAttribute)
						{
							case specimenAttributesMapping.status:
								oSpecimen.status=oTrackedEntity.attributes[iteratorAttribute].value;
								//oSpecimen.status="available";
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.type:
								var oConceptSpecimenType={};
								oConceptSpecimenType= Object.create(oConceptSpecimenType);
								oConceptSpecimenType.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oSpecimen.type=oConceptSpecimenType;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.accession:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								oIdentifier.use="official";
								oIdentifier.type={"text":"Lab Identification"};
								oIdentifier.system="http://hl7.org/fhir";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								oSpecimen.accession=oIdentifier;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.receivedTime:
								oSpecimen.receivedTime=oTrackedEntity.attributes[iteratorAttribute].value;
								break;
							case specimenAttributesMapping.collectedDateTime:
								oCollection.collectedDateTime=oTrackedEntity.attributes[iteratorAttribute].value;
								hasCollectionInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_quantity_unit:
								oCollection.quantity.unit=oTrackedEntity.attributes[iteratorAttribute].value;
								hasCollectionInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_quantity_value:
								oCollection.quantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
								hasCollectionInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_method:
								oConceptCollectionMethod.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oCollection.method=oConceptCollectionMethod;
								hasCollectionInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.collection_bodySite:
								oConceptBodySite.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oCollection.bodySite=oConceptBodySite;
								hasCollectionInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_capacity_unit:
								oContainer.capacity.unit=oTrackedEntity.attributes[iteratorAttribute].value;
								hasContainerInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_capacity_value:
								oContainer.capacity.value=oTrackedEntity.attributes[iteratorAttribute].value;
								hasContainerInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_description:
								oContainer.description=oTrackedEntity.attributes[iteratorAttribute].value;
								hasContainerInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.traitment_description:
								oTraitment.description=oTrackedEntity.attributes[iteratorAttribute].value;
								hasTraitementInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.traitment_procedure:
								oConceptProcedure.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oTraitment.procedure=oConceptProcedure;
								hasTraitementInfo=true;
								specimenIsSet=true;
								break;
							case specimenAttributesMapping.container_identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Container Identification"};
								oIdentifier.system="http://hl7.org/fhir";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								oContainer.Identifier=[oIdentifier];
								specimenIsSet=true;
								break;
						}
					
					}
				}
				
				if(specimenIsSet==true)
				{
					if(getIndexOfFhirResourceById(listSpecimenExtracted,oSpecimen.id)==-1)
					{
						var associatedEntityIdentifier={};
						associatedEntityIdentifier=Object.create(Identifier);
						//assignment of Identifier
						associatedEntityIdentifier.use="secondary";
						associatedEntityIdentifier.type={"text":"Associated TEI"};
						associatedEntityIdentifier.system="http://hl7.org/fhir/";
						associatedEntityIdentifier.value=oTrackedEntity.trackedEntityInstance;
						listOfSpecimenIdentifier.push(associatedEntityIdentifier);
						oSpecimen.Identifier=listOfSpecimenIdentifier;
						/*
						if(listOfSpecimenIdentifier.length)
						{
							oSpecimen.id=listOfSpecimenIdentifier[0].value;
						}*/
						if(hasCollectionInfo==true)
						{
							oSpecimen.collection=oCollection;
						}
						if(hasTraitementInfo==true)
						{
							oSpecimen.treatment=[oTraitment];
						}
						if(hasContainerInfo==true)
						{
							oSpecimen.Container=[oContainer];
						}
						if (PatientSet==true)
						{
							oSpecimen.subject={"reference":"Patient/"+oPatient.id};
						}
						//entitySpecimen=oSpecimen;
						
						//listEntityObject.push(entitySpecimen);
						listSpecimenExtracted.push(oSpecimen);
					}
					//console.log(oSpecimen);
				}
			
			
			}//End else indexIdSpecimen
			//Check for DiagnosticOrder Information
		}//End for IteratorEntity to search for specimen
		//Populate Condition
		for(var iteratorEntity=0;iteratorEntity<listofTrackedEntity.length;iteratorEntity++)
		{
			var oTrackedEntity=listofTrackedEntity[iteratorEntity];
			var indexIdCondition=-1;
			var conditionIsSet=false;
			var idConditionToSearch=oTrackedEntity.trackedEntityInstance;
			indexIdCondition=getIndexOfFhirResourceByIdentification(listConditionExtracted,idConditionToSearch);
			if(indexIdCondition>=0)
			{
				//console.log("Entered in condition statement!!")
				var listOfConditionIdentifier=[];
				if(listConditionExtracted[indexIdCondition].identifier.length>0)
				{
					listOfConditionIdentifier=listObservationExtracted[indexIdCondition].identifier;
				}
				
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName;
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfConditionAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						switch(oAttribute)
						{
							case conditionAttributesMapping.identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Condition Identification"};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								listOfConditionIdentifier.push(oIdentifier);
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.patient:
								listConditionExtracted[indexIdCondition].patient={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.encounter:
								listConditionExtracted[indexIdCondition].encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.dateRecorded:
								listConditionExtracted[indexIdCondition].dateRecorded=extractDateFromDateTime(oTrackedEntity.attributes[iteratorAttribute].value);
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.code:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listConditionExtracted[indexIdCondition].code=oConcept;
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.category:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listConditionExtracted[indexIdCondition].category=oConcept;
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.clinicalStatus:
								listConditionExtracted[indexIdCondition].clinicalStatus=oTrackedEntity.attributes[iteratorAttribute].value;
								//active
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.verificationStatus:
								listConditionExtracted[indexIdCondition].verificationStatus=oTrackedEntity.attributes[iteratorAttribute].value;
								//provisional
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.severity:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listConditionExtracted[indexIdCondition].severity=oConcept;
								//provisional
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.onsetDateTime:
								listConditionExtracted[indexIdCondition].onsetDateTime=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								
								conditionIsSet=true;
								break;
							
							}
						
					}
				}
				if(conditionIsSet==true)
				{
					listConditionExtracted[indexIdCondition].identifier=listOfConditionIdentifier;
				}
			}
			else
			{
				//Observation initialization
				var oCondition={};
				oCondition= Object.create(Condition);
				oCondition.resourceType="Condition";
				var listOfConditionIdentifier=[];
				var listOfDateCreatedAttribute=[];
				
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName.trim();
					listOfDateCreatedAttribute.push(oTrackedEntity.attributes[iteratorAttribute].created);
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfConditionAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true && oTrackedEntity.attributes[iteratorAttribute].value!="")
					{
						switch(oAttribute)
						{
							case conditionAttributesMapping.identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Condition Identification"};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								listOfConditionIdentifier.push(oIdentifier);
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.patient:
								//oCondition.patient={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.encounter:
								//oCondition.encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
								//conditionIsSet=true;
								break;
							case conditionAttributesMapping.dateRecorded:
								oCondition.dateRecorded=extractDateFromDateTime(oTrackedEntity.attributes[iteratorAttribute].value);
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.code:
								
								if(oTrackedEntity.attributes[iteratorAttribute].value!="")
								{
									var  oConcept={};
									oConcept= Object.create(CodeableConcept);
									oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
									oCondition.code=oConcept;
									conditionIsSet=true;
								}
								break;
							case conditionAttributesMapping.category:
								if(oTrackedEntity.attributes[iteratorAttribute].value!="")
								{
									var  oConcept={};
									oConcept= Object.create(CodeableConcept);
									oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
									oCondition.category=oConcept;
									conditionIsSet=true;
								}
								break;
							case conditionAttributesMapping.clinicalStatus:
								oCondition.clinicalStatus=oTrackedEntity.attributes[iteratorAttribute].value;
								//active
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.verificationStatus:
								oCondition.verificationStatus=oTrackedEntity.attributes[iteratorAttribute].value;
								//provisional
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.severity:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oCondition.severity=oConcept;
								//provisional
								conditionIsSet=true;
								break;
							case conditionAttributesMapping.onsetDateTime:
								oCondition.onsetDateTime=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								
								conditionIsSet=true;
								break;
						}//End of switch
					
					}
				}
				if(conditionIsSet==true && oCondition.code!="")
				{
					
					oCondition.id=oTrackedEntity.trackedEntityInstance;
					//
					var associatedEntityIdentifier={};
					associatedEntityIdentifier=Object.create(Identifier);
					//assignment of Identifier
					associatedEntityIdentifier.use="secondary";
					associatedEntityIdentifier.type={"text":"Associated TEI"};
					associatedEntityIdentifier.system="http://hl7.org/fhir/";
					associatedEntityIdentifier.value=oTrackedEntity.trackedEntityInstance;
					listOfConditionIdentifier.push(associatedEntityIdentifier);
					oCondition.identifier=listOfConditionIdentifier;
					//Add additional information for validation
					if(oCondition.dateRecorded=="")
					{
						var dateCreated=getOldDate(listOfDateCreatedAttribute);
						oCondition.dateRecorded=extractDateFromDateTime(dateCreated);
					}
					if(oCondition.clinicalStatus=="")
					{
						oCondition.clinicalStatus="active";
					}
					if(oCondition.onsetDateTime=="")
					{
						var dateCreated=getOldDate(listOfDateCreatedAttribute);
						oCondition.onsetDateTime=formatDateInZform(dateCreated);
					}
					if(oCondition.verificationStatus=="")
					{
						oCondition.verificationStatus="provisional";
					}
					if (PatientSet==true)
					{
						oCondition.patient={"reference":"Patient/"+oPatient.id};
					}
					listConditionExtracted.push(oCondition);
				}
		
			}
		}//End for IteratorEntity to search for Condition
		//console.log(listConditionExtracted);
		//Populate DiagnosticOrder
		for(var iteratorEntity=0;iteratorEntity<listofTrackedEntity.length;iteratorEntity++)
		{
			var oTrackedEntity=listofTrackedEntity[iteratorEntity];
			var indexIdOrder=-1;
			orderIsSet=false;
			var idOrderToSearch=oTrackedEntity.trackedEntityInstance;
			indexIdOrder=getIndexOfFhirResourceByIdentification(listDiagnosticOrderExtracted,idOrderToSearch);
			if(indexIdOrder>=0)
			{
				var oOrderEvent={};
				if(listDiagnosticOrderExtracted[indexIdOrder].event.length>0)
				{
					oOrderEvent=listDiagnosticOrderExtracted[indexIdOrder].event[0];
				}
				else
				{
					oOrderEvent= Object.create(OrderEvent);
				}
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName;
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfDiagnosticOrderAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						
						switch(oAttribute)
						{
							case orderAttributesMapping.identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Order Identification"};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								listOfOrderIdentifier.push(oIdentifier);
								orderIsSet=true;
								break;
							case orderAttributesMapping.subject:
								listDiagnosticOrderExtracted[indexIdOrder].subject={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value.trim()+"-"};
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderer:
								//listDiagnosticOrderExtracted[indexIdOrder].orderer={"reference":"Practitioner/"+oTrackedEntity.attributes[iteratorAttribute].value};
								//orderIsSet=true;
								break;
							case orderAttributesMapping.encounter:
								//listDiagnosticOrderExtracted[indexIdOrder].encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
								//orderIsSet=true;
								break;
							case orderAttributesMapping.reason:
								var oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listDiagnosticOrderExtracted[indexIdOrder].reason=[oConcept];
								orderIsSet=true;
								break;
							case orderAttributesMapping.supportingInformation:
								listDiagnosticOrderExtracted[indexIdOrder].supportingInformation=[oTrackedEntity.attributes[iteratorAttribute].value];
								orderIsSet=true;
								break;
							case orderAttributesMapping.specimen:
								//listDiagnosticOrderExtracted[indexIdOrder].specimen={"reference":"Specimen/"+oTrackedEntity.attributes[i].value};
								//orderIsSet=true;
								break;
							case orderAttributesMapping.status:
								listDiagnosticOrderExtracted[indexIdOrder].status=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.priority:
								listDiagnosticOrderExtracted[indexIdOrder].priority=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderEvent_dateTime:
								oOrderEvent.dateTime=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderEvent_status:
								oOrderEvent.status=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderEvent_description:
								var oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oOrderEvent.description=oConcept;
								orderIsSet=true;
								break;
							case orderAttributesMapping.item:
								var oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listDiagnosticOrderExtracted[indexIdOrder].item=[oConcept];
								orderIsSet=true;
								break;
							case orderAttributesMapping.note:
								listDiagnosticOrderExtracted[indexIdOrder].note={"text":oTrackedEntity.attributes[i].value};
								orderIsSet=true;
								break;
							
						}
							
					}
			
				}//End for oTrackedEntity.attributes
				
				//Get the corresponding Order if from the extracted order entry
				if(orderIsSet==true)
				{
					listDiagnosticOrderExtracted[indexIdOrder].event[oOrderEvent];
				}
				if (listConditionExtracted.length>0)
				{
					listDiagnosticOrderExtracted[indexIdOrder].supportingInformation=[];
					var listAssociatedCondition=getListEntityInstanceAssociatedCondition(listConditionExtracted,oTrackedEntity.trackedEntityInstance,"Associated TEI");
					for(var iteratorResource=0;iteratorResource<listAssociatedCondition.length;iteratorResource++)
					{
						var resourceRef={"reference":"Condition/"+listAssociatedCondition[iteratorResource].id};
						listDiagnosticOrderExtracted[indexIdOrder].supportingInformation.push(resourceRef);
					}
				}
				
			}//End if indexIdOrder
			else
			{
				//Order Initialization
				var oOrder={};
				oOrder= Object.create(DiagnosticOrder);
				oOrder.resourceType="DiagnosticOrder";
				var listOfOrderIdentifier=[];
				var oOrderEvent={};
				oOrderEvent= Object.create(OrderEvent);
				oOrder.specimen=[];
				var orderIsSet=false;
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName.trim();
					var inTheList=false;
					//inTheList=checkAttributeInList
					var itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfDiagnosticOrderAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						switch(oAttribute)
						{
							case orderAttributesMapping.identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Order Identification"};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								listOfOrderIdentifier.push(oIdentifier);
								orderIsSet=true;
								break;
							case orderAttributesMapping.subject:
								oOrder.subject={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderer:
								oOrder.orderer={"reference":"Practitioner/"+oTrackedEntity.attributes[iteratorAttribute].value};
								orderIsSet=true;
								break;
							case orderAttributesMapping.encounter:
								oOrder.encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
								orderIsSet=true;
								break;
							case orderAttributesMapping.reason:
								var oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oOrder.reason=[oConcept];
								orderIsSet=true;
								break;
							case orderAttributesMapping.supportingInformation:
								oOrder.supportingInformation=[oTrackedEntity.attributes[iteratorAttribute].value];
								orderIsSet=true;
								break;
							case orderAttributesMapping.specimen:
								oOrder.specimen={"reference":"Specimen/"+oTrackedEntity.attributes[iteratorAttribute].value};
								orderIsSet=true;
								break;
							case orderAttributesMapping.status:
								oOrder.status=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.priority:
								oOrder.priority=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderEvent_dateTime:
								oOrderEvent.dateTime=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderEvent_status:
								oOrderEvent.status=oTrackedEntity.attributes[iteratorAttribute].value;
								orderIsSet=true;
								break;
							case orderAttributesMapping.orderEvent_description:
								var oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oOrderEvent.description=oConcept;
								orderIsSet=true;
								break;
							case orderAttributesMapping.item:
								var oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oOrder.item=[oConcept];
								orderIsSet=true;
								break;
							case orderAttributesMapping.note:
								oOrder.note={"text":oTrackedEntity.attributes[iteratorAttribute].value};
								orderIsSet=true;
								break;
							
						}//End of switch
					
					}
					
				}
				if(orderIsSet==true)
				{
					
					oOrder.id=oTrackedEntity.trackedEntityInstance;
					//oOrder.Identifier=listOfOrderIdentifier;
					//Add additional information to allow to mapping of order to the patient
					//as there is information of order amoung the patient attribute
					//
					var associatedEntityIdentifier={};
					associatedEntityIdentifier=Object.create(Identifier);
					//assignment of Identifier
					associatedEntityIdentifier.use="secondary";
					associatedEntityIdentifier.type={"text":"Associated TEI"};
					associatedEntityIdentifier.system="http://hl7.org/fhir/";
					associatedEntityIdentifier.value=oTrackedEntity.trackedEntityInstance;
					listOfOrderIdentifier.push(associatedEntityIdentifier);
					oOrder.identifier=listOfOrderIdentifier;
					//Add additional information for validation
					oOrderEvent.status="requested";
					
					if (PatientSet==true)
					{
						oOrder.subject={"reference":"Patient/"+oPatient.id};
					}
					if (listSpecimenExtracted.length>0)
					{
						var listAssociatedSpecimen=getListEntityInstanceAssociatedSpecimens(listSpecimenExtracted,oTrackedEntity.trackedEntityInstance,"Associated TEI");
						for(var iteratorSpecimen=0;iteratorSpecimen<listAssociatedSpecimen.length;iteratorSpecimen++)
						{
							var specimenRef={"reference":"Specimen/"+listAssociatedSpecimen[iteratorSpecimen].id};
							oOrder.specimen.push(specimenRef);
						}
					}
					if (listConditionExtracted.length>0)
					{
						oOrder.supportingInformation=[];
						var listAssociatedCondition=getListEntityInstanceAssociatedCondition(listConditionExtracted,oTrackedEntity.trackedEntityInstance,"Associated TEI");
						for(var iteratorResource=0;iteratorResource<listAssociatedCondition.length;iteratorResource++)
						{
							var resourceRef={"reference":"Condition/"+listAssociatedCondition[iteratorResource].id};
							oOrder.supportingInformation.push(resourceRef);
						}
					}
					listDiagnosticOrderExtracted.push(oOrder);
					
				}
				
			}
			
		}//En for IteratorEntity to search for DiagnosticOrder
		//Populate Observation
		for(var iteratorEntity=0;iteratorEntity<listofTrackedEntity.length;iteratorEntity++)
		{
			var oTrackedEntity=listofTrackedEntity[iteratorEntity];
			var indexIdObservation=-1;
			var observationIsSet=false;
			var idObservationToSearch=oTrackedEntity.trackedEntityInstance;
			indexIdObservation=getIndexOfFhirResourceByIdentification(listObservationExtracted,idObservationToSearch);
			if(indexIdObservation>=0)
			{
				var listOfObservationIdentifier=[];
				if(listObservationExtracted[indexIdObservation].identifier.length>0)
				{
					listOfObservationIdentifier=listObservationExtracted[indexIdObservation].identifier;
				}
				var oSampledData={};
				if(listObservationExtracted[indexIdObservation].valueSampledData=={})
				{
					oSampledData= Object.create(SampledData);
				}
				else
				{
					oSampledData=listObservationExtracted[indexIdObservation].valueSampledData;
				}
				var oPeriodEffective={};
				if(listObservationExtracted[indexIdObservation].effectivePeriod=={})
				{
					oPeriodEffective= Object.create(Period);
				}
				else
				{
					oPeriodEffective=listObservationExtracted[indexIdObservation].effectivePeriod;
				}
				
				var oPeriodResult={};
				if(listObservationExtracted[indexIdObservation].valuePeriod=={})
				{
					oPeriodResult= Object.create(Period);
				}
				else
				{
					oPeriodResult=listObservationExtracted[indexIdObservation].valuePeriod;
				}
				
				var oValueQuantity={};
				if(listObservationExtracted[indexIdObservation].valueQuantity=={})
				{
					oValueQuantity= Object.create(Quantity);
				}
				else
				{
					oValueQuantity=listObservationExtracted[indexIdObservation].valueQuantity;
				}
				var oObservationRange={};
				if(listObservationExtracted[indexIdObservation].valueRange=={})
				{
					oObservationRange=Object.create(Range);
				}
				else
				{
					oObservationRange=listObservationExtracted[indexIdObservation].valueRange;
				}
				
				var oObservationRatio={};
				if(listObservationExtracted[indexIdObservation].valueRatio=={})
				{
					oObservationRatio=Object.create(Ratio);
				}
				else
				{
					oObservationRatio=listObservationExtracted[indexIdObservation].valueRatio;
				}
				var oBodySiteConcept={};
				if(listObservationExtracted[indexIdObservation].bodySite=={})
				{
					oBodySiteConcept=Object.create(CodeableConcept);
				}
				else
				{
					oBodySiteConcept=listObservationExtracted[indexIdObservation]
				}
				
				var oAbsentRaisonConcept={};
				if(listObservationExtracted[indexIdObservation].dataAbsentReason=={})
				{
					oAbsentRaisonConcept=Object.create(CodeableConcept);
				}
				else
				{
					oAbsentRaisonConcept=listObservationExtracted[indexIdObservation].dataAbsentReason;
				}
				
				
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName;
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfObservationAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						switch(oAttribute)
						{
							case observationAttributesMapping.identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Observation Identification"};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								listOfObservationIdentifier.push(oIdentifier);
								observationIsSet=true;
								break;
							case observationAttributesMapping.status:
								listObservationExtracted[indexIdObservation].status=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.category:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listObservationExtracted[indexIdObservation].category=oConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.code:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								listObservationExtracted[indexIdObservation].code=oConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.subject:
								//listObservationExtracted[indexIdObservation].subject={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
								break;
							case observationAttributesMapping.encounter:
								listObservationExtracted[indexIdObservation].encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
								observationIsSet=true;
								break;
							case observationAttributesMapping.effectiveDateTime:
								listObservationExtracted[indexIdObservation].effectiveDateTime=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.effectivePeriod_dateSup:
								oPeriodEffective.end= formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								observationIsSet=true;
								break;
							case observationAttributesMapping.effectivePeriod_dateInf:
								oPeriodEffective.start=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								observationIsSet=true;
								break;
							case observationAttributesMapping.issued:
								listObservationExtracted[indexIdObservation].issued=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								break;
							case observationAttributesMapping.performer:
								//listObservationExtracted[indexIdObservation].performer=[{"reference":"Practitioner/"+oTrackedEntity.attributes[iteratorAttribute].value}];
								//observationIsSet=true;
								break;
							case observationAttributesMapping.valueQuantity_unit:
									oValueQuantity.unit=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueQuantity_value:
									oValueQuantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueCodeableConcept:
									var  oConcept={};
									oConcept= Object.create(CodeableConcept);
									oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
									listObservationExtracted[indexIdObservation].valueCodeableConcept=oConcept;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueString:
									listObservationExtracted[indexIdObservation].valueString=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueRange_sup:
									var rangeQuantity=Object.create(Quantity);
									rangeQuantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
									oObservationRange.high=rangeQuantity;
									break;
							case observationAttributesMapping.valueRange_Inf:
									var rangeQuantity=Object.create(Quantity);
									rangeQuantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
									oObservationRange.low=rangeQuantity;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueRatio_num:
									oObservationRatio.numerator=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueRatio_denom:
									oObservationRatio.denominator=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueSampledData_origin:
									oOriginQuantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
									break;
							case observationAttributesMapping.valueSampledData_period:
									oSampledData.period=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueSampledData_factor:
									oSampledData.factor=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueSampledData_lowerLimit:
									oSampledData.lowerLimit=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueSampledData_upperLimit:
									oSampledData.upperLimit=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueSampledData_dimensions:
									oSampledData.dimensions=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueSampledData_data:
									oSampledData.data=oTrackedEntity.attributes[iteratorAttribute].value;
									break;
							case observationAttributesMapping.valueTime:
									listObservationExtracted[indexIdObservation].valueTime=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valueDateTime:
									listObservationExtracted[indexIdObservation].valueDateTime=oTrackedEntity.attributes[iteratorAttribute].value;
									break;
							case observationAttributesMapping.valuePeriod_start:
									oPeriodResult.start=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.valuePeriod_end:
									oPeriodResult.end=oTrackedEntity.attributes[iteratorAttribute].value;
									break;
							case observationAttributesMapping.dataAbsentReason:
									oAbsentRaisonConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
									listObservationExtracted[indexIdObservation].dataAbsentReason=oAbsentRaisonConcept;
									observationIsSet=true;
									break;
							case observationAttributesMapping.interpretation:
									var  oConcept={};
									oConcept= Object.create(CodeableConcept);
									oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
									listObservationExtracted[indexIdObservation].interpretation=oConcept;
									break;
							case observationAttributesMapping.comments:
									listObservationExtracted[indexIdObservation].comments=oTrackedEntity.attributes[iteratorAttribute].value;
									observationIsSet=true;
									break;
							case observationAttributesMapping.bodySite:
									oBodySiteConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
									listObservationExtracted[indexIdObservation].bodySite=oBodySiteConcept;
									observationIsSet=true;
									break;
							case observationAttributesMapping.method:
									var  oConcept={};
									oConcept= Object.create(CodeableConcept);
									oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
									listObservationExtracted[indexIdObservation].method=oConcept;
									observationIsSet=true;
									break;
							case observationAttributesMapping.specimen:
									//listObservationExtracted[indexIdObservation].specimen={"reference":"Specimen/"+oTrackedEntity.attributes[iteratorAttribute].value};
									break;
							case observationAttributesMapping.device:
									//listObservationExtracted[indexIdObservation].device={"reference":"Device/"+oTrackedEntity.attributes[iteratorAttribute].value};
									//observationIsSet=true;
									break;
							case observationAttributesMapping.referenceRange:
									listObservationExtracted[indexIdObservation].referenceRange=[];
									break;
							case observationAttributesMapping.related:
									listObservationExtracted[indexIdObservation].related=[];
									observationIsSet=true;
									break;
							case observationAttributesMapping.component:
									listObservationExtracted[indexIdObservation].component=[];
									observationIsSet=true;
									break;
							}
						
					}
				}
				if(observationIsSet==true)
				{
					oSampledData.origin=oOriginQuantity;
					listObservationExtracted[indexIdObservation].valueSampledData=oSampledData;
					listObservationExtracted[indexIdObservation].identifier=listOfObservationIdentifier;
					listObservationExtracted[indexIdObservation].effectivePeriod=oPeriodEffective;
					listObservationExtracted[indexIdObservation].valueQuantity=oValueQuantity;
					listObservationExtracted[indexIdObservation].valueRange=oObservationRange;
					//checkIfAsProperties(oObservationRange);
					listObservationExtracted[indexIdObservation].valueRatio=oObservationRatio;
					listObservationExtracted[indexIdObservation].valuePeriod=oPeriodResult;
				}
			}
			else
			{
				//Observation initialization
				var oObservation={};
				oObservation= Object.create(Observation);
				oObservation.resourceType="Observation";
				var listOfObservationIdentifier=[];
				var oSampledData={};
				oSampledData= Object.create(SampledData);
				var oPeriodEffective={};
				oPeriodEffective= Object.create(Period);
				var oPeriodResult={};
				oPeriodResult= Object.create(Period);
				var oValueQuantity={};
				oValueQuantity= Object.create(Quantity);
				var oOriginQuantity={};
				oOriginQuantity= Object.create(Quantity);
				var oObservationRange={};
				oObservationRange=Object.create(Range);
				var oObservationRatio={};
				oObservationRatio=Object.create(Ratio);
				var oBodySiteConcept={};
				oBodySiteConcept=Object.create(CodeableConcept);
				var oAbsentRaisonConcept={};
				oAbsentRaisonConcept=Object.create(CodeableConcept);
				var observationIsSet=false;
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName.trim();
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfObservationAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						switch(oAttribute)
						{
							case observationAttributesMapping.identifier:
								var oIdentifier={};
								oIdentifier=Object.create(Identifier);
								//assignment of Identifier
								oIdentifier.use="official";
								oIdentifier.type={"text":"Observation Identification"};
								oIdentifier.system="http://hl7.org/fhir/";
								oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
								listOfObservationIdentifier.push(oIdentifier);
								observationIsSet=true;
								break;
							case observationAttributesMapping.status:
								oObservation.status=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.category:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservation.category=oConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.code:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservation.code=oConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.subject:
								oObservation.subject={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
								break;
							case observationAttributesMapping.encounter:
								oObservation.encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
								observationIsSet=true;
								break;
							case observationAttributesMapping.effectiveDateTime:
								oObservation.effectiveDateTime=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.effectivePeriod_dateSup:
								oPeriodEffective.end= formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								observationIsSet=true;
								break;
							case observationAttributesMapping.effectivePeriod_dateInf:
								oPeriodEffective.start=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								observationIsSet=true;
								break;
							case observationAttributesMapping.issued:
								oObservation.issued=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
								break;
							case observationAttributesMapping.performer:
								oObservation.performer=[{"reference":"Practitioner/"+oTrackedEntity.attributes[iteratorAttribute].value}];
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueQuantity_unit:
								oValueQuantity.unit=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueQuantity_value:
								oValueQuantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueCodeableConcept:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservation.valueCodeableConcept=oConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueString:
								oObservation.valueString=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueRange_sup:
								var rangeQuantity=Object.create(Quantity);
								rangeQuantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservationRange.high=rangeQuantity;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueRange_Inf:
								var rangeQuantity=Object.create(Quantity);
								rangeQuantity.value=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservationRange.low=rangeQuantity;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueRatio_num:
								oObservationRatio.numerator=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueRatio_denom:
								oObservationRatio.denominator=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueSampledData_origin:
									oOriginQuantity.value=oEvent.dataValues[iteratorDataValues].value;
									break;
							case observationAttributesMapping.valueSampledData_period:
								oSampledData.period=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueSampledData_factor:
								oSampledData.factor=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueSampledData_lowerLimit:
								oSampledData.lowerLimit=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueSampledData_upperLimit:
								oSampledData.upperLimit=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueSampledData_dimensions:
								oSampledData.dimensions=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueSampledData_data:
								oSampledData.data=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueTime:
								oObservation.valueTime=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valueDateTime:
								oObservation.valueDateTime=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valuePeriod_start:
								oPeriodResult.start=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.valuePeriod_end:
								oPeriodResult.end=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.dataAbsentReason:
								oAbsentRaisonConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservation.dataAbsentReason=oAbsentRaisonConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.interpretation:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservation.interpretation=oConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.comments:
								oObservation.comments=oTrackedEntity.attributes[iteratorAttribute].value;
								observationIsSet=true;
								break;
							case observationAttributesMapping.bodySite:
								oBodySiteConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservation.bodySite=oBodySiteConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.method:
								var  oConcept={};
								oConcept= Object.create(CodeableConcept);
								oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
								oObservation.method=oConcept;
								observationIsSet=true;
								break;
							case observationAttributesMapping.specimen:
								oObservation.specimen={"reference":"Specimen/"+oTrackedEntity.attributes[iteratorAttribute].value};
								observationIsSet=true;
								break;
							case observationAttributesMapping.device:
								oObservation.device={"reference":"Device/"+oTrackedEntity.attributes[iteratorAttribute].value};
								observationIsSet=true;
								break;
							case observationAttributesMapping.referenceRange:
									//oObservation.referenceRange=[];
									break;
							case observationAttributesMapping.related:
									//oObservation.related=[];
									break;
							case observationAttributesMapping.component:
									//oObservation.component=[];
									break;
							}//End of switch
					
					}
				}
				if(observationIsSet==true)
				{
					
					oObservation.id=oTrackedEntity.trackedEntityInstance;
					//
					oSampledData.origin=oOriginQuantity;
					oObservation.valueSampledData=oSampledData;
					//oObservation.identifier=listOfObservationIdentifier;
					oObservation.effectivePeriod=oPeriodEffective;
					oObservation.valueQuantity=oValueQuantity;
					oObservation.valueRange=oObservationRange;
					//checkIfAsProperties(oObservationRange);
					oObservation.valueRatio=oObservationRatio;
					oObservation.valuePeriod=oPeriodResult;
					//
					var associatedEntityIdentifier={};
					associatedEntityIdentifier=Object.create(Identifier);
					//assignment of Identifier
					associatedEntityIdentifier.use="secondary";
					associatedEntityIdentifier.type={"text":"Associated TEI"};
					associatedEntityIdentifier.system="http://hl7.org/fhir/";
					associatedEntityIdentifier.value=oTrackedEntity.trackedEntityInstance;
					listOfObservationIdentifier.push(associatedEntityIdentifier);
					oObservation.identifier=listOfObservationIdentifier;
					//Add additional information for validation
					oObservation.status="registered";
					//By Default used Microscopy observation as code
					var oConcept={};
					oConcept= Object.create(CodeableConcept);
					oConcept.text="Microscopic Observation";
					oConcept.code=[{"code":"10355-6"}];
					if (PatientSet==true)
					{
						oObservation.subject={"reference":"Patient/"+oPatient.id};
					}
					if (listSpecimenExtracted.length>0)
					{
						var listAssociatedSpecimen=getListEntityInstanceAssociatedSpecimens(listSpecimenExtracted,oTrackedEntity.trackedEntityInstance,"Associated TEI");
						for(var iteratorSpecimen=0;iteratorSpecimen<listAssociatedSpecimen.length;iteratorSpecimen++)
						{
							var specimenRef={"reference":"Specimen/"+listAssociatedSpecimen[iteratorSpecimen].id};
							oObservation.specimen=specimenRef;
							break;
						}
					}
					listObservationExtracted.push(oObservation);
				}
		
			}
		}//End for IteratorEntity to search for Observation
		
		//Populate DiagnosticReport
		for(var iteratorEntity=0;iteratorEntity<listofTrackedEntity.length;iteratorEntity++)
		{
			var oTrackedEntity=listofTrackedEntity[iteratorEntity];
			var indexIdDiagnosticReport=-1;
			var diagnosticReportIsSet=false;
			var idDiagnosticReportToSearch=oTrackedEntity.trackedEntityInstance;
			indexIdDiagnosticReport=getIndexOfFhirResourceByIdentification(listDiagnosticReportExtracted,idDiagnosticReportToSearch);
			if(indexIdDiagnosticReport>=0)
			{
				var listOfDiagnosticReportIdentifier=[];
				if(listDiagnosticReportExtracted[indexIdDiagnosticReport].identifier.length>0)
				{
					listOfDiagnosticReportIdentifier=listDiagnosticReportExtracted[indexIdDiagnosticReport].identifier;
				}
				var oEffectivePeriod={};
				if(listDiagnosticReportExtracted[indexIdDiagnosticReport].effectivePeriod!="")
				{
					oEffectivePeriod=listDiagnosticReportExtracted[indexIdDiagnosticReport].effectivePeriod;
				}
				else
				{
					oEffectivePeriod= Object.create(Period);
				}
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName;
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfDiagnosticReportAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						switch(oAttribute)
						{
						case diagnosticReportAttributesMapping.identifier:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"DiagnosticReport Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
							listOfDiagnosticReportIdentifier.push(oIdentifier);
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.status:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].status=oTrackedEntity.attributes[iteratorAttribute].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.category:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
							listDiagnosticReportExtracted[indexIdDiagnosticReport].category=oConcept;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.code:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
							listDiagnosticReportExtracted[indexIdDiagnosticReport].code=oConcept;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.subject:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].subject={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.encounter:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectiveDateTime:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].effectiveDateTime=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectivePeriod_start:
							oEffectivePeriod.start=oTrackedEntity.attributes[iteratorAttribute].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectivePeriod_end:
							oEffectivePeriod.end=oTrackedEntity.attributes[iteratorAttribute].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.issued:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].issued=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.performer:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].performer={"reference":"Organization/"+oTrackedEntity.attributes[iteratorAttribute].value};
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.request:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].request=[{"reference":"DiagnosticOrder/"+oTrackedEntity.attributes[iteratorAttribute].value}];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.specimen:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].specimen=[{"reference":"Specimen/"+oTrackedEntity.attributes[iteratorAttribute].value}];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.result:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].result=[{"reference":"Observation/"+oTrackedEntity.attributes[iteratorAttribute].value}];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.imagingStudy:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].imagingStudy=[];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.image:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].image=[];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.conclusion:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].conclusion=oTrackedEntity.attributes[iteratorAttribute].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.codedDiagnosis:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
							listDiagnosticReportExtracted[indexIdDiagnosticReport].codedDiagnosis=[oConcept];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.presentedForm:
							listDiagnosticReportExtracted[indexIdDiagnosticReport].presentedForm=[];
							diagnosticReportIsSet=true;
							break;
						}
						
					}
				}
				if(diagnosticReportIsSet==true)
				{
					listDiagnosticReportExtracted[indexIdDiagnosticReport].identifier=listOfDiagnosticReportIdentifier;
					listDiagnosticReportExtracted[indexIdDiagnosticReport].effectivePeriod=oEffectivePeriod;
					//Add additional information for validation
				}
			}
			else
			{
				//Observation initialization
				
				
				var oDiagnosticReport={};
				oDiagnosticReport= Object.create(DiagnosticReport);
				oDiagnosticReport.resourceType="DiagnosticReport";
				var listOfDiagnosticReportIdentifier=[];
				var oEffectivePeriod={};
				oEffectivePeriod= Object.create(Period);
				oDiagnosticReport.request=[];
				oDiagnosticReport.specimen=[];
				oDiagnosticReport.result=[];
				var diagnosticReportIsSet=false;
				var effectivePeriodIsSet=false;
				var listOfDateCreatedAttribute=[];
				//console.log(listSpecimenExtracted);
				for(var iteratorAttribute=0;iteratorAttribute<oTrackedEntity.attributes.length;iteratorAttribute++)
				{
					var oAttribute=oTrackedEntity.attributes[iteratorAttribute].displayName;
					listOfDateCreatedAttribute.push(oTrackedEntity.attributes[iteratorAttribute].created);
					var inTheList=false;
					itemListAttributesMapping=[];
					itemListAttributesMapping=getListOfDiagnosticReportAttributeMapping();
					inTheList=checkAttributeInList(itemListAttributesMapping,oAttribute);
					if(inTheList==true)
					{
						switch(oAttribute)
						{
						case diagnosticReportAttributesMapping.identifier:
							var oIdentifier={};
							oIdentifier=Object.create(Identifier);
							//assignment of Identifier
							oIdentifier.use="official";
							oIdentifier.type={"text":"DiagnosticReport Identification"};
							oIdentifier.system="http://hl7.org/fhir/";
							oIdentifier.value=oTrackedEntity.attributes[iteratorAttribute].value;
							listOfDiagnosticReportIdentifier.push(oIdentifier);
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.status:
							oDiagnosticReport.status=oTrackedEntity.attributes[iteratorAttribute].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.category:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
							oDiagnosticReport.category=oConcept;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.code:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
							oDiagnosticReport.code=oConcept;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.subject:
							//oDiagnosticReport.subject={"reference":"Patient/"+oTrackedEntity.attributes[iteratorAttribute].value};
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.encounter:
							oDiagnosticReport.encounter={"reference":"Encounter/"+oTrackedEntity.attributes[iteratorAttribute].value};
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectiveDateTime:
							//oDiagnosticReport.effectiveDateTime=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectivePeriod_start:
							oEffectivePeriod.start=oTrackedEntity.attributes[iteratorAttribute].value;
							effectivePeriodIsSet=true;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.effectivePeriod_end:
							oEffectivePeriod.end=oTrackedEntity.attributes[iteratorAttribute].value;
							effectivePeriodIsSet=true;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.issued:
							//oDiagnosticReport.issued=formatDateInZform(oTrackedEntity.attributes[iteratorAttribute].value);
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.performer:
							//oDiagnosticReport.performer={"reference":"Organization/"+oTrackedEntity.attributes[iteratorAttribute].value};
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.request:
							//oDiagnosticReport.request=[{"reference":"DiagnosticOrder/"+oTrackedEntity.attributes[iteratorAttribute].value}];
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.specimen:
							//oDiagnosticReport.specimen=[{"reference":"Specimen/"+oTrackedEntity.attributes[iteratorAttribute].value}];
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.result:
							//oDiagnosticReport.result=[{"reference":"Observation/"+oTrackedEntity.attributes[iteratorAttribute].value}];
							//diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.imagingStudy:
							oDiagnosticReport.imagingStudy=[];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.image:
							oDiagnosticReport.image=[];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.conclusion:
							oDiagnosticReport.conclusion=oTrackedEntity.attributes[iteratorAttribute].value;
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.codedDiagnosis:
							var oConcept={};
							oConcept=Object.create(CodeableConcept);
							oConcept.text=oTrackedEntity.attributes[iteratorAttribute].value;
							oDiagnosticReport.codedDiagnosis=[oConcept];
							diagnosticReportIsSet=true;
							break;
						case diagnosticReportAttributesMapping.presentedForm:
							oDiagnosticReport.presentedForm=[];
							diagnosticReportIsSet=true;
							break;
						}//End of switch
					
					}
				}
				if(diagnosticReportIsSet==true)
				{
					//console.log(listSpecimenExtracted);
					oDiagnosticReport.id=oTrackedEntity.trackedEntityInstance;
					var associatedEntityIdentifier={};
					associatedEntityIdentifier=Object.create(Identifier);
					//assignment of Identifier
					associatedEntityIdentifier.use="secondary";
					associatedEntityIdentifier.type={"text":"Associated TEI"};
					associatedEntityIdentifier.system="http://hl7.org/fhir/";
					associatedEntityIdentifier.value=oTrackedEntity.trackedEntityInstance;
					listOfDiagnosticReportIdentifier.push(associatedEntityIdentifier);
					oDiagnosticReport.identifier=listOfDiagnosticReportIdentifier;
					if(effectivePeriodIsSet==true)
					{
						oDiagnosticReport.effectivePeriod=oEffectivePeriod;
					}
					//Add additional information for validation
					oDiagnosticReport.status="final";
					//By Default used Acyclovir for code
					var oConcept={};
					oConcept= Object.create(CodeableConcept);
					oConcept.text="Acyclovir";
					oConcept.code=[{"code":"1-8"}];
					oDiagnosticReport.code=oConcept;
					if (PatientSet==true)
					{
						oDiagnosticReport.subject={"reference":"Patient/"+oPatient.id};
					}
					if(listDiagnosticOrderExtracted.length>=1)
					{
						//console.log(listDiagnosticOrderExtracted);
						var listOrderAssociated=[];
						listOrderAssociated=getListEntityInstanceAssociatedDiagnosticOrders(listDiagnosticOrderExtracted,oTrackedEntity.trackedEntityInstance,'Associated TEI');
						//console.log(listDiagnosticOrderExtracted);
						//console.log("------------------");
						//console.log("------And------------");
						//console.log("Search item: "+oTrackedEntity.trackedEntityInstance);
						
						for(var i=0;i<listOrderAssociated.length;i++)
						{
							var diagnosticOrderRef={"reference":"DiagnosticOrder/"+listOrderAssociated[i].id};
							oDiagnosticReport.request.push(diagnosticOrderRef);
						}
					}
					else
					{
						oDiagnosticReport.request=null;
					}
					if(listSpecimenExtracted.length>=1)
					{
						//console.log(listSpecimenExtracted);
						var listSpecimenAssociated=[];
						listSpecimenAssociated=getListEntityInstanceAssociatedSpecimens(listSpecimenExtracted,oTrackedEntity.trackedEntityInstance,'Associated TEI');
						for(var i=0;i<listSpecimenAssociated.length;i++)
						{
							var specimenRef={"reference":"Specimen/"+listSpecimenAssociated[i].id};
							oDiagnosticReport.specimen.push(specimenRef);
						}
						
					}
					else
					{
						oDiagnosticReport.specimen=null;
					}
					var createdDate=getOldDate(listOfDateCreatedAttribute);
					if(listObservationExtracted.length>=1)
					{
						var listObservationAssociated=[];
						listObservationAssociated=getListEntityInstanceAssociatedObservation(listObservationExtracted,oTrackedEntity.trackedEntityInstance,'Associated TEI');
						for(var i=0;i<listObservationAssociated.length;i++)
						{
							var observatioRef={"reference":"Observation/"+listObservationAssociated[i].id};
							oDiagnosticReport.result.push(observatioRef);
						}
						if(oDiagnosticReport.effectiveDateTime=="" && listObservationAssociated.length>0)
						{
							//get the RecenteffectiveDateTime of all observation
							var listOfEffectiveDateTime=[];
							for(var i=0;i<listObservationAssociated.length;i++)
							{
								if(listObservationAssociated[i].effectiveDateTime!="")
								{
									listOfEffectiveDateTime.push(listObservationAssociated[i].effectiveDateTime);
								}
								
							}
							if(listOfEffectiveDateTime.length>0)
							{
								var recentEffectiveDateTime=getRecentDate(listOfEffectiveDateTime);
								if(recentEffectiveDateTime!="")
								{
									oDiagnosticReport.effectiveDateTime= formatDateInZform(recentEffectiveDateTime);
									oDiagnosticReport.issued=formatDateInZform( recentEffectiveDateTime);
								}
								else
								{
									oDiagnosticReport.effectiveDateTime=formatDateInZform( createdDate);
									oDiagnosticReport.issued=formatDateInZform( createdDate);
								}
							}
							else
							{
								oDiagnosticReport.effectiveDateTime=formatDateInZform( createdDate);
								oDiagnosticReport.issued=formatDateInZform( createdDate);
							}
							
						}
						else
						{
							oDiagnosticReport.effectiveDateTime=formatDateInZform( createdDate);
							oDiagnosticReport.issued=formatDateInZform( createdDate);
						}
						
					}
					else
					{
						if(oDiagnosticReport.effectiveDateTime=="")
						{
							oDiagnosticReport.effectiveDateTime=formatDateInZform(createdDate);
						}
						if(oDiagnosticReport.issued=="")
						{
							oDiagnosticReport.issued=formatDateInZform(createdDate);
						}
						oDiagnosticReport.result=null;
						
					}
					if(oDiagnosticReport.performer=="")
					{
						oDiagnosticReport.performer={"reference":"Organization/"+oTrackedEntity.orgUnit};
					}
					listDiagnosticReportExtracted.push(oDiagnosticReport);
				}
		
			}
		}//End for IteratorEntity to search for Observation
		
		
		for(var i=0;i<listPractitionerExtrated.length;i++)
		{
			listEntityObject.push(listPractitionerExtrated[i]);
		}
		for(var i=0;i<listPatientExtrated.length;i++)
		{
			listEntityObject.push(listPatientExtrated[i]);
		}
		for(var i=0;i<listSpecimenExtracted.length;i++)
		{
			listEntityObject.push(listSpecimenExtracted[i]);
		}
		for(var i=0;i<listConditionExtracted.length;i++)
		{
			listEntityObject.push(listConditionExtracted[i]);
		}
		for(var i=0;i<listDiagnosticOrderExtracted.length;i++)
		{
			listEntityObject.push(listDiagnosticOrderExtracted[i]);
		}
		for(var i=0;i<listObservationExtracted.length;i++)
		{
			listEntityObject.push(listObservationExtracted[i]);
		}
		for(var i=0;i<listDiagnosticReportExtracted.length;i++)
		{
			listEntityObject.push(listDiagnosticReportExtracted[i]);
		}
		for(var i=0;i<listResourceListExtracted.length;i++)
		{
			listEntityObject.push(listResourceListExtracted[i]);
		}
		//console.log(listSpecimenExtracted);
		//console.log("#######################################################################");
		return listEntityObject;
	}
	//Transform the list of Fhir Resources to a Bundle of type collection
	function BuildBundleResponse(listOrganisation,listPatient,listPractitioner,listSpecimen,listCondition,listDiagnosticOrder,listObservation,listDiagnosticReport,listResourceList,listBasic)
	{
		var oBundle={};
		oBundle= Object.create(Bundle);
		oBundle.resourceType="Bundle";
		//Bundle ID, Build the BundleId : Id Of one of the organization +totalnumber of the resource within the bundle
		var totalNumberOfResource=listOrganisation.length+listPatient.length+listPractitioner.length;
		totalNumberOfResource+=listSpecimen.length+listDiagnosticOrder.length+listObservation.length+listDiagnosticReport.length+listResourceList.length+listBasic.length;
		
		var idBundle="";
		if(listOrganisation.length>0)//Most used when building bundle from DHIS2
		{
			idBundle=listOrganisation[0].id+totalNumberOfResource;
		}
		else //Used when building bundle from CSV
		{
			idBundle="datasource-"+new Date().toJSON();
			var tempResult=idBundle.replace(/:/g,"");//replace all occurence of : by ""
			idBundle=tempResult.replace(".","");
		}
		oBundle.id=idBundle;
		var lastlastUpdated=new Date().toJSON();
		oBundle.meta={"lastUpdated":formatDateInZform(lastlastUpdated)};
		oBundle.type="collection";
		oBundle.total=totalNumberOfResource;
		var listOfEntries=[];
		//For each Fhir resource object, assign them in the entries collections
		for (var i=0;i<listOrganisation.length;i++)
		{
			var oEntry=Object.create(Entry);
			oEntry.resource=listOrganisation[i];
			oEntry.search.mode="match";
			listOfEntries.push(oEntry);
			
		}
		for (var i=0;i<listPractitioner.length;i++)
		{
			var oEntry=Object.create(Entry);
			oEntry.resource=listPractitioner[i];
			oEntry.search.mode="match";
			listOfEntries.push(oEntry);
			
		}
		for (var i=0;i<listPatient.length;i++)
		{
			var oEntry=Object.create(Entry);
			oEntry.resource=listPatient[i];
			oEntry.search.mode="match";
			listOfEntries.push(oEntry);
		}
		for (var i=0;i<listSpecimen.length;i++)
		{
			var oEntry=Object.create(Entry);
			oEntry.resource=listSpecimen[i];
			oEntry.search.mode="match";
			listOfEntries.push(oEntry);
		}
		for (var i=0;i<listCondition.length;i++)
		{
			var oEntry=Object.create(Entry);
			oEntry.resource=listCondition[i];
			oEntry.search.mode="match";
			listOfEntries.push(oEntry);
		}
		for (var i=0;i<listDiagnosticOrder.length;i++)
		{
			var oEntry=Object.create(Entry);
			oEntry.resource=listDiagnosticOrder[i];
			oEntry.search.mode="match";
			listOfEntries.push(oEntry);
		}
		for (var i=0;i<listObservation.length;i++)
		{
			var oEntry=Object.create(Entry);
			oEntry.resource=listObservation[i];
			oEntry.search.mode="match";
			listOfEntries.push(oEntry);
		}
		for (var i=0;i<listDiagnosticReport.length;i++)
		{
			var oEntry=Object.create(Entry);
			oEntry.resource=listDiagnosticReport[i];
			oEntry.search.mode="match";
			listOfEntries.push(oEntry);
		}
		for (var i=0;i<listResourceList.length;i++)
		{
			var oEntry=Object.create(Entry);
			oEntry.resource=listResourceList[i];
			oEntry.search.mode="match";
			listOfEntries.push(oEntry);
		}
		for (var i=0;i<listBasic.length;i++)
		{
			var oEntry=Object.create(Entry);
			oEntry.resource=listBasic[i];
			oEntry.search.mode="match";
			listOfEntries.push(oEntry);
		}
		oBundle.entry=listOfEntries;
		return oBundle;
	} 
  
	//ToDo: Delete
	getEntityinstances=function(req, res, next)
	{
		console.log(new Date().toJSON()+" => Received request for tracked-entity instances");
		entityAPI.GetAllOrganisationUnits(function(listOrgUnits)
		{
			
			
			var fhirOrganizationlist=[];
			var fhirPatientList=[];
			var fhirPractitionerList=[];
			var fhirSpecimenList=[];
			var fhirDiagnosticOrderList=[];
			var fhirObservationList=[];
			var fhirDiagnosticReport=[];
			var fhirListOfResource=[];
			var reflist=[];
			//transform to list of orgunit to a list of Fhir Organization resource
			fhirOrganizationlist=BuildOrganizationHierarchy(listOrgUnits.organisationUnits);
			var listOfOrgUnitId=[]
			for(var i=0; i<fhirOrganizationlist.length;i++)
			{
				listOfOrgUnitId.push(fhirOrganizationlist[i].id);
			}
			
			entityAPI.GetTrackedEntityInstancesFromOrgunitList(listOfOrgUnitId,function(listTrackedEntities){
						
						//console.log(listTrackedEntities);
						if(listTrackedEntities.trackedEntityInstances.length>0)
						{
							//console.log("orgunit: "+id);
							//console.log(listTrackedEntities);
							for(var j=0;j<listTrackedEntities.trackedEntityInstances.length;j++)
							{
								//var jsonText=JSON.stringify(listTrackedEntities.trackedEntityInstances[j]);
								//var oEntity=JSON.parse(jsonText);
								var entityObject=GetAssociatedFhirResource(listTrackedEntities.trackedEntityInstances[j]);
								if(entityObject!=null)
								{
									if (entityObject.resourceType =="Patient")
									{
										fhirPatientList.push(entityObject);
										continue;
										//console.log(entityObject);
									}
									//console.log(fhirPatientList);
									
									else if (entityObject.resourceType =="Practitioner")
									{
										fhirPractitionerList.push(entityObject);
										continue;
									}
									else if (entityObject.resourceType =="Specimen")
									{
										fhirSpecimenList.push(entityObject);
										continue;
									}
									else if (entityObject.resourceType =="DiagnosticOrder")
									{
										//fhirSpecimenList.push(entityObject);
										fhirDiagnosticOrderList.push(entityObject);
										continue;
									}
									else if (entityObject.resourceType =="Observation")
									{
										//fhirSpecimenList.push(entityObject);
										fhirObservationList.push(entityObject);
										continue;
									}
									else if (entityObject.resourceType =="DiagnosticReport")
									{
										//fhirSpecimenList.push(entityObject);
										fhirDiagnosticReport.push(entityObject);
										continue;
									}
								}
								
							}//for EntityInstances
							//console.log(JSON.stringify(fhirDiagnosticReport));
							//extract Patient
							//console.log("orgunit: "+id);
							//reflist=fhirPatientList;
						}
						//Add All the resource in the table
					var oBundle={};
					oBundle=BuildBundleResponse(fhirOrganizationlist,fhirPatientList,fhirPractitionerList,fhirSpecimenList,fhirDiagnosticOrderList,
					fhirObservationList,fhirDiagnosticReport);
					//console.log(oBundle);
					//document.body.innerHTML = JSON.stringify(oBundle);
					//document.write(JSON.stringify(oBundle));
					//console.log(JSON.stringify(oBundle));
					res.json(oBundle);
					return res.end();
					//document.body. = JSON.stringify(oBundle);
					});//GetTrackedEntityInstances
		});
	  
	}
	//Get the list of events by their entityinstanceId
	function getListEvents(listOfEvents,entityInstanceId)
	{
		listFoundEvents=[];
		for(var i=0;i<listOfEvents.length;i++)
		{
			var oEvent =listOfEvents[i];
			if(oEvent.trackedEntityInstance==entityInstanceId)
			{
				listFoundEvents.push(oEvent);
			}
		}
		return listFoundEvents;
	}
	//Receive http request and return the Fhir Bundle collection from Trackers
	getTrackedEntities=function(progAndStagesTracked,req, res, next)
	{
		console.log(new Date().toJSON()+" => Received request for tracked-entity instances");
		//console.log(progAndStagesTracked);
		var listOfProgramId=[]
			//listOfProgramId.push(progAndStagesTracked[i].id);
		//Return all organizations prior to do other process. All resource must be located within the organization
		entityAPI.GetAllOrganisationUnitsCallbakListPrograms(progAndStagesTracked,function(listOrgUnits)
		{
			var fhirOrganizationlist=[];
			var fhirPatientList=[];
			var fhirPatientGlobalList=[];
			var fhirPractitionerList=[];
			var fhirSpecimenList=[];
			var fhirConditionList=[];
			var fhirDiagnosticOrderList=[];
			var fhirObservationList=[];
			var fhirDiagnosticReport=[];
			var fhirResourceList=[];
			var fhirListOfResource=[];
			var reflist=[];
			//transform to list of orgunit to a list of Fhir Organization resource
			fhirOrganizationlist=BuildOrganizationHierarchy(listOrgUnits[0].organisationUnits);
			var listOfOrgUnitId=[];
			//var listOfOrgUnitId=[];
			for(var i=0; i<fhirOrganizationlist.length;i++)
			{
				listOfOrgUnitId.push(fhirOrganizationlist[i].id);
			}
			//var tempListOfProgramIds=listOrgUnits[1];
			//Retreive list of concerned program from callback
			var progAndStagesTracked=listOrgUnits[1];
			//Retreive now programs and stages concerned
			//For each program get the metadata information
			for(var i=0;i<progAndStagesTracked.length;i++)
			{
				var programId=progAndStagesTracked[i].id;
				var listOfStageId=[];
				listOfStageId=progAndStagesTracked[i].stages;
				//if program has at least one stage get the stage information
				if(listOfStageId.length>0)
				{
					var programStageIds="";
					for(var iteratorStageId=0;iteratorStageId<listOfStageId.length;iteratorStageId++)
					{
						if(iteratorStageId==0)
						{
							programStageIds+=listOfStageId[iteratorStageId];
						}
						else
						{
							programStageIds+=","+listOfStageId[iteratorStageId];
						}
					}//end for
					var tempParams=[];
					//Get ProgramStage info for each programId and stageIds
					entityAPI.getProgramStageMetaDataInfo(listOfStageId,programId,[],function(resStages)
					{
						var  entryIterator=0;
						var dataElementIds="";
						var listoProgramStages=[];
						//Loop througth the resStages[0] to retreive stages informations: Name and dataelements list
						for(var countProgStages=0;countProgStages<resStages[0].programStages.length;countProgStages++)
						{
							//Object build to contain stageId information
							var oProgramStage={
								"id":"",
								"name":"",
								"dataElement":[]
							};
							oProgramStage.id=resStages[0].programStages[countProgStages].id;
							oProgramStage.name=resStages[0].programStages[countProgStages].name;
							//Check if dataelements are collected at this stage and get only Id information
							//displayName attribute is not available
							for(var countProgDataElement=0;countProgDataElement<resStages[0].programStages[countProgStages].programStageDataElements.length;countProgDataElement++)
							{
								//Object build to contains DataElement Information
								var oDataElement={
								"id":"",
								"displayName":""
								};
								//console.log(resStages.programStages[countProgStages].programStageDataElements[countProgDataElement].dataElement.id);
								oDataElement.id=resStages[0].programStages[countProgStages].programStageDataElements[countProgDataElement].dataElement.id;
								oProgramStage.dataElement.push(oDataElement);
								if(entryIterator==0)
								{
									dataElementIds+=resStages[0].programStages[countProgStages].programStageDataElements[countProgDataElement].dataElement.id;
								}
								else
								{
									dataElementIds+=","+resStages[0].programStages[countProgStages].programStageDataElements[countProgDataElement].dataElement.id;
								}
								entryIterator++;
								
							}
							//Array that contains all stages extracted from stageId
							listoProgramStages.push(oProgramStage);
						}//end for resStages 0
						
						var programId=resStages[1];//Instead of progStage we use programId here
						//Instead of List of attribute fields we use listOfProgramStages Object
						//Get data element name from their Ids metadata 
						//Param: list of program stages contains data Element object without names
						entityAPI.getDataElementsMetaDataInfo(dataElementIds,programId,listoProgramStages,[],function(resDataElements)
						{
							var listoDataElements=[];
							listoProgramStages=resDataElements[2];
							//Loop througth the data elements metadata to have their names
							for(var countDataElement=0;countDataElement<resDataElements[1].dataElements.length;countDataElement++)
							{
								var oItemToSearch=resDataElements[1].dataElements[countDataElement].id;
								var foundItemToSearch=false;
								//Search for the dataElement Id in  the progStage list and update their displayName attribute
								for(var iteratorProgStage=0;iteratorProgStage<listoProgramStages.length;iteratorProgStage++)
								{
									for(var iteratorDataElement=0;iteratorDataElement<listoProgramStages[iteratorProgStage].dataElement.length;iteratorDataElement++)
									{
										if(listoProgramStages[iteratorProgStage].dataElement[iteratorDataElement].id==oItemToSearch)
										{
											listoProgramStages[iteratorProgStage].dataElement[iteratorDataElement].displayName=resDataElements[1].dataElements[countDataElement].displayName;
											foundItemToSearch=true;
											break;
										}
									}
								}
							}
							//get the events associated to all stages of a program Id
							//The event associated to stages contains the data collected from that stage. Not the dataElement metadata
							entityAPI.getAllProgramEvents(programId,listoProgramStages,function(reslistOfEvents)
							{
								var listOfEvents=reslistOfEvents[0];
								var concernedProgramStagesToTrack=[];
								var listoProgramStages=reslistOfEvents[1];
								var listObjectEvents=[];
								//console.log(listoProgramStages);
								for(var iteratorProgramStage=0;iteratorProgramStage<listoProgramStages.length;iteratorProgramStage++)
								{
									concernedProgramStagesToTrack.push(listoProgramStages[iteratorProgramStage].id);
								}
								
								for (var iteratorEvents=0;iteratorEvents<reslistOfEvents[0].events.length;iteratorEvents++)
								{
									//Check if the event match the programStage to track
									var itemFound=false;
									for(var counter =0;counter<concernedProgramStagesToTrack.length;counter++)
									{
										if(concernedProgramStagesToTrack[counter]==reslistOfEvents[0].events[iteratorEvents].programStage)
										{
											itemFound=true;
											break;
										}
									}
									if(itemFound==true)
									{
										//Create an object of type event to keep all data and information
										var oEvent={
										"id":"",
										"programStageId":"",
										"programStageName":"",
										"trackedEntityInstance":"",
										"orgUnit":"",
										"eventDate":"",
										"dataValues":[]									
										};
										//Pull only the event that has been porperly created since all event must have the date of creation
										//if not the event is ignored
										if(typeof(reslistOfEvents[0].events[iteratorEvents].eventDate)!="undefined")
										{
											oEvent.id=reslistOfEvents[0].events[iteratorEvents].event;
											oEvent.programStageId=reslistOfEvents[0].events[iteratorEvents].programStage;
											oEvent.trackedEntityInstance=reslistOfEvents[0].events[iteratorEvents].trackedEntityInstance;
											oEvent.eventDate=reslistOfEvents[0].events[iteratorEvents].eventDate;
											oEvent.orgUnit=reslistOfEvents[0].events[iteratorEvents].orgUnit;
											//Assign the program stageName to the event object
											for(var counter=0;counter<listoProgramStages.length;counter++)
											{
												//First find the program stages
												if(listoProgramStages[counter].id==reslistOfEvents[0].events[iteratorEvents].programStage)
												{
													oEvent.programStageName=listoProgramStages[counter].name;
												}
											}
											//Assign the data elements values associated to the event 
											for(var iteratorDataValue=0;iteratorDataValue<reslistOfEvents[0].events[iteratorEvents].dataValues.length;iteratorDataValue++)
											{
												//find  the name of the dataElements
												var oEventDataValues={
												"dataElementId":"",
												"displayName":"",
												"value":""
												};
												var oDataElementToSearch=reslistOfEvents[0].events[iteratorEvents].dataValues[iteratorDataValue].dataElement;
												var dataElementFound=false;
												for(var counter=0;counter<listoProgramStages.length;counter++)
												{
													//First find the program stages
													if(listoProgramStages[counter].id==reslistOfEvents[0].events[iteratorEvents].programStage)
													{
														//oEvent.programStageName=listoProgramStages[counter].name;
														//then fin the dataElements that match with
														
														for(var iteratorDataElement=0;iteratorDataElement<listoProgramStages[counter].dataElement.length;iteratorDataElement++)
														{
															if(listoProgramStages[counter].dataElement[iteratorDataElement].id==oDataElementToSearch)
															{
																oEventDataValues.dataElementId=oDataElementToSearch;
																oEventDataValues.displayName=listoProgramStages[counter].name+"|"+listoProgramStages[counter].dataElement[iteratorDataElement].displayName;
																oEventDataValues.value=reslistOfEvents[0].events[iteratorEvents].dataValues[iteratorDataValue].value;
																dataElementFound=true;
																break;
															}
														}
													}
													if(dataElementFound==true)
													{
														break;
													}
												}
												oEvent.dataValues.push(oEventDataValues);
												
											}//End for iteraror Datavalues
											
											//Event related to the observation are special, the value assigned to the eventdate 
											//does not come from data element but are associate to the eventdate during the creation
											if(entityAPI.getObservationAttributesMapping().issued!="" || entityAPI.getObservationAttributesMapping().effectiveDateTime!="")
											{
												var listAttributeName= entityAPI.getObservationAttributesMapping().issued.split("|");
												//console.log(listAttributeName);
												if(listAttributeName.length>=1)
												{
													//console.log(oEvent.programStageName+"=="+listAttributeName[0]);
													if(oEvent.programStageName==listAttributeName[0])
													{
														var oEventDataValuesEventDate={
														"dataElementId":"",
														"displayName":"",
														"value":""
														};
														oEventDataValuesEventDate.dataElementId="0000000";
														oEventDataValuesEventDate.displayName=entityAPI.getObservationAttributesMapping().issued;
														oEventDataValuesEventDate.value=oEvent.eventDate;
														oEvent.dataValues.push(oEventDataValuesEventDate);
														//listObjectEvents.push(oEvent);
													}
												}
												//Event related to the observation are special, the value assigned to the eventdate 
												//does not come from data element but are associate to the eventdate during the creation
												listAttributeName= entityAPI.getObservationAttributesMapping().effectiveDateTime.split("|");
												if(listAttributeName.length>=1)
												{
													if(oEvent.programStageName==listAttributeName[0])
													{
														var oEventDataValuesEventDate={
														"dataElementId":"",
														"displayName":"",
														"value":""
														};
														oEventDataValuesEventDate.dataElementId="0000000";//use this dataElement Id since they are externally created
														oEventDataValuesEventDate.displayName=entityAPI.getObservationAttributesMapping().effectiveDateTime;
														oEventDataValuesEventDate.value=oEvent.eventDate;
														oEvent.dataValues.push(oEventDataValuesEventDate);
														//listObjectEvents.push(oEvent);
													}
												}
												
											}
											//Since Practitioner object does not have any creation date, the metadata "last_updated" 
											//field has been used to get the event related to the date of creation
											if(entityAPI.getPractitionerAttributesMapping().meta_lastUpdated!="")
											{
												listAttributeName= entityAPI.getPractitionerAttributesMapping().meta_lastUpdated.split("|");
												if(listAttributeName.length>=1)
												{
													if(oEvent.programStageName==listAttributeName[0])
													{
														var oEventDataValuesEventDate={
														"dataElementId":"",
														"displayName":"",
														"value":""
														};
														oEventDataValuesEventDate.dataElementId="0000000";
														oEventDataValuesEventDate.displayName=entityAPI.getPractitionerAttributesMapping().meta_lastUpdated;
														oEventDataValuesEventDate.value=oEvent.eventDate;
														oEvent.dataValues.push(oEventDataValuesEventDate);
														//listObjectEvents.push(oEvent);
													}
												}
										  }
											
										listObjectEvents.push(oEvent);
										
										}//End If typeof event
										//console.log(oEvent.eventDate);
										
									}//End if founditem
									
								}//end for reslistOfEvents[0]
								
							
							//Returns tracked Entity instance for the specified list of orgUnits and program Id
							//Params: Replace list of Stages by the list of object Events
							entityAPI.GetTrackedEntityInstancesFromOrgunitListAndProgramIdAndKeepDataElementsTrack(listOfOrgUnitId,programId,listObjectEvents,listoDataElements,function(_listTrackedEntities)
							{
								
								var listIdAttributeToRequest="";
								var listIdDataElementToRequest="";
								//Check Options set to resolve ref value
								//Create list Id attribute and data element with option set for reference
								if(listAttributeWithOptionSetValues.length>0)
								{
									for(var iteratorAttribute=0;iteratorAttribute<listAttributeWithOptionSetValues.length;iteratorAttribute++)
									{
										
										if(listAttributeWithOptionSetValues[iteratorAttribute].type=="attribute")
										{
											if(iteratorAttribute==0)
											{
												listIdAttributeToRequest=listAttributeWithOptionSetValues[iteratorAttribute].id;
											}
											else
											{
												listIdAttributeToRequest+=","+listAttributeWithOptionSetValues[iteratorAttribute].id;
											}
										}
									}
									for(var iteratorAttribute=0;iteratorAttribute<listAttributeWithOptionSetValues.length;iteratorAttribute++)
									{
										
										if(listAttributeWithOptionSetValues[iteratorAttribute].type=="element")
										{
											if(iteratorAttribute==0)
											{
												listIdDataElementToRequest=listAttributeWithOptionSetValues[iteratorAttribute].id;
											}
											else
											{
												listIdDataElementToRequest+=","+listAttributeWithOptionSetValues[iteratorAttribute].id;
											}
										}
									}
								}
								
								//use the options set metadata to have value instead of the code
								if(listIdAttributeToRequest!="" || listIdDataElementToRequest!="")
								{
									entityAPI.getOptionSetFromAttribute(listIdAttributeToRequest,listIdDataElementToRequest,_listTrackedEntities,function(listOptions)
									{
										//console.log(listOptions);
										var listOptionSets=listOptions[0].options;
										//console.log(listOptionSets);
										var listTrackedEntities=listOptions[1];
										var listObjectEvents=listTrackedEntities[2];
										if(listTrackedEntities[0].trackedEntityInstances.length>0)
										{
											for(var j=0;j<listTrackedEntities[0].trackedEntityInstances.length;j++)
											{
												//Get List of events associated to the TEI
												var listObjectEventsAssociated=getListEvents(listObjectEvents,listTrackedEntities[0].trackedEntityInstances[j].trackedEntityInstance);
												
												var tempListOfTrackedEntity=[];
												tempListOfTrackedEntity.push(listTrackedEntities[0].trackedEntityInstances[j]);
												//Get Fhir related resources extracted from tracked entities and related resources
												var listEntityObject=GetAssociatedFhirResourceFromMappingAndEventAndOptionSet(tempListOfTrackedEntity,
												listObjectEventsAssociated,listOptionSets);
												//console.log(listEntityObject);
												for(var iteratorEntityExtracted=0;iteratorEntityExtracted<listEntityObject.length;iteratorEntityExtracted++)
												{
													
													var entityObject=listEntityObject[iteratorEntityExtracted];
													if(entityObject!=null)
													{
														if (entityObject.resourceType =="Patient")
														{
															var indexPatient=getIndexOfFhirResourceById(fhirPatientList,entityObject.id);
															//Check if the patient is already in the list if not add, else update identifier list
															if(indexPatient<0)
															{
																fhirPatientList.push(entityObject);
															}
															else
															{
																for(var iteratorIdentifier=0;iteratorIdentifier<entityObject.identifier.length;iteratorIdentifier++)
																{
																	var oNewIdentifier=entityObject.identifier[iteratorIdentifier];
																	var identifierExist=false;
																	for(iterator=0;iterator<fhirPatientList[indexPatient].identifier.length;iterator++)
																	{
																		if(fhirPatientList[indexPatient].identifier[iterator].system==oNewIdentifier.system
																		&& fhirPatientList[indexPatient].identifier[iterator].value==oNewIdentifier.value)
																		{
																			identifierExist=true;
																			break;
																		}
																		else
																		{
																			continue;
																		}
																	}
																	if(identifierExist==false)
																	{
																		fhirPatientList[indexPatient].identifier.push(oNewIdentifier);
																	}
																	
																}
															}
															
															continue;;
														}
														//console.log(fhirPatientList);
														
														else if (entityObject.resourceType =="Practitioner")
														{
															
															fhirPractitionerList.push(entityObject);
															continue;
														}
														else if (entityObject.resourceType =="Specimen")
														{
															fhirSpecimenList.push(entityObject);
															continue;
														}
														else if (entityObject.resourceType =="Condition")
														{
															fhirConditionList.push(entityObject);
															continue;
														}
														else if (entityObject.resourceType =="DiagnosticOrder")
														{
															//fhirSpecimenList.push(entityObject);
															fhirDiagnosticOrderList.push(entityObject);
															continue;
														}
														else if (entityObject.resourceType =="Observation")
														{
															//fhirSpecimenList.push(entityObject);
															fhirObservationList.push(entityObject);
															continue;
														}
														else if (entityObject.resourceType =="DiagnosticReport")
														{
															//fhirSpecimenList.push(entityObject);
															fhirDiagnosticReport.push(entityObject);
															continue;
														}
														else if (entityObject.resourceType =="List")
														{
															//fhirSpecimenList.push(entityObject);
															fhirResourceList.push(entityObject);
															continue;
														}
													}
												
												
												}
												//console.log(fhirSpecimenList);
												
											}//for EntityInstances
											//
										}//End if listTrackedEntities
										//get Optionset associated ressource
										var fhirResourceBasic=getAssociatedFhirResourceFromOptionSets(listOptionSets);
										//console.log(fhirBasicList);
										//Add All the resource in the table
										var oBundle={};
										oBundle=BuildBundleResponse(fhirOrganizationlist,fhirPatientList,fhirPractitionerList,fhirSpecimenList,fhirConditionList,fhirDiagnosticOrderList,
										fhirObservationList,fhirDiagnosticReport,fhirResourceList,fhirResourceBasic);
										//############################ Optional ##########################################
										//After building the fhir resource bundle, the app generates the CSV file with Min dataset 
										//the csv file is intended to be downloaded, filled by facilities and then uploaded
										//Generated populated CSV file
										var listAllAttributeMapping=getListAllMappingAttributes();
										//console.log(listAllAttributeMapping);
										var programName=progAndStagesTracked[0].name;
										//Generate the CSV file from Json collection of Fhir resources
										entityAPI.generateCSVFileWithCaseData(fhirPatientList,fhirOrganizationlist,patientAttributesMapping,listAllAttributeMapping,programName,programName);
										//###############################################################################
										res.json(oBundle);
										
										return res.end();
									});
								}//End if listIdAttributeToRequest
								else //If the attribute and data element does not have options set properties
								{
									var listTrackedEntities=_listTrackedEntities;
									//console.log(listOptions);
									var listObjectEvents=listTrackedEntities[2];
									//console.log("---------------listOfEvents------------");
									//console.log(listObjectEvents);
									if(listTrackedEntities[0].trackedEntityInstances.length>0)
									{
										for(var j=0;j<listTrackedEntities[0].trackedEntityInstances.length;j++)
										{
											//Get List of events associated to the TEI
											var listObjectEventsAssociated=getListEvents(listObjectEvents,listTrackedEntities[0].trackedEntityInstances[j].trackedEntityInstance);
											var tempListOfTrackedEntity=[];
											tempListOfTrackedEntity.push(listTrackedEntities[0].trackedEntityInstances[j]);
											//Get Fhir related resources extracted from tracked entities and related resources
											var listEntityObject=GetAssociatedFhirResourceFromMappingAndEvent(tempListOfTrackedEntity,
											listObjectEventsAssociated);
											for(var iteratorEntityExtracted=0;iteratorEntityExtracted<listEntityObject.length;iteratorEntityExtracted++)
											{
												
												var entityObject=listEntityObject[iteratorEntityExtracted];
												if(entityObject!=null)
												{
													if (entityObject.resourceType =="Patient")
													{
														var indexPatient=getIndexOfFhirResourceById(fhirPatientList,entityObject.id);
														if(indexPatient<0)
														{
															fhirPatientList.push(entityObject);
														}
														else
														{
															for(var iteratorIdentifier=0;iteratorIdentifier<entityObject.identifier.length;iteratorIdentifier++)
															{
																var oNewIdentifier=entityObject.identifier[iteratorIdentifier];
																var identifierExist=false;
																for(iterator=0;iterator<fhirPatientList[indexPatient].identifier.length;iterator++)
																{
																	if(fhirPatientList[indexPatient].identifier[iterator].system==oNewIdentifier.system
																	&& fhirPatientList[indexPatient].identifier[iterator].value==oNewIdentifier.value)
																	{
																		identifierExist=true;
																		break;
																	}
																	else
																	{
																		continue;
																	}
																}
																if(identifierExist==false)
																{
																	fhirPatientList[indexPatient].identifier.push(oNewIdentifier);
																}
																
															}
														}
														
														continue;;
													}
													//console.log(fhirPatientList);
													
													else if (entityObject.resourceType =="Practitioner")
													{
														
														fhirPractitionerList.push(entityObject);
														continue;
													}
													else if (entityObject.resourceType =="Specimen")
													{
														fhirSpecimenList.push(entityObject);
														continue;
													}
													else if (entityObject.resourceType =="Condition")
													{
														fhirConditionList.push(entityObject);
														continue;
													}
													else if (entityObject.resourceType =="DiagnosticOrder")
													{
														//fhirSpecimenList.push(entityObject);
														fhirDiagnosticOrderList.push(entityObject);
														continue;
													}
													else if (entityObject.resourceType =="Observation")
													{
														//fhirSpecimenList.push(entityObject);
														fhirObservationList.push(entityObject);
														continue;
													}
													else if (entityObject.resourceType =="DiagnosticReport")
													{
														//fhirSpecimenList.push(entityObject);
														fhirDiagnosticReport.push(entityObject);
														continue;
													}
													else if (entityObject.resourceType =="List")
													{
														//fhirSpecimenList.push(entityObject);
														fhirResourceList.push(entityObject);
														continue;
													}
												}
											
											
											}
											//console.log(fhirSpecimenList);
											
										}//for EntityInstances
										//
									}
									//Add All the resource in the table
									var oBundle={};
									oBundle=BuildBundleResponse(fhirOrganizationlist,fhirPatientList,fhirPractitionerList,fhirSpecimenList,fhirConditionList,fhirDiagnosticOrderList,
									fhirObservationList,fhirDiagnosticReport,fhirResourceList,[]);
									//############################ Optional ##########################################
									//After building the fhir resource bundle, the app generates the CSV file with Min dataset 
									//the csv file is intended to be downloaded, filled by facilities and then uploaded
									//Generated populated CSV file
									var listAllAttributeMapping=getListAllMappingAttributes();
									//console.log(listAllAttributeMapping);
									var programName=progAndStagesTracked[0].name;
									entityAPI.generateCSVFileWithCaseData(fhirPatientList,fhirOrganizationlist,patientAttributesMapping,listAllAttributeMapping,programName,programName);
									//###############################################################################
									res.json(oBundle);
									return res.end();
								}							
								
								});//GetTrackedEntityInstancesFromOrgunitListAndProgramIdAndKeepDataElementsTrack
							
							});//getAllProgramEvents

						});//getDataElementsMetaDataInfo
						
					});//getProgramStageMetaDataInfo
					
				}
				//if the program does not have any stage just process the entity and related attributes
				else
				{
					entityAPI.GetTrackedEntityInstancesFromOrgunitListAndProgramId(listOfOrgUnitId,programId,listOfStageId,function(listTrackedEntities)
					{
						
						//console.log(listTrackedEntities[0]);
						
						
						if(listTrackedEntities[0].trackedEntityInstances.length>0)
						{
							
							for(var j=0;j<listTrackedEntities[0].trackedEntityInstances.length;j++)
							{
								
								var listEntityObject=GetAssociatedFhirResourceFromMapping(listTrackedEntities[0].trackedEntityInstances[j]);
								for(var iteratorEntityExtracted=0;iteratorEntityExtracted<listEntityObject.length;iteratorEntityExtracted++)
								{
									var entityObject=listEntityObject[iteratorEntityExtracted];
									if(entityObject!=null)
									{
										if (entityObject.resourceType =="Patient")
										{
											fhirPatientList.push(entityObject);
											//listTrackedEntities[3].push(entityObject);
											continue;
											//console.log(entityObject);
										}
										//console.log(fhirPatientList);
										
										else if (entityObject.resourceType =="Practitioner")
										{
											fhirPractitionerList.push(entityObject);
											continue;
										}
										else if (entityObject.resourceType =="Specimen")
										{
											fhirSpecimenList.push(entityObject);
											continue;
										}
										else if (entityObject.resourceType =="DiagnosticOrder")
										{
											//fhirSpecimenList.push(entityObject);
											fhirDiagnosticOrderList.push(entityObject);
											continue;
										}
										else if (entityObject.resourceType =="Observation")
										{
											//fhirSpecimenList.push(entityObject);
											fhirObservationList.push(entityObject);
											continue;
										}
										else if (entityObject.resourceType =="DiagnosticReport")
										{
											//fhirSpecimenList.push(entityObject);
											fhirDiagnosticReport.push(entityObject);
											continue;
										}
									}
								
								}
								
								
							}//for EntityInstances
							//
						}
						//Add All the resource in the table
					var oBundle={};
					oBundle=BuildBundleResponse(fhirOrganizationlist,fhirPatientList,fhirPractitionerList,fhirSpecimenList,fhirDiagnosticOrderList,
					fhirObservationList,fhirDiagnosticReport);
					//console.log(oBundle);
					//document.body.innerHTML = JSON.stringify(oBundle);
					//document.write(JSON.stringify(oBundle));
					//console.log(JSON.stringify(oBundle));
					res.json(oBundle);
					return res.end();
					//document.body. = JSON.stringify(oBundle);
					});//GetTrackedEntityInstances
		
				}
				
				
				
				
				
			}//End for progAndStagesTracked
		//console.log(fhirPatientGlobalList);
		});
		
		
	}
	
	function getMetaDataForLab(programeAndStages)
	{
		//first get the programs attributes
		
		for(var i=0;i<programeAndStages.length;i++)
		{
			var oProgAndStage=programeAndStages[i];
			
			entityAPI.getProgramMetaDataInfo(oProgAndStage.id,function(resProgram)
			{
				var listDisplayNameIdMapping=[];
				if(resProgram.programs.length==0)
				{
					console.log("The program "+oProgAndStage.id+" does not exist");
				}
				else
				{
					var oProgram=resProgram.programs[0];
					//console.log(oProgram);
					//console.log(oProgam.name);
					console.log("");
					console.log("######### Mapping information for program :"+oProgram.name+"##########");
					console.log("----------------------------------------------------------------------");
					var listFieldProgram=[];
					listFieldProgram.push('Program');
					listFieldProgram.push('Registering Unit');
					console.log("Attributes to map with corresponding fhir resources :");
					
					for(var j=0;j<oProgram.programTrackedEntityAttributes.length;j++)
					{
						var DiplayNameIdMapping={
							"id":"",
							"displayName":"",
							"type":"",
							"stage":""
							};
						
						var oAttributes=oProgram.programTrackedEntityAttributes[j];
						DiplayNameIdMapping.id=oAttributes.trackedEntityAttribute.id;
						var attributeCombinedName=oAttributes.displayName.split(oProgram.name);
						//console.log(attributeCombinedName);
						console.log(""+(j+1)+" - "+attributeCombinedName[1]);
						DiplayNameIdMapping.displayName=attributeCombinedName[1].trim();
						DiplayNameIdMapping.type="attribute";
						listFieldProgram.push(attributeCombinedName[1]);
						listDisplayNameIdMapping.push(DiplayNameIdMapping);
					}
					//console.log(listDisplayNameIdMapping);
					
					//var listProgramStages=oProgram.
					var listOfStages=oProgAndStage.stages;
					var stageIds="";
					for(var countStage=0;countStage<listOfStages.length;countStage++)
					{
						if(countStage==0)
						{
							stageIds+=listOfStages[countStage];
						}
						else
						{
							stageIds+=","+listOfStages[countStage];
						}
					}
					if(listOfStages.length>0)
					{
						//console.log("Stages of the programs:"+stageIds);
						
						
						entityAPI.getProgramStageMetaDataInfo(listOfStages,listFieldProgram,listDisplayNameIdMapping,function(resStages)
						{
							//console.log(resStages.programStages.programStageDataElements);
							//console.log(listFieldProgram);
							for(var countProgStages=0;countProgStages<resStages[0].programStages.length;countProgStages++)
							{
								var dictStage={
									"id":"",
									"name":""};
								//console.log(resStages[0].programStages[countProgStages]);
								var dataElementIds="";
								var entryIterator=0;
								var stageName=resStages[0].programStages[countProgStages].name;
								dictStage.id=resStages[0].programStages[countProgStages].id;
								dictStage.name= resStages[0].programStages[countProgStages].name;
								
								var executionDateLabel=resStages[0].programStages[countProgStages].executionDateLabel;
								var tempListFieldProgram=[];
								var listDisplayNameIdMapping=resStages[3];
								tempListFieldProgram=resStages[1];
								tempListFieldProgram.push(stageName+"|"+executionDateLabel);
								listFieldProgram=tempListFieldProgram;
								console.log(""+(j++)+" - "+stageName+"|"+executionDateLabel);
								//listFieldProgram.push(executionDateLabel);
								//console.log(stageName);
								var DiplayNameIdMapping={
									"id":"",
									"displayName":"",
									"type":"",
									"stage":""
								};
								DiplayNameIdMapping.id="eventDate";
								DiplayNameIdMapping.displayName=stageName+"|"+executionDateLabel;
								DiplayNameIdMapping.type="element";
								DiplayNameIdMapping.stage=dictStage.id;
								listDisplayNameIdMapping.push(DiplayNameIdMapping);
								
								for(var countProgDataElement=0;countProgDataElement<resStages[0].programStages[countProgStages].programStageDataElements.length;countProgDataElement++)
								{
									//console.log(resStages.programStages[countProgStages].programStageDataElements[countProgDataElement].dataElement.id);
									if(entryIterator==0)
									{
										dataElementIds+=resStages[0].programStages[countProgStages].programStageDataElements[countProgDataElement].dataElement.id;
									}
									else
									{
										dataElementIds+=","+resStages[0].programStages[countProgStages].programStageDataElements[countProgDataElement].dataElement.id;
									}
									entryIterator++;
									
								}
								//console.log(resStages.programStages[countProgStages].name);
								
								if(dataElementIds!="")
								{
									//console.log(stageName);
									//console.log(dataElementIds);
									entityAPI.getDataElementsMetaDataInfo(dataElementIds,dictStage,listFieldProgram,listDisplayNameIdMapping,function(resDataElements)
									{
										//console.log(stageName);
										//console.log(listFieldProgram);
										var tempNameStage=resDataElements[0].name;
										var tempIdStage=resDataElements[0].id;
										var tempListFieldProgram=resDataElements[2];
										var listDisplayNameIdMapping=[];
										listDisplayNameIdMapping=resDataElements[3];
										//console.log(resDataElements[1].dataElements);
										//console.log(resDataElements[1].dataElements);
										for(var countDataElement=0;countDataElement<resDataElements[1].dataElements.length;countDataElement++)
										{
											var DiplayNameIdMapping={
											"id":"",
											"displayName":"",
											"type":"",
											"stage":""
											};
											console.log(""+(j++)+" - "+tempNameStage+"|"+resDataElements[1].dataElements[countDataElement].displayName);
											DiplayNameIdMapping.id=resDataElements[1].dataElements[countDataElement].id;
											DiplayNameIdMapping.displayName=tempNameStage+"|"+resDataElements[1].dataElements[countDataElement].displayName.trim();
											DiplayNameIdMapping.type="element";
											DiplayNameIdMapping.stage=tempIdStage;
											tempListFieldProgram.push(tempNameStage+"|"+resDataElements[1].dataElements[countDataElement].displayName.trim());
											listDisplayNameIdMapping.push(DiplayNameIdMapping);
										}
										//console.log(listDisplayNameIdMapping);
										//console.log(tempListFieldProgram);
										entityAPI.writeJSONFile("FileMapping",JSON.stringify(listDisplayNameIdMapping));
										entityAPI.generateCSVFile(tempListFieldProgram,oProgram.name,oProgram.name);
										console.log("");
										console.log("-----------------------------------------------------");
										console.log("The file: "+oProgram.name+".csv successfully created!");
										console.log("Perform the maping and run the script again to proceed...");
									});
								}
							}
							
						});
					}
					
				}
				//console.log(oProgram);
				//res.send(oProgram);
			//console.log(listFieldProgram);
			});
			
		}
	}
	
	//**************************Function for csv datafile processing *********************//
	function checkIfTableContainsNonEmptyValues(table)
	{
		var minDataSet=entityAPI.getMinDataSetRecord();
		var compter=0;
		for(var iterator=0;iterator<table.length;iterator++)
		{
			if(table[iterator]!="")
			{
				compter++;
			}
		}
		if(compter>=minDataSet)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	function buildUniqueList(initialList,itemToAdd)
	{
		var found=false;
		for(iterator=0;iterator<initialList.length;iterator++)
		{
			if(initialList[iterator]==itemToAdd.trim())
			{
				found=true;
				break;
			}
		}
		if(found==false)
		{
			initialList.push(itemToAdd.trim());
		}
		return initialList;
	}
	function getOrgUnitFromListByName(listOfOrgUnit,nameToSearch)
	{
		var orgUnitFound=null;
		for(var iterator=0;iterator<listOfOrgUnit.length;iterator++)
		{
			//console.log(listOfOrgUnit[iterator].displayName+"=="+nameToSearch);
			if(listOfOrgUnit[iterator].displayName==nameToSearch)
			{
				orgUnitFound=listOfOrgUnit[iterator];
				break;
			}
		}
		return orgUnitFound;
	}
	function getListAssociatedPatient(_listExtractedPatient,patientId)
	{
		var listOfPatientFound=[];
		if(_listExtractedPatient.length>0)
		{
			for(var iteratorResource=0;iteratorResource< _listExtractedPatient.length;iteratorResource++)
			{
				var oPatient=_listExtractedPatient[iteratorResource];
				if(oPatient.id==patientId)
				{
					listOfPatientFound.push(oPatient);
				}
				
			}
		}
		return listOfPatientFound;
	}
	function getListAssociatedSpecimen(_listExtractedSpecimen,patientId,dateCollection)
	{
		var listOfSpecimenFound=[];
		if(_listExtractedSpecimen.length>0)
		{
			for(var iteratorResource=0;iteratorResource< _listExtractedSpecimen.length;iteratorResource++)
			{
				var oSpecimen=_listExtractedSpecimen[iteratorResource];
				var specimenPatientId=oSpecimen.subject.reference.split("/")[1];
				var specimenReceivedTime=oSpecimen.receivedTime;
				if(specimenPatientId==patientId && specimenReceivedTime==dateCollection)
				{
					listOfSpecimenFound.push(oSpecimen);
				}
				
			}
		}
		return listOfSpecimenFound;
	}
	function getIndexAssociatedSpecimenForPractitioner(_listExtractedSpecimen,practitionerNames)
	{
		var index=-1;
		for(var iteratorResource=0;iteratorResource< _listExtractedSpecimen.length;iteratorResource++)
		{
			var oSpecimen=_listExtractedSpecimen[iteratorResource];
			if(oSpecimen.collection!="")
			{
				//console.log(""+oSpecimen.collection.collector+"== "+practitionerNames+" :"+ (oSpecimen.collection.collector==practitionerNames));
				if (oSpecimen.collection.collector==practitionerNames)
				{
					index=iteratorResource;
					//console.log("index ="+index);
				}
			}
			
		}
		return index;
	}
	function getListAssociatedCondition(_listExtractedCondition,patientId,dateCollection)
	{
		var listOfConditionFound=[];
		if(_listExtractedCondition.length>0)
		{
			for(var iteratorResource=0;iteratorResource< _listExtractedCondition.length;iteratorResource++)
			{
				var oCondition=_listExtractedCondition[iteratorResource];
				var conditionPatientId=oCondition.patient.reference.split("/")[1];
				var conditionDateRecorded=oCondition.dateRecorded;
				if(conditionPatientId==patientId && conditionDateRecorded==dateCollection)
				{
					listOfConditionFound.push(oCondition);
				}
				
			}
		}
		return listOfConditionFound;
	}
	function getListAssociatedDiagnosticOrder(_listExtractedDiagnosticOrder,patientId,dateCollection)
	{
		var listOfDiagnosticOrderFound=[];
		if(_listExtractedDiagnosticOrder.length>0)
		{
			for(var iteratorResource=0;iteratorResource< _listExtractedDiagnosticOrder.length;iteratorResource++)
			{
				var oOrder=_listExtractedDiagnosticOrder[iteratorResource];
				var orderPatientId=oOrder.subject.reference.split("/")[1];
				var orderDateRecorded=oOrder.event[0].dateTime;
				if(orderPatientId==patientId && orderDateRecorded==dateCollection)
				{
					listOfDiagnosticOrderFound.push(oOrder);
				}
				
			}
		}
		return listOfDiagnosticOrderFound;
	}
	function getListAssociatedObservation(_listExtractedObservation,patientId,dateCollection)
	{
		var listOfObservationFound=[];
		if(_listExtractedObservation.length>0)
		{
			for(var iteratorResource=0;iteratorResource< _listExtractedObservation.length;iteratorResource++)
			{
				var oObservation=_listExtractedObservation[iteratorResource];
				var observationPatientId=oObservation.subject.reference.split("/")[1];
				var observationDateRecorded=oObservation.issued;
				if(observationPatientId==patientId && observationDateRecorded==dateCollection)
				{
					listOfObservationFound.push(oObservation);
				}
				
			}
		}
		return listOfObservationFound;
	}
	function getNbreResourceExtracted(resourceType,listMappedResourceExtracted)
	{
		var counter=0;
		for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
		{
			if(listMappedResourceExtracted[iteratorMappedResource].type==resourceType)
			{
				counter++;
			}
		}
		return counter;
	}
	function getOrganizationIdByName(orgName,listOrganizations)
	{
		var organizationId=-1;
		for(var iteratorResource=0;iteratorResource<listOrganizations.length;iteratorResource++)
		{
			if(listOrganizations[iteratorResource].displayName==orgName)
			{
				organizationId=listOrganizations[iteratorResource].id;
			}
		}
		return organizationId;
	}
	convertcsv2fhir=function (req, res, next)
	{
	  //var listCsvFile= entityAPI.getListOfFiles();
	  //console.log(listCsvFile);
	  var listResourceExtracted=[];
	  var listMappedResourceExtracted=[];
	  var filePath=sourceFileLocation;
		entityAPI.getListOfFiles(filePath,function (resfileName)
		{
		  //console.log(fileName);
		  
		  var fileName=resfileName;
		  console.log("Processing file : "+fileName);
			entityAPI.readCSVFile(fileName,function(dataFile)
			{
				
				var listOfAttributesPatient=getListOfPatientAttributeMapping();
				//console.log(listOfAttributesPatient);
				if(dataFile.length>0)
				{
					if(dataFile[0].length>0)
					{
						var listPatientAttributeIndex=[];
						var listManagingOrgAssociated=[];
						var nbreOfHeaderAttributes=0;
						for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
						{
							var itemToSearch=dataFile[0][iteratorHeader].trim();
							
							var resultChecking=checkAttributeInList(listOfAttributesPatient,itemToSearch);
							if(resultChecking==true)
							{
								nbreOfHeaderAttributes++;
								listPatientAttributeIndex.push(iteratorHeader);
							}
							//console.log(""+itemToSearch+" :"+resultChecking);
						}
						//console.log("header attribute :"+nbreOfHeaderAttributes+" patient attribute:"+listOfAttributesPatient.length);
						var minDataRecordSet=entityAPI.getMinDataSetRecord();
						if(nbreOfHeaderAttributes>=minDataRecordSet)
						{
							var listPatientExtrated=[];
							
							entityAPI.getAllOrgUnits("",[],dataFile,listMappedResourceExtracted, function(dataList)
							{
							//console.log("Tararaa!!");
							//console.log(dataFile);
							
							var dataFile=dataList[1];
							var listMappedResourceExtracted=dataList[2];
							var listManagingOrgToResolve=[];
							var listOrganizationUnits=[];
							//Transform the object list to json list
							//console.log(dataList[0].length);
							var entries=dataList[0];
							for(var iteratorEntry=0;iteratorEntry<entries.length;iteratorEntry++)
							{
								var oResource=entries[iteratorEntry].resource;
								var organisationUnit={
								"id":"",
								"displayName":""
								};
								organisationUnit.id=oResource.id;
								organisationUnit.displayName=oResource.name;
								listOrganizationUnits.push(organisationUnit);
							}
							//console.log(listOrganizationUnits);
							//now getAll Basic to allow attribute resolution
							
							entityAPI.getAllBasics("",[],listOrganizationUnits,dataFile,[],function(dataListWithBasics)
							{
								//console.log(dataListWithBasics[0].length);
								var listPatientExtracted=[];
								var listSpecimenExtracted=[];
								var listPractitionerExtracted=[];
								var listListResourceExtracted=[];
								var listBasicExtracted=[];
								var listConditionExtracted=[];
								var listDiagnosticOrderExtracted=[];
								var listObservationExtracted=[];
								
								var idCounter=new Date().getTime();
								var listOptions=[];
								var listOrganizationUnits=dataListWithBasics[1];
								var dataFile=dataListWithBasics[2];
								var listMappedResourceExtracted=[];
								//console.log(listMappedResourceExtracted);
								var entries=dataListWithBasics[0];
								for(var iteratorEntry=0;iteratorEntry<entries.length;iteratorEntry++)
								{
									var oResource=entries[iteratorEntry].resource;
									var oOption={
									"id":"",
									"code":"",
									"displayName":""
									};
									oOption.id=oResource.id;
									oOption.code=oResource.code.coding[0].code;
									oOption.displayName=oResource.code.text;
									listOptions.push(oOption);
								}
								//console.log(listOptions);
								for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
								{
									
									if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
									{
										var dicResourceExtracted={
										"type":"",
										"ligneIndex":"",
										"value":""
										};
										//console.log(dataFile[iteratorLigne]);
										//console.log("---------------------");
										//console.log("Patient Initialization");
										//Patient Initialization
										var oPatient={};
										oPatient= Object.create(Patient);
										oPatient.resourceType="Patient";
										//if(oTrackedEntity)
										
										var oName={};
										oName= Object.create(HumanName);
										oName.resourceType="HumanName";
										oName.use="official";
										//
										var oContact={};
										oContact= Object.create(ContactPoint);
										oContact.resourceType="ContactPoint";
										var oAddress={};
										oAddress= Object.create(Address);
										oAddress.resourceType="Address";
										oPatient.careProvider=[];
										var PatientSet=false;
										var listOfIdentifier=[];
										for(var iteratorValue=0;iteratorValue<listPatientAttributeIndex.length;iteratorValue++)
										{
											if(dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]]!="")
											{
												var oAttribute=dataFile[0][listPatientAttributeIndex[iteratorValue]].trim();
												var identifierListAttributes=patientAttributesMapping.identifier.split(",");
												var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
												if(resCheck==true)
												{
													var orgIdentifier={};
													oIdentifier=Object.create(Identifier);
													//assignment of Identifier
													oIdentifier.use="official";
													oIdentifier.type={"text":""+oAttribute};
													oIdentifier.system="http://hl7.org/fhir/";
													oIdentifier.value=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]];
													listOfIdentifier.push(oIdentifier);
													PatientSet=true;
													continue;
												}
												
												//console.log(oAttribute);
												switch(oAttribute)
												{
													case patientAttributesMapping.id:
														if(formatPatientId==true)
														{
															oPatient.id=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]].trim()+"-";
														}
														else if (formatPatientId==false)
														{
															oPatient.id=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]].trim();
														}
														
														var oIdentifier={};
														oIdentifier=Object.create(Identifier);
														//assignment of Identifier
														oIdentifier.use="official";
														oIdentifier.type={"text":""+oAttribute};
														oIdentifier.system="http://hl7.org/fhir/";
														oIdentifier.value=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]];
														listOfIdentifier.push(oIdentifier);
														PatientSet=true;
														break;
													case patientAttributesMapping.name_family:
														oName.family=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]];
														oName.text+=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]]+" ";
														PatientSet=true;
													break;
													case patientAttributesMapping.name_given:
														oName.given=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]];
														oName.text+=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]]+" ";
														PatientSet=true;
													break;
													case patientAttributesMapping.telecom_phone:
														oContact.system="phone";
														oContact.value=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]];
														oContact.use="home";
														oContact.rank="1";
														oPatient.telecom=[oContact];
														PatientSet=true;
													break;
													case patientAttributesMapping.telecom_email:
														oContact.system="email";
														oContact.value=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]];
														oContact.use="home";
														oContact.rank="2";
														oPatient.telecom=[oContact];
														PatientSet=true;
													break;
													case patientAttributesMapping.gender:
														/*if(getAssociatedGenderValueSet(dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]])!="")
														{
															oPatient.gender=getAssociatedGenderValueSet(dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]]);
														}*/
														oPatient.gender=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]];
														PatientSet=true;
													break;
													case patientAttributesMapping.birthDate:
														//oPatient.birthDate=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]];
														var processedDate=processDateFromCSVFile(dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]].trim());
														//console.log(processedDate);
														if(processedDate!="")
														{
															oPatient.birthDate=processedDate;
															PatientSet=true;
														}
														break;
													case patientAttributesMapping.deceasedBoolean:
														//console.log(oAttribute);
														//var code=getCodeFromDisplayNameInListOptionSet
														if(dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]].toLowerCase()=="alive")
														{
															oPatient.deceasedBoolean=false;
														}
														else
														{
															oPatient.deceasedBoolean=true;
														}
														PatientSet=true;
														break;
														//oTrackedEntity.attributes[i].value;
													case patientAttributesMapping.deceasedDateTime:
														if(dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]].trim()!="")
														{
															var processedDate=processDateFromCSVFile(dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]].trim());
															oPatient.deceasedDateTime=formatDateInZform(processedDate);
														}
														break;
														case patientAttributesMapping.address_text:
															oAddress.text=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]];
															//oPatient.address=[oAddress];
															PatientSet=true;
														break;
														case patientAttributesMapping.address_city:
															oAddress.city=dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]];
															//oPatient.address=[oAddress];
															PatientSet=true;
														break;
													case patientAttributesMapping.managingOrganization:
															var organizationId=getOrganizationIdByName(dataFile[iteratorLigne][listPatientAttributeIndex[iteratorValue]].trim(),listOrganizationUnits);
															if(organizationId!=-1)
															{
																oPatient.managingOrganization={"reference":"Organization/"+organizationId};
															}
															else
															{
																oPatient.managingOrganization="";
															}
													break;
													
												}
						
											}
										}//End for iteratorValue
										if(PatientSet==true)
										{
											/*if(getIndexOfFhirResourceById(listPatientExtrated,oPatient.id)==-1)
											{}*/
												
												
												oPatient.name=[oName];
												oPatient.identifier=listOfIdentifier;
												//entityPatient=oPatient;
												oPatient.address=[oAddress];
												dicResourceExtracted.type="Patient";
												dicResourceExtracted.ligneIndex=iteratorLigne;
												dicResourceExtracted.value=oPatient;
												//console.log(dicResourceExtracted);
												listMappedResourceExtracted.push(dicResourceExtracted);
												//listPatientExtrated.push(oPatient);
											
											
										}//End PatientSet
									}//End if dataFile[iteratorLigne].length
									//Resolve ManagingOrganization Name
									
								}//End for iterator ligne
								//console.log(listMappedResourceExtracted);
								
									
								//Extract other Resource
								//Extract Specimen
								var listSpecimenExtracted=[];
								var nbreOfHeaderAttributes=0;
								var listSpecimenAttributeIndex=[];
								var listOfAttributesSpecimen=getListOfSpecimenAttributeMapping();
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									
									var resultChecking=checkAttributeInList(listOfAttributesSpecimen,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listSpecimenAttributeIndex.push(iteratorHeader);
									}
									//console.log(""+itemToSearch+" :"+resultChecking);
								}
							
								if(listSpecimenAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											var dicResourceExtracted={
											"type":"",
											"ligneIndex":"",
											"value":""
											};
											//Specimen initialization
											var oSpecimen={};
											oSpecimen= Object.create(Specimen);
											oSpecimen.resourceType="Specimen";
											oSpecimen.active=true;
											var listOfSpecimenIdentifier=[];
											var listOfTraitment=[];
											var oConceptProcedure={};
											oConceptProcedure= Object.create(CodeableConcept);
											var oConceptCollectionMethod={};
											oConceptCollectionMethod= Object.create(CodeableConcept);
											var oConceptBodySite={};
											oConceptBodySite= Object.create(CodeableConcept);
											//oConceptProcedure.
											var oTraitment={
												"description":"",
												"procedure":{}
												};
											var oCollection={};
											oCollection= Object.create(Collection);
											var oContainer={};
											oContainer= Object.create(Container);
											var specimenIsSet=false;
											var hasCollectionInfo=false;
											var hasTraitementInfo=false;
											var hasContainerInfo=false;
											var identifierListAttributes=specimenAttributesMapping.identifier.split(",");
											for(var iteratorValue=0;iteratorValue<listSpecimenAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]]!="")
												{
													var oAttribute=dataFile[0][listSpecimenAttributeIndex[iteratorValue]].trim();
												
													var resCheck=checkAttributeInList(identifierListAttributes,oAttribute);
													if(resCheck==true)
													{
														if(checkIfIdentifierExist(listOfSpecimenIdentifier,dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim(),
														"Specimen ID")==false)
														{
															var oIdentifier={};
															oIdentifier=Object.create(Identifier);
															//assignment of Identifier
															oIdentifier.use="official";
															oIdentifier.type={"text":"Specimen ID"};
															oIdentifier.system="http://hl7.org/fhir/";
															oIdentifier.value=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															//oSpecimen.id=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim()+"-";
															listOfSpecimenIdentifier.push(oIdentifier);
															specimenIsSet=true;
														}
														
														continue;
													}
													switch(oAttribute)
													{
														case specimenAttributesMapping.id:
															if(formatSpecimenId==true)
															{
																oSpecimen.id=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim()+"-";
															}
															else if (formatSpecimenId==false)
															{
																oSpecimen.id=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															}
															
															var oIdentifier={};
															oIdentifier=Object.create(Identifier);
															//assignment of Identifier
															oIdentifier.use="official";
															oIdentifier.type={"text":"Specimen ID"};
															oIdentifier.system="http://hl7.org/fhir/";
															oIdentifier.value=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															//oSpecimen.id=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim()+"-";
															listOfSpecimenIdentifier.push(oIdentifier);
															break;
														case specimenAttributesMapping.status:
															oSpecimen.status=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															//oSpecimen.status="available";
															specimenIsSet=true;
															break;
														case specimenAttributesMapping.type:
															var oConceptSpecimenType={};
															oConceptSpecimenType= Object.create(oConceptSpecimenType);
															oConceptSpecimenType.text=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															oSpecimen.type=oConceptSpecimenType;
															specimenIsSet=true;
															break;
														case specimenAttributesMapping.subject:
															var subjectRef="";
															if(formatPatientId==true)
															{
																subjectRef={"reference":"Patient/"+dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim()+"-"};
															}
															else if (formatPatientId==false)
															{
																subjectRef={"reference":"Patient/"+dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim()};
															}
															
															oSpecimen.subject=subjectRef;
															break;
														case specimenAttributesMapping.accession:
															var oIdentifier={};
															oIdentifier=Object.create(Identifier);
															oIdentifier.use="official";
															oIdentifier.type={"text":"Lab Identification"};
															oIdentifier.system="http://hl7.org/fhir";
															oIdentifier.value=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															oSpecimen.accession=oIdentifier;
															specimenIsSet=true;
															break;
														case specimenAttributesMapping.receivedTime:
															var processedDate=processDateFromCSVFile(dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim());
															if(processedDate!="")
															{
																oSpecimen.receivedTime=processedDate;
																specimenIsSet=true;
															}
															break;
														case specimenAttributesMapping.collector:
															oCollection.collector=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															specimenIsSet=true;
															break;
														case specimenAttributesMapping.collection_comment:
															oCollection.comment=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															specimenIsSet=true;
															break;
														case specimenAttributesMapping.collectedDateTime:
															var processedDate=processDateFromCSVFile(dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim());
															if(processedDate!="")
															{
																oCollection.collectedDateTime=processedDate;
																specimenIsSet=true;
															}
															hasCollectionInfo=true;
															break;
														case specimenAttributesMapping.collection_quantity_unit:
															oCollection.quantity.unit=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															hasCollectionInfo=true;
															specimenIsSet=true;
															break;
														case specimenAttributesMapping.collection_quantity_value:
															oCollection.quantity.value=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															hasCollectionInfo=true;
															specimenIsSet=true;
															break;
														case specimenAttributesMapping.collection_method:
															oConceptCollectionMethod.text=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															oCollection.method=oConceptCollectionMethod;
															hasCollectionInfo=true;
															specimenIsSet=true;
															break;
														case specimenAttributesMapping.collection_bodySite:
															oConceptBodySite.text=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															oCollection.bodySite=oConceptBodySite;
															hasCollectionInfo=true;
															specimenIsSet=true;
															break;
														case specimenAttributesMapping.container_capacity_unit:
															oContainer.capacity.unit=oEvent.dataValues[iteratorDataValues].value;
															hasContainerInfo=true;
															specimenIsSet=true;
															break;
														case specimenAttributesMapping.container_capacity_value:
															oContainer.capacity.value=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															hasContainerInfo=true;
															specimenIsSet=true;
															break;
														case specimenAttributesMapping.container_description:
															oContainer.description=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															hasContainerInfo=true;
															specimenIsSet=true;
															break;
														case specimenAttributesMapping.traitment_description:
															oTraitment.description=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															hasTraitementInfo=true;
															specimenIsSet=true;
															break;
														case specimenAttributesMapping.traitment_procedure:
															oConceptProcedure.text=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															oTraitment.procedure=oConceptProcedure;
															hasTraitementInfo=true;
															specimenIsSet=true;
															break;
														case specimenAttributesMapping.container_identifier:
															var oIdentifier={};
															oIdentifier=Object.create(Identifier);
															//assignment of Identifier
															oIdentifier.use="official";
															oIdentifier.type={"text":"Container Identification"};
															oIdentifier.system="http://hl7.org/fhir";
															oIdentifier.value=dataFile[iteratorLigne][listSpecimenAttributeIndex[iteratorValue]].trim();
															oContainer.Identifier=[oIdentifier];
															specimenIsSet=true;
															break;
													}
							
												}
												
											}//End for iteratorValue
											if(specimenIsSet==true)
											{
												
												//if(getIndexOfFhirResourceById(listSpecimenExtracted,oSpecimen.id)==-1 && oSpecimen.id!="")
												if(oSpecimen.id!="")
												{
													oSpecimen.identifier=listOfSpecimenIdentifier;
													
													if(hasCollectionInfo==true)
													{
														oSpecimen.collection=oCollection;
													}
													if(hasTraitementInfo==true)
													{
														oSpecimen.treatment=[oTraitment];
													}
													if(hasContainerInfo==true)
													{
														oSpecimen.Container=[oContainer];
													}
													//entitySpecimen=oSpecimen;
													
													//listEntityObject.push(entitySpecimen);
													dicResourceExtracted.type="Specimen";
													dicResourceExtracted.ligneIndex=iteratorLigne;
													dicResourceExtracted.value=oSpecimen;
													listMappedResourceExtracted.push(dicResourceExtracted);
												}
													//console.log(dicResourceExtracted);
													//listSpecimenExtracted.push(oSpecimen);
												//console.log(oSpecimen);
											}//End if specimenIsSet
										}//End if dataFile[iteratorLine]
									}//End for iteratorLigne
									//console.log(listSpecimenExtracted);
								}//End if listSpecimenAttributeIndex.length
								//console.log(listMappedResourceExtracted);
								
							
								//console.log(listMappedResourceExtracted);
								//Extract Condition
								var listConditionExtracted=[];
								var nbreOfHeaderAttributes=0;
								var listConditionAttributeIndex=[];
								var listOfAttributesCondition=getListOfConditionAttributeMapping();
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									
									var resultChecking=checkAttributeInList(listOfAttributesCondition,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listConditionAttributeIndex.push(iteratorHeader);
									}
									//console.log(""+itemToSearch+" :"+resultChecking);
								}
								//console.log(listConditionAttributeIndex);
								if(listConditionAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											var dicResourceExtracted={
											"type":"",
											"ligneIndex":"",
											"value":""
											};
											//Condition Initialization
											var oCondition={};
											oCondition= Object.create(Condition);
											oCondition.resourceType="Condition";
											var listOfConditionIdentifier=[];
											var conditionIsSet=false;
											for(var iteratorValue=0;iteratorValue<listConditionAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listConditionAttributeIndex[iteratorValue]]!="")
												{
													var oAttribute=dataFile[0][listConditionAttributeIndex[iteratorValue]].trim();
													switch(oAttribute)
													{
														case conditionAttributesMapping.identifier:
															var oIdentifier={};
															oIdentifier=Object.create(Identifier);
															//assignment of Identifier
															oIdentifier.use="official";
															oIdentifier.type={"text":"Condition Identification"};
															oIdentifier.system="http://hl7.org/fhir/";
															oIdentifier.value=dataFile[iteratorLigne][listConditionAttributeIndex[iteratorValue]];
															listOfConditionIdentifier.push(oIdentifier);
															conditionIsSet=true;
															break;
														case conditionAttributesMapping.patient:
															if(formatPatientId==true)
															{
																oCondition.patient={"reference":"Patient/"+dataFile[iteratorLigne][listConditionAttributeIndex[iteratorValue]].trim()+"-"};
															}
															else if (formatPatientId==false)
															{
																oCondition.patient={"reference":"Patient/"+dataFile[iteratorLigne][listConditionAttributeIndex[iteratorValue]].trim()};
															}
															
															conditionIsSet=true;
															break;
														case conditionAttributesMapping.encounter:
															//oCondition.encounter={"reference":"Encounter/"+dataFile[iteratorLigne][listConditionAttributeIndex[iteratorValue]]};
															//conditionIsSet=true;
															break;
														case conditionAttributesMapping.dateRecorded:
															var processedDate=processDateFromCSVFile(extractDateFromDateTime(dataFile[iteratorLigne][listConditionAttributeIndex[iteratorValue]]));
															if(processedDate!="")
															{
																oCondition.dateRecorded=processedDate;
																conditionIsSet=true;
															}
															break;
														case conditionAttributesMapping.code:
															var code=getCodeFromDisplayNameInListOptionSet(dataFile[iteratorLigne][listConditionAttributeIndex[iteratorValue]].trim(),listOptions);
															if(code!="")
															{
																var  oConcept={};
																oConcept= Object.create(CodeableConcept);
																oConcept.text=code;
																oCondition.code=oConcept;
																conditionIsSet=true;
															}
															//console.log(dataFile[iteratorLigne][listConditionAttributeIndex[iteratorValue]].trim()+" :"+code);
															break;
														case conditionAttributesMapping.category:
															var  oConcept={};
															oConcept= Object.create(CodeableConcept);
															oConcept.text=dataFile[iteratorLigne][listConditionAttributeIndex[iteratorValue]];
															oCondition.category=oConcept;
															conditionIsSet=true;
															break;
														case conditionAttributesMapping.clinicalStatus:
															oCondition.clinicalStatus=dataFile[iteratorLigne][listConditionAttributeIndex[iteratorValue]];
															//active
															conditionIsSet=true;
															break;
														case conditionAttributesMapping.verificationStatus:
															oCondition.verificationStatus=dataFile[iteratorLigne][listConditionAttributeIndex[iteratorValue]];
															//provisional
															conditionIsSet=true;
															break;
														case conditionAttributesMapping.severity:
															var  oConcept={};
															oConcept= Object.create(CodeableConcept);
															oConcept.text=dataFile[iteratorLigne][listConditionAttributeIndex[iteratorValue]];
															oCondition.severity=oConcept;
															//provisional
															conditionIsSet=true;
															break;
														case conditionAttributesMapping.onsetDateTime:
															var processedDate=processDateFromCSVFile(dataFile[iteratorLigne][listConditionAttributeIndex[iteratorValue]]);
															if(processedDate!="")
															{
																oCondition.onsetDateTime=formatDateInZform(processedDate);
																conditionIsSet=true;
															}
															break;
													}//End of switch
												}
											}//End iteratorValue
											if(conditionIsSet==true)
											{
												oCondition.id="cond-"+idCounter+iteratorLigne;
												//oCondition.id="cond-"+new Date().getTime();
												if(oCondition.clinicalStatus=="")
												{
													oCondition.clinicalStatus="active";
												}
												if(oCondition.verificationStatus=="")
												{
													oCondition.verificationStatus="provisional";
												}
												dicResourceExtracted.type="Condition";
												dicResourceExtracted.ligneIndex=iteratorLigne;
												dicResourceExtracted.value=oCondition;
												listMappedResourceExtracted.push(dicResourceExtracted);
												//console.log(dicResourceExtracted);
												//listConditionExtracted.push(oCondition);
											}
						//
										}//End if dataFile[iteratorLigne]
									}//end for iteratorLigne
								}//end if listConditionAttributeIndex
								//console.log(listConditionExtracted[0].patient.reference.split("/")[1]);
								//console.log(listMappedResourceExtracted);
								//Extract DiagnosticOrder
								var listDiagnosticOrderExtracted=[];
								var nbreOfHeaderAttributes=0;
								var listDiagnosticOrderAttributeIndex=[];
								var listOfAttributesDiagnosticOrder=getListOfDiagnosticOrderAttributeMapping();
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									
									var resultChecking=checkAttributeInList(listOfAttributesDiagnosticOrder,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listDiagnosticOrderAttributeIndex.push(iteratorHeader);
									}
								}//End for iteratorHeader
								if(listDiagnosticOrderAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											var dicResourceExtracted={
											"type":"",
											"ligneIndex":"",
											"value":""
											};
											//Order Initialization
											var oOrder={};
											oOrder= Object.create(DiagnosticOrder);
											oOrder.resourceType="DiagnosticOrder";
											var listOfOrderIdentifier=[];
											var oOrderEvent={};
											oOrderEvent= Object.create(OrderEvent);
											oOrder.specimen=[];
											var orderIsSet=false;
											for(var iteratorValue=0;iteratorValue<listDiagnosticOrderAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]]!="")
												{
													var oAttribute=dataFile[0][listDiagnosticOrderAttributeIndex[iteratorValue]].trim();
													switch(oAttribute)
													{
														case orderAttributesMapping.identifier:
															var oIdentifier={};
															oIdentifier=Object.create(Identifier);
															//assignment of Identifier
															oIdentifier.use="official";
															oIdentifier.type={"text":"Order Identification"};
															oIdentifier.system="http://hl7.org/fhir/";
															oIdentifier.value=dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]];
															listOfOrderIdentifier.push(oIdentifier);
															orderIsSet=true;
															break;
														case orderAttributesMapping.subject:
															if(formatPatientId==true)
															{
																oOrder.subject={"reference":"Patient/"+dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]].trim()+"-"};
															}
															else if (formatPatientId==false)
															{
																oOrder.subject={"reference":"Patient/"+dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]].trim()};
															}
															orderIsSet=true;
															break;
														case orderAttributesMapping.orderer:
															//oOrder.orderer={"reference":"Practitioner/"+dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]]};
															//orderIsSet=true;
															break;
														case orderAttributesMapping.encounter:
															//oOrder.encounter={"reference":"Encounter/"+dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]]};
															//orderIsSet=true;
															break;
														case orderAttributesMapping.reason:
															var oConcept={};
															oConcept= Object.create(CodeableConcept);
															oConcept.text=dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]];
															oOrder.reason=[oConcept];
															orderIsSet=true;
															break;
														case orderAttributesMapping.supportingInformation:
															oOrder.supportingInformation=[dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]]];
															orderIsSet=true;
															break;
														case orderAttributesMapping.specimen:
															//oOrder.specimen={"reference":"Specimen/"+dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]]};
															//orderIsSet=true;
															break;
														case orderAttributesMapping.status:
															oOrder.status=dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]];
															orderIsSet=true;
															break;
														case orderAttributesMapping.priority:
															oOrder.priority=dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]];
															orderIsSet=true;
															break;
														case orderAttributesMapping.orderEvent_dateTime:
															var processedDate=processDateFromCSVFile(dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]]);
															if(processedDate!="")
															{
																oOrderEvent.dateTime=formatDateInZform(processedDate);
																orderIsSet=true;
															}
															break;
														case orderAttributesMapping.orderEvent_status:
															
															oOrderEvent.status=dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]];
															orderIsSet=true;
															break;
														case orderAttributesMapping.orderEvent_description:
															var oConcept={};
															oConcept= Object.create(CodeableConcept);
															oConcept.text=dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]];
															oOrderEvent.description=oConcept;
															orderIsSet=true;
															break;
														case orderAttributesMapping.item:
															var oConcept={};
															oConcept= Object.create(CodeableConcept);
															oConcept.text=dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]];
															oOrder.item=[oConcept];
															orderIsSet=true;
															break;
														case orderAttributesMapping.note:
															oOrder.note={"text":dataFile[iteratorLigne][listDiagnosticOrderAttributeIndex[iteratorValue]]};
															orderIsSet=true;
															break;
														
													}//End of switch
													
												}
												
											}//for iteratorValue
											if(orderIsSet==true)
											{
												oOrder.id="ord-"+idCounter+iteratorLigne;
												//oOrder.id="ord-"+new Date().getTime();
												oOrder.identifier=listOfOrderIdentifier;
												//Add additional information for validation
												oOrderEvent.status="requested";
												oOrder.event=[];
												oOrder.event.push(oOrderEvent);
												var patientIdAssociated=oOrder.subject.reference.split("/")[1];
												var dateTimeEvent=oOrderEvent.dateTime;
												//console.log(patientIdAssociated+":"+dateTimeEvent);
												var nbrSpecimenExtracted=0;
												var nbrConditionExtracted=0;
												nbrSpecimenExtracted=getNbreResourceExtracted("Specimen",listMappedResourceExtracted);
												nbrConditionExtracted=getNbreResourceExtracted("Condition",listMappedResourceExtracted);
												//for()
												if (nbrSpecimenExtracted>0)
												{
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].type=="Specimen" && 
														listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne)
														{
															var resourceRef={"reference":"Specimen/"+listMappedResourceExtracted[iteratorMappedResource].value.id};
															//console.log(resourceRef);
															//console.log("---------------");
															oOrder.specimen.push(resourceRef);
															//console.log(oOrder);
															break;
														}
													}
												}
												
												if (nbrConditionExtracted>0)
												{
													oOrder.supportingInformation=[];
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].type=="Condition" && 
														listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne)
														{
															var resourceRef={"reference":"Condition/"+listMappedResourceExtracted[iteratorMappedResource].value.id};
															//console.log(resourceRef);
															oOrder.supportingInformation.push(resourceRef);
															//console.log(oOrder);
															break;
														}
													}
												}
												dicResourceExtracted.type="DiagnosticOrder";
												dicResourceExtracted.ligneIndex=iteratorLigne;
												dicResourceExtracted.value=oOrder;
												listMappedResourceExtracted.push(dicResourceExtracted);
												//console.log(dicResourceExtracted.value);
												
											}
										}//end if dataFile[iteratorLigne].length
									}//end for iteratorLigne
								}//end if listDiagnosticOrderAttributeIndex.length
								//console.log(listDiagnosticOrderExtracted);
								//Extract DiagnosticOrder
								var listObservationExtracted=[];
							
								var nbreOfHeaderAttributes=0;
								var listObservationAttributeIndex=[];
								var listOfAttributesObservation=getListOfObservationAttributeMapping();
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									
									var resultChecking=checkAttributeInList(listOfAttributesObservation,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listObservationAttributeIndex.push(iteratorHeader);
									}
								}//End for iteratorHeader
								if(listObservationAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											var dicResourceExtracted={
											"type":"",
											"ligneIndex":"",
											"value":""
											};
											//Observation initialization
											var oObservation={};
											oObservation= Object.create(Observation);
											oObservation.resourceType="Observation";
											oObservation.performer=[];
											var listOfObservationIdentifier=[];
											var oSampledData={};
											oSampledData= Object.create(SampledData);
											var oPeriodEffective={};
											oPeriodEffective= Object.create(Period);
											var oPeriodResult={};
											oPeriodResult= Object.create(Period);
											var oValueQuantity={};
											oValueQuantity= Object.create(Quantity);
											var oOriginQuantity={};
											oOriginQuantity= Object.create(Quantity);
											var oObservationRange={};
											oObservationRange=Object.create(Range);
											var oObservationRatio={};
											oObservationRatio=Object.create(Ratio);
											var oBodySiteConcept={};
											oBodySiteConcept=Object.create(CodeableConcept);
											var oAbsentRaisonConcept={};
											oAbsentRaisonConcept=Object.create(CodeableConcept);
											var observationIsSet=false;
											var hasValueSampledDataInfo=false;
											var hasEffectivePeriodInfo=false;
											var hasValueQuantityInfo=false;
											var hasValueRangeInfo=false;
											var hasValueRatioInfo=false;
											var hasValuePeriodInfo=false;
											for(var iteratorValue=0;iteratorValue<listObservationAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]]!="")
												{
													var oAttribute=dataFile[0][listObservationAttributeIndex[iteratorValue]].trim();
													
													switch(oAttribute)
													{
														case observationAttributesMapping.identifier:
															var oIdentifier={};
															oIdentifier=Object.create(Identifier);
															//assignment of Identifier
															oIdentifier.use="official";
															oIdentifier.type={"text":"Observation Identification"};
															oIdentifier.system="http://hl7.org/fhir/";
															oIdentifier.value=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															listOfObservationIdentifier.push(oIdentifier);
															observationIsSet=true;
															break;
														case observationAttributesMapping.status:
															oObservation.status=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															observationIsSet=true;
															break;
														case observationAttributesMapping.category:
															var  oConcept={};
															oConcept= Object.create(CodeableConcept);
															oConcept.text=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															oObservation.category=oConcept;
															observationIsSet=true;
															break;
														case observationAttributesMapping.code:
															var  oConcept={};
															oConcept= Object.create(CodeableConcept);
															oConcept.text=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															oObservation.code=oConcept;
															observationIsSet=true;
															break;
														case observationAttributesMapping.subject:
															if(formatPatientId==true)
															{
																oObservation.subject={"reference":"Patient/"+dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]].trim()+"-"};
															}
															else if (formatPatientId==false)
															{
																oObservation.subject={"reference":"Patient/"+dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]].trim()};
															}
															//observationIsSet=true;
															break;
														case observationAttributesMapping.encounter:
															//oObservation.encounter={"reference":"Encounter/"+dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]]};
															//observationIsSet=true;
															break;
														case observationAttributesMapping.effectiveDateTime:
															var processedDate=processDateFromCSVFile(dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]]);
															if(processedDate!="")
															{
																oObservation.effectiveDateTime=formatDateInZform(processedDate);
																observationIsSet=true;
															}
															break;
														case observationAttributesMapping.effectivePeriod_dateSup:
															var processedDate=processDateFromCSVFile(dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]]);
															if(processedDate!="")
															{
																oPeriodEffective.end= formatDateInZform(processedDate);
																hasEffectivePeriodInfo=true;
																observationIsSet=true;
															}
															break;
														case observationAttributesMapping.effectivePeriod_dateInf:
															var processedDate=processDateFromCSVFile(dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]]);
															if(processedDate!="")
															{
																oPeriodEffective.start=formatDateInZform(processedDate);
																hasEffectivePeriodInfo=true;
																observationIsSet=true;
															}
															break;
														case observationAttributesMapping.issued:
															var processedDate=processDateFromCSVFile(dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]]);
															if(processedDate!="")
															{
																oObservation.issued=formatDateInZform(processedDate);
															}
															break;
														case observationAttributesMapping.valueQuantity_unit:
															oValueQuantity.unit=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															hasValueQuantityInfo=true;
															observationIsSet=true;
															break;
														case observationAttributesMapping.valueQuantity_value:
															oValueQuantity.value=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															hasValueQuantityInfo=true;
															break;
														case observationAttributesMapping.valueCodeableConcept:
															var  oConcept={};
															oConcept= Object.create(CodeableConcept);
															oConcept.text=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															oObservation.valueCodeableConcept=oConcept;
															observationIsSet=true;
															break;
														case observationAttributesMapping.valueString:
															oObservation.valueString=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															observationIsSet=true;
															break;
														case observationAttributesMapping.valueRange_sup:
															var rangeQuantity=Object.create(Quantity);
															rangeQuantity.value=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															oObservationRange.high=rangeQuantity;
															hasValueRangeInfo=true;
															observationIsSet=true;
															break;
														case observationAttributesMapping.valueRange_Inf:
															var rangeQuantity=Object.create(Quantity);
															rangeQuantity.value=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															oObservationRange.low=rangeQuantity;
															hasValueRangeInfo=true;
															observationIsSet=true;
															break;
														case observationAttributesMapping.valueRatio_num:
															oObservationRatio.numerator=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															hasValueRatioInfo=true;
															observationIsSet=true;
															break;
														case observationAttributesMapping.valueRatio_denom:
															oObservationRatio.denominator=oEvent.dataValues[iteratorDataValues].value;
															hasValueRatioInfo=true;
															observationIsSet=true;
															break;
														case observationAttributesMapping.valueSampledData_origin:
															oOriginQuantity.value=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															break;
														case observationAttributesMapping.valueSampledData_period:
															oSampledData.period=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															hasValueSampledDataInfo=true;
															observationIsSet=true;
															break;
														case observationAttributesMapping.valueSampledData_factor:
															oSampledData.factor=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															hasValueSampledDataInfo=true;
															observationIsSet=true;
															break;
														case observationAttributesMapping.valueSampledData_lowerLimit:
															oSampledData.lowerLimit=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															observationIsSet=true;
															break;
														case observationAttributesMapping.valueSampledData_upperLimit:
															oSampledData.upperLimit=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															hasValueSampledDataInfo=true;
															observationIsSet=true;
															break;
														case observationAttributesMapping.valueSampledData_dimensions:
															oSampledData.dimensions=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															 hasValueSampledDataInfo=true;
															observationIsSet=true;
															break;
														case observationAttributesMapping.valueSampledData_data:
															oSampledData.data=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															hasValueSampledDataInfo=true;
															break;
														case observationAttributesMapping.valueTime:
															oObservation.valueTime=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															observationIsSet=true;
															break;
														case observationAttributesMapping.valueDateTime:
															oObservation.valueDateTime=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															observationIsSet=true;
															break;
														case observationAttributesMapping.valuePeriod_start:
															oPeriodResult.start=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															hasValuePeriodInfo=true;
															observationIsSet=true;
															break;
														case observationAttributesMapping.valuePeriod_end:
															oPeriodResult.end=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															hasValuePeriodInfo=true;
															observationIsSet=true;
															break;
														case observationAttributesMapping.dataAbsentReason:
															oAbsentRaisonConcept.text=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															oObservation.dataAbsentReason=oAbsentRaisonConcept;
															observationIsSet=true;
															break;
														case observationAttributesMapping.interpretation:
															var  oConcept={};
															oConcept= Object.create(CodeableConcept);
															oConcept.text=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															oObservation.interpretation=oConcept;
															observationIsSet=true;
															break;
														case observationAttributesMapping.comments:
															var code=getCodeFromDisplayNameInListOptionSet(dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]].trim(),listOptions);
															if(code!="")
															{
																oObservation.comments=code;
																observationIsSet=true;
															}
															console.log(oObservation.comments);
															break;
														case observationAttributesMapping.bodySite:
															oBodySiteConcept.text=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															oObservation.bodySite=oBodySiteConcept;
															observationIsSet=true;
															break;
														case observationAttributesMapping.method:
															var  oConcept={};
															oConcept= Object.create(CodeableConcept);
															oConcept.text=dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]];
															oObservation.method=oConcept;
															observationIsSet=true;
															break;
														case observationAttributesMapping.specimen:
															if(formatSpecimenId==true)
															{
																oObservation.specimen={"reference":"Specimen/"+dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]].trim()+"-"};
															}
															else if (formatSpecimenId==false)
															{
																oObservation.specimen={"reference":"Specimen/"+dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]].trim()};
															}
															
															observationIsSet=true;
															break;
														case observationAttributesMapping.device:
															//oObservation.device={"reference":"Device/"+dataFile[iteratorLigne][listObservationAttributeIndex[iteratorValue]]};
															//observationIsSet=true;
															break;
														case observationAttributesMapping.referenceRange:
															//oObservation.referenceRange=[];
															break;
														case observationAttributesMapping.related:
															//oObservation.related=[];
															break;
														case observationAttributesMapping.component:
															//oObservation.component=[];
															break;
														}//End switch
						
													
												}
												
											}//for iteratorValue
											if(observationIsSet==true)
											{
												
												oObservation.id="obs-"+idCounter+iteratorLigne;
												//oObservation.id="obs-"+new Date().getTime();
												//
												
												oSampledData.origin=oOriginQuantity;
												//oObservation.identifier=listOfObservationIdentifier;
												if(hasValueSampledDataInfo==true)
												{
													oObservation.valueSampledData=oSampledData;
												}
												if(hasEffectivePeriodInfo==true)
												{
													oObservation.effectivePeriod=oPeriodEffective;
												}
												if(hasValueQuantityInfo==true)
												{
													oObservation.valueQuantity=oValueQuantity;
												}
												if(hasValueRangeInfo==true)
												{
													oObservation.valueRange=oObservationRange;
												}
												//checkIfAsProperties(oObservationRange);
												if(hasValueRatioInfo==true)
												{
													oObservation.valueRatio=oObservationRatio;
												}
												if(hasValuePeriodInfo==true)
												{
													oObservation.valuePeriod=oPeriodResult;
												}
												oObservation.identifier=listOfObservationIdentifier;
												//Add additional information for validation
												
												if(oObservation.interpretation=="")
												{
													oObservation.status="registered";
												}
												else
												{
													oObservation.status="final";
												}
												
												//By Default used Microscopy observation as code if note setted
												/*
												if(oObservation.code=="")
												{
													var oConcept={};
													oConcept= Object.create(CodeableConcept);
													oConcept.text="Microscopic Observation";
													oConcept.code=[{"code":"10355-6"}];
													oObservation.code=oConcept;
												}*/
												//Assign specimen concerned
												var nbrSpecimenExtracted=0;
												nbrSpecimenExtracted=getNbreResourceExtracted("Specimen",listMappedResourceExtracted);
												
												if (nbrSpecimenExtracted>0)
												{
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].type=="Specimen" && 
														listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne)
														{
															var resourceRef={"reference":"Specimen/"+listMappedResourceExtracted[iteratorMappedResource].value.id};
															oObservation.specimen=resourceRef;
															break;
														}
													}
												}
												
												dicResourceExtracted.type="Observation";
												dicResourceExtracted.ligneIndex=iteratorLigne;
												dicResourceExtracted.value=oObservation;
												listMappedResourceExtracted.push(dicResourceExtracted);
												//Check if there is not performer info to add orgUnit
												//listObservationExtracted.push(oObservation);
												
											}
										}//end if dataFile[iteratorLigne].length
									}//end for iteratorLigne
								}//end if listObservationAttributeIndex.length
								//console.log(listTestingLaboratory);
								
								//console.log(listMappedResourceExtracted[2].value);
								//Extract Practitioner Care provider
								var listPractitionerExtracted=[];
								var nbreOfHeaderAttributes=0;
								var listPractitionerAttributeIndex=[];
								//var practitionerNature=getPractitionerNature(oEvent.programStageName);
								var listOfAttributesPractitioner=getListOfPractitionerAttributeMapping();
								//console.log(listOfAttributesPractitioner);
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									
									var resultChecking=checkAttributeInList(listOfAttributesPractitioner,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listPractitionerAttributeIndex.push(iteratorHeader);
									}
								}//End of for iteratorHeader
								if(listPractitionerAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											var dicResourceExtracted={
											"type":"",
											"ligneIndex":"",
											"value":""
											};
											//Practitioner Initialization
											var oPractitioner={};
											oPractitioner= Object.create(Practitioner);
											oPractitioner.resourceType="Practitioner";
											var oName={};
											oName= Object.create(HumanName);
											oName.resourceType="HumanName";
											oName.use="official";
											var oAddress={};
											oAddress= Object.create(Address);
											oAddress.resourceType="Address";
											oPractitioner.telecom=[];
											oPractitioner.practitionerRole=[];
											var oPractitionerRole={};
											oPractitionerRole= Object.create(PractitionerRole);
											var practitionerSet=false;
											var listOfPractitionerIdentifier=[];
											var stageName=(dataFile[0][listPractitionerAttributeIndex[0]].trim().split("|"))[0];
											var practitionerNature=getPractitionerNature(stageName.trim());
											
											for(var iteratorValue=0;iteratorValue<listPractitionerAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]]!="")
												{
													var oAttribute=dataFile[0][listPractitionerAttributeIndex[iteratorValue]].trim();
													
													switch(oAttribute)
													{
														case practitionerAttributesMapping.id:
															oPractitioner.id=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															var oIdentifier={};
															oIdentifier=Object.create(Identifier);
															//assignment of Identifier
															oIdentifier.use="official";
															oIdentifier.type={"text":""+oAttribute};
															oIdentifier.system="http://hl7.org/fhir/";
															oIdentifier.value=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															listOfPractitionerIdentifier.push(oIdentifier);
															practitionerSet=true;
															break;
														case practitionerAttributesMapping.name_family:
															oName.family=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oName.text+=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim()+" ";
															practitionerSet=true;
														break;
														case practitionerAttributesMapping.name_given:
															oName.given=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oName.text+=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim()+" ";
															practitionerSet=true;;
														break;
														case practitionerAttributesMapping.telecom_phone:
															var oContact={};
															oContact= Object.create(ContactPoint);
															oContact.resourceType="ContactPoint";
															oContact.system="phone";
															oContact.value=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oContact.use="home";
															oContact.rank="1";
															oPractitioner.telecom.push(oContact);
															practitionerSet=true;;
														break;
														case practitionerAttributesMapping.telecom_email:
															var oContact={};
															oContact= Object.create(ContactPoint);
															oContact.resourceType="ContactPoint";
															oContact.system="email";
															oContact.value=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oContact.use="home";
															oContact.rank="2";
															//oPractitioner.telecom.push(oContact);
															practitionerSet=true;
														break;
														case practitionerAttributesMapping.gender:
															if(getAssociatedGenderValueSet(dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim())!="")
															{
																oPractitioner.gender=getAssociatedGenderValueSet(dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim());
															}
															practitionerSet=true;
														break;
														case practitionerAttributesMapping.address:
															oAddress.text=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oPractitioner.address=[oAddress];
															practitionerSet=true;
														break;
														case practitionerAttributesMapping.practitionerRole_managingOrganization:
															var organizationId=getOrganizationIdByName(dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim(),listOrganizationUnits);
															if(organizationId!=-1)
															{
																oPractitionerRole.managingOrganization={"reference":"Organization/"+organizationId};
															}
															else
															{
																oPractitionerRole.managingOrganization="";
															}
															practitionerSet=true;
														break;
														case practitionerAttributesMapping.practitionerRole_role:
															var  oConcept={};
															oConcept= Object.create(CodeableConcept);
															oConcept.text=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oPractitionerRole.role=oConcept;
															practitionerSet=true;
														break;
													}//End switch
												}//end if dataFile[iteratorLigne]
											}//End for iteratorValue
											if(practitionerSet==true)
											{
												if(oPractitioner.id=="")
												{
													oPractitioner.id="pract-"+idCounter+iteratorLigne;
													//oPractitioner.id="pract-"+new Date().getTime();
												}
												oPractitioner.name=[oName];
												oPractitioner.identifier=listOfPractitionerIdentifier;
												oPractitioner.telecom.push(oContact);
												oPractitioner.practitionerRole.push(oPractitionerRole);
												dicResourceExtracted.type="Practitioner";
												dicResourceExtracted.ligneIndex=iteratorLigne;
												dicResourceExtracted.value=oPractitioner;
												//console.log(dicResourceExtracted.value.practitionerRole);
												listMappedResourceExtracted.push(dicResourceExtracted);
												
												if(practitionerNature=="care_provider")
												{
													//Identify care provider associated
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
														&& listMappedResourceExtracted[iteratorMappedResource].type=="Patient")
														{
															var resourceRef={"reference":"Practitioner/"+oPractitioner.id};
															listMappedResourceExtracted[iteratorMappedResource].value.careProvider.push(resourceRef);
															break;
														}
													}
												}
												if(practitionerNature=="specimen_collector")
												{
													//Identify specimen collected associated
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
														&& listMappedResourceExtracted[iteratorMappedResource].type=="Specimen")
														{
															var resourceRef={"reference":"Practitioner/"+oPractitioner.id};
															listMappedResourceExtracted[iteratorMappedResource].value.collection.collector=resourceRef;
															break;
														}
													}
												}
												if(practitionerNature=="observation_performer")
												{
													//Identify specimen collected associated
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
														&& listMappedResourceExtracted[iteratorMappedResource].type=="Observation")
														{
															var resourceRef={"reference":"Practitioner/"+oPractitioner.id};
															listMappedResourceExtracted[iteratorMappedResource].value.performer.push(resourceRef);
															break;
														}
													}
												}
												
											}//End if practitionerSet
										}//End if dataFile[iteratorLigne]
									}//End for  iteratorLigne
								}//End if PractitionerAttributeIndex
								
								//Extract Practitioner Specimen Handler
								listPractitionerAttributeIndex=[];
								listOfAttributesPractitioner=[];
								listOfAttributesPractitioner=getListOfPractitionerSpecimenHandlingAttributeMapping();
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									
									var resultChecking=checkAttributeInList(listOfAttributesPractitioner,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listPractitionerAttributeIndex.push(iteratorHeader);
									}
								}//End of for iteratorHeader
								if(listPractitionerAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											var dicResourceExtracted={
											"type":"",
											"ligneIndex":"",
											"value":""
											};
											//Practitioner Initialization
											var oPractitioner={};
											oPractitioner= Object.create(Practitioner);
											oPractitioner.resourceType="Practitioner";
											var oName={};
											oName= Object.create(HumanName);
											oName.resourceType="HumanName";
											oName.use="official";
											
											var oAddress={};
											oAddress= Object.create(Address);
											oAddress.resourceType="Address";
											oPractitioner.telecom=[];
											oPractitioner.practitionerRole=[];
											var oPractitionerRole={};
											oPractitionerRole= Object.create(PractitionerRole);
											var practitionerSet=false;
											var listOfPractitionerIdentifier=[];
											var stageName=(dataFile[0][listPractitionerAttributeIndex[0]].trim().split("|"))[0];
											var practitionerNature=getPractitionerNature(stageName.trim());
											
											for(var iteratorValue=0;iteratorValue<listPractitionerAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]]!="")
												{
													var oAttribute=dataFile[0][listPractitionerAttributeIndex[iteratorValue]].trim();
													
													switch(oAttribute)
													{
														case practitionerSpecimenHandlingAttributesMapping.id:
															oPractitioner.id=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															var orgIdentifier={};
															oIdentifier=Object.create(Identifier);
															//assignment of Identifier
															oIdentifier.use="official";
															oIdentifier.type={"text":""+oAttribute};
															oIdentifier.system="http://hl7.org/fhir/";
															oIdentifier.value=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															listOfPractitionerIdentifier.push(oIdentifier);
															practitionerSet=true;
															break;
														case practitionerSpecimenHandlingAttributesMapping.name_family:
															oName.family=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oName.text+=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim()+" ";
															practitionerSet=true;
														break;
														case practitionerSpecimenHandlingAttributesMapping.name_given:
															oName.given=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oName.text+=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim()+" ";
															practitionerSet=true;;
														break;
														case practitionerSpecimenHandlingAttributesMapping.telecom_phone:
															var oContact={};
															oContact= Object.create(ContactPoint);
															oContact.resourceType="ContactPoint";
															oContact.system="phone";
															oContact.value=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oContact.use="home";
															oContact.rank="1";
															oPractitioner.telecom.push(oContact);
															practitionerSet=true;;
														break;
														case practitionerSpecimenHandlingAttributesMapping.telecom_email:
															var oContact={};
															oContact= Object.create(ContactPoint);
															oContact.resourceType="ContactPoint";
															oContact.system="email";
															oContact.value=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oContact.use="home";
															oContact.rank="2";
															oPractitioner.telecom.push(oContact);
															practitionerSet=true;
														break;
														case practitionerSpecimenHandlingAttributesMapping.gender:
															if(getAssociatedGenderValueSet(dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim())!="")
															{
																oPractitioner.gender=getAssociatedGenderValueSet(dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim());
															}
															practitionerSet=true;
														break;
														case practitionerSpecimenHandlingAttributesMapping.address:
															oAddress.text=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oPractitioner.address=[oAddress];
															practitionerSet=true;
														break;
														case practitionerSpecimenHandlingAttributesMapping.practitionerRole_managingOrganization:
															var organizationId=getOrganizationIdByName(dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim(),listOrganizationUnits);
															if(organizationId!=-1)
															{
																oPractitionerRole.managingOrganization={"reference":"Organization/"+organizationId};
															}
															else
															{
																oPractitionerRole.managingOrganization="";
															}
															practitionerSet=true;
														break;
														case practitionerSpecimenHandlingAttributesMapping.practitionerRole_role:
															var  oConcept={};
															oConcept= Object.create(CodeableConcept);
															oConcept.text=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oPractitionerRole.role=oConcept;
															practitionerSet=true;
														break;
													}//End switch
												}//end if dataFile[iteratorLigne]
											}//End for iteratorValue
											if(practitionerSet==true)
											{
												if(oPractitioner.id=="")
												{
													oPractitioner.id="practsp-"+idCounter+iteratorLigne;
													//oPractitioner.id="practsp-"+new Date().getTime();
												}
												oPractitioner.name=[oName];
												oPractitioner.identifier=listOfPractitionerIdentifier;
												oPractitioner.practitionerRole.push(oPractitionerRole);
												dicResourceExtracted.type="Practitioner";
												dicResourceExtracted.ligneIndex=iteratorLigne;
												dicResourceExtracted.value=oPractitioner;
												//console.log(dicResourceExtracted.value);
												listMappedResourceExtracted.push(dicResourceExtracted);
												if(practitionerNature=="care_provider")
												{
													//Identify care provider associated
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
														&& listMappedResourceExtracted[iteratorMappedResource].type=="Patient")
														{
															var resourceRef={"reference":"Practitioner/"+oPractitioner.id};
															listMappedResourceExtracted[iteratorMappedResource].value.careProvider.push(resourceRef);
															break;
														}
													}
												}
												if(practitionerNature=="specimen_collector")
												{
													//Identify specimen collected associated
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
														&& listMappedResourceExtracted[iteratorMappedResource].type=="Specimen")
														{
															var resourceRef={"reference":"Practitioner/"+oPractitioner.id};
															listMappedResourceExtracted[iteratorMappedResource].value.collection.collector=resourceRef;
															//console.log(listMappedResourceExtracted[iteratorMappedResource].value);
															break;
														}
													}
												}
												if(practitionerNature=="observation_performer")
												{
													//Identify specimen collected associated
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
														&& listMappedResourceExtracted[iteratorMappedResource].type=="Observation")
														{
															var resourceRef={"reference":"Practitioner/"+oPractitioner.id};
															listMappedResourceExtracted[iteratorMappedResource].value.performer.push(resourceRef);
															break;
														}
													}
												}
												
											}//End if practitionerSet
										}//End if dataFile[iteratorLigne]
									}//End for  iteratorLigne
								}//End if PractitionerAttributeIndex
								//Extract Practitioner Observation performer
								listPractitionerAttributeIndex=[];
								listOfAttributesPractitioner=[];
								listOfAttributesPractitioner=getListOfPractitionerObservationPerformerAttributeMapping();
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									
									var resultChecking=checkAttributeInList(listOfAttributesPractitioner,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listPractitionerAttributeIndex.push(iteratorHeader);
									}
								}//End of for iteratorHeader
								if(listPractitionerAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											var dicResourceExtracted={
											"type":"",
											"ligneIndex":"",
											"value":""
											};
											//Practitioner Initialization
											var oPractitioner={};
											oPractitioner= Object.create(Practitioner);
											oPractitioner.resourceType="Practitioner";
											var oName={};
											oName= Object.create(HumanName);
											oName.resourceType="HumanName";
											oName.use="official";
											
											var oAddress={};
											oAddress= Object.create(Address);
											oAddress.resourceType="Address";
											oPractitioner.telecom=[];
											oPractitioner.practitionerRole=[];
											var oPractitionerRole={};
											oPractitionerRole= Object.create(PractitionerRole);
											var practitionerSet=false;
											var listOfPractitionerIdentifier=[];
											var stageName=(dataFile[0][listPractitionerAttributeIndex[0]].trim().split("|"))[0];
											var practitionerNature=getPractitionerNature(stageName.trim());
											
											for(var iteratorValue=0;iteratorValue<listPractitionerAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]]!="")
												{
													var oAttribute=dataFile[0][listPractitionerAttributeIndex[iteratorValue]].trim();
													
													switch(oAttribute)
													{
														case practitionerObservationPerformerAttributesMapping.id:
															oPractitioner.id=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															var orgIdentifier={};
															oIdentifier=Object.create(Identifier);
															//assignment of Identifier
															oIdentifier.use="official";
															oIdentifier.type={"text":""+oAttribute};
															oIdentifier.system="http://hl7.org/fhir/";
															oIdentifier.value=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															listOfPractitionerIdentifier.push(oIdentifier);
															practitionerSet=true;
															break;
														case practitionerObservationPerformerAttributesMapping.name_family:
															oName.family=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oName.text+=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim()+" ";
															practitionerSet=true;
														break;
														case practitionerObservationPerformerAttributesMapping.name_given:
															oName.given=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oName.text+=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim()+" ";
															practitionerSet=true;;
														break;
														case practitionerObservationPerformerAttributesMapping.telecom_phone:
															var oContact={};
															oContact= Object.create(ContactPoint);
															oContact.resourceType="ContactPoint";
															oContact.system="phone";
															oContact.value=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oContact.use="home";
															oContact.rank="1";
															oPractitioner.telecom.push(oContact);
															practitionerSet=true;;
														break;
														case practitionerObservationPerformerAttributesMapping.telecom_email:
															var oContact={};
															oContact= Object.create(ContactPoint);
															oContact.resourceType="ContactPoint";
															oContact.system="email";
															oContact.value=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oContact.use="home";
															oContact.rank="2";
															oPractitioner.telecom.push(oContact);
															practitionerSet=true;
														break;
														case practitionerObservationPerformerAttributesMapping.gender:
															if(getAssociatedGenderValueSet(dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim())!="")
															{
																oPractitioner.gender=getAssociatedGenderValueSet(dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim());
															}
															practitionerSet=true;
														break;
														case practitionerObservationPerformerAttributesMapping.address:
															oAddress.text=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oPractitioner.address=[oAddress];
															practitionerSet=true;
														break;
														case practitionerObservationPerformerAttributesMapping.practitionerRole_managingOrganization:
															var organizationId=getOrganizationIdByName(dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim(),listOrganizationUnits);
															if(organizationId!=-1)
															{
																oPractitionerRole.managingOrganization={"reference":"Organization/"+organizationId};
															}
															else
															{
																oPractitionerRole.managingOrganization="";
															}
															practitionerSet=true;
														break;
														case practitionerObservationPerformerAttributesMapping.practitionerRole_role:
															var  oConcept={};
															oConcept= Object.create(CodeableConcept);
															oConcept.text=dataFile[iteratorLigne][listPractitionerAttributeIndex[iteratorValue]].trim();
															oPractitionerRole.role=oConcept;
															practitionerSet=true;
														break;
													}//End switch
												}//end if dataFile[iteratorLigne]
											}//End for iteratorValue
											if(practitionerSet==true)
											{
												if(oPractitioner.id=="")
												{
													oPractitioner.id="practperf-"+idCounter+iteratorLigne;
													//oPractitioner.id="practperf-"+new Date().getTime();
												}
												oPractitioner.name=[oName];
												oPractitioner.identifier=listOfPractitionerIdentifier;
												oPractitioner.practitionerRole.push(oPractitionerRole);
												dicResourceExtracted.type="Practitioner";
												dicResourceExtracted.ligneIndex=iteratorLigne;
												dicResourceExtracted.value=oPractitioner;
												//console.log(dicResourceExtracted.value);
												listMappedResourceExtracted.push(dicResourceExtracted);
												if(practitionerNature=="care_provider")
												{
													//Identify care provider associated
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
														&& listMappedResourceExtracted[iteratorMappedResource].type=="Patient")
														{
															var resourceRef={"reference":"Practitioner/"+oPractitioner.id};
															listMappedResourceExtracted[iteratorMappedResource].value.careProvider.push(resourceRef);
															break;
														}
													}
												}
												if(practitionerNature=="specimen_collector")
												{
													//Identify specimen collected associated
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
														&& listMappedResourceExtracted[iteratorMappedResource].type=="Specimen")
														{
															var resourceRef={"reference":"Practitioner/"+oPractitioner.id};
															listMappedResourceExtracted[iteratorMappedResource].value.collection.collector=resourceRef;
															console.log(listMappedResourceExtracted[iteratorMappedResource].value);
															break;
														}
													}
												}
												if(practitionerNature=="observation_performer")
												{
													//Identify specimen collected associated
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
														&& listMappedResourceExtracted[iteratorMappedResource].type=="Observation")
														{
															var resourceRef={"reference":"Practitioner/"+oPractitioner.id};
															listMappedResourceExtracted[iteratorMappedResource].value.performer.push(resourceRef);
															break;
														}
													}
												}
												
											}//End if practitionerSet
										}//End if dataFile[iteratorLigne]
									}//End for  iteratorLigne
								}//End if PractitionerAttributeIndex
								
								var listDiagnosticReportExtracted=[];
								var nbreOfHeaderAttributes=0;
								var listDiagnosticReportAttributeIndex=[];
								var listOfAttributesDiagnosticReport=getListOfDiagnosticReportAttributeMapping();	
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									
									var resultChecking=checkAttributeInList(listOfAttributesDiagnosticReport,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listDiagnosticReportAttributeIndex.push(iteratorHeader);
									}
								}//End for iteratorHeader
								if(listDiagnosticReportAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											var dicResourceExtracted={
											"type":"",
											"ligneIndex":"",
											"value":""
											};
											//Observation initialization
											var oDiagnosticReport={};
											oDiagnosticReport= Object.create(DiagnosticReport);
											oDiagnosticReport.resourceType="DiagnosticReport";
											var listOfDiagnosticReportIdentifier=[];
											var oEffectivePeriod={};
											oEffectivePeriod= Object.create(Period);
											oDiagnosticReport.request=[];
											oDiagnosticReport.specimen=[];
											oDiagnosticReport.result=[];
											oDiagnosticReport.performer="";
											var diagnosticReportIsSet=false;
											var effectivePeriodIsSet=false;
											for(var iteratorValue=0;iteratorValue<listDiagnosticReportAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]]!="")
												{
													var oAttribute=dataFile[0][listDiagnosticReportAttributeIndex[iteratorValue]].trim();
													switch(oAttribute)
													{
													case diagnosticReportAttributesMapping.identifier:
														var oIdentifier={};
														oIdentifier=Object.create(Identifier);
														//assignment of Identifier
														oIdentifier.use="official";
														oIdentifier.type={"text":"DiagnosticReport Identification"};
														oIdentifier.system="http://hl7.org/fhir/";
														oIdentifier.value=dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]];
														listOfDiagnosticReportIdentifier.push(oIdentifier);
														diagnosticReportIsSet=true;
														break;
													case diagnosticReportAttributesMapping.status:
														oDiagnosticReport.status=dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]];
														diagnosticReportIsSet=true;
														break;
													case diagnosticReportAttributesMapping.category:
														var oConcept={};
														oConcept=Object.create(CodeableConcept);
														oConcept.text=dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]];
														oDiagnosticReport.category=oConcept;
														diagnosticReportIsSet=true;
														break;
													case diagnosticReportAttributesMapping.code:
														var oConcept={};
														oConcept=Object.create(CodeableConcept);
														oConcept.text=dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]];
														oDiagnosticReport.code=oConcept;
														diagnosticReportIsSet=true;
														break;
													case diagnosticReportAttributesMapping.subject:
														if(formatPatientId==true)
														{
															oDiagnosticReport.subject={"reference":"Patient/"+dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]].trim()+"-"};
														}
														else if (formatPatientId==false)
														{
															oDiagnosticReport.subject={"reference":"Patient/"+dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]].trim()};
														}
														
														diagnosticReportIsSet=true;
														break;
													case diagnosticReportAttributesMapping.encounter:
														//oDiagnosticReport.encounter={"reference":"Encounter/"+dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]]};
														//diagnosticReportIsSet=true;
														break;
													case diagnosticReportAttributesMapping.effectiveDateTime:
														var processedDate=processDateFromCSVFile(dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]]);
														if(processedDate!="")
														{
															oDiagnosticReport.effectiveDateTime=formatDateInZform(processedDate);
															diagnosticReportIsSet=true;
														}
														break;
													case diagnosticReportAttributesMapping.effectivePeriod_start:
														var processedDate=processDateFromCSVFile(dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]]);
														if(processedDate!="")
														{
															oEffectivePeriod.start=processedDate;
															effectivePeriodIsSet=true;
															diagnosticReportIsSet=true;
														}
														break;
													case diagnosticReportAttributesMapping.effectivePeriod_end:
														var processedDate=processDateFromCSVFile(dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]]);
														if(processedDate!="")
														{
															oEffectivePeriod.end=processedDate;
															effectivePeriodIsSet=true;
															diagnosticReportIsSet=true;
														}
														break;
													case diagnosticReportAttributesMapping.issued:
														var processedDate=processDateFromCSVFile(dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]]);
														if(processedDate!="")
														{
															oDiagnosticReport.issued=formatDateInZform(processedDate);
															diagnosticReportIsSet=true;
														}
														break;
													case diagnosticReportAttributesMapping.performer:
														//oDiagnosticReport.performer={"reference":"Organization/"+dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]]};
														//diagnosticReportIsSet=true;
														break;
													case diagnosticReportAttributesMapping.request:
														//oDiagnosticReport.request=[{"reference":"DiagnosticOrder/"+dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]]}];
														//diagnosticReportIsSet=true;
														break;
													case diagnosticReportAttributesMapping.specimen:
														//oDiagnosticReport.specimen=[{"reference":"Specimen/"+dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]]}];
														//diagnosticReportIsSet=true;
														break;
													case diagnosticReportAttributesMapping.result:
														//oDiagnosticReport.result=[{"reference":"Observation/"+dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]]}];
														//diagnosticReportIsSet=true;
														break;
													case diagnosticReportAttributesMapping.imagingStudy:
														//oDiagnosticReport.imagingStudy=[];
														//diagnosticReportIsSet=true;
														break;
													case diagnosticReportAttributesMapping.image:
														//oDiagnosticReport.image=[];
														//diagnosticReportIsSet=true;
														break;
													case diagnosticReportAttributesMapping.conclusion:
														oDiagnosticReport.conclusion=dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]];
														diagnosticReportIsSet=true;
														break;
													case diagnosticReportAttributesMapping.codedDiagnosis:
														var oConcept={};
														oConcept=Object.create(CodeableConcept);
														oConcept.text=dataFile[iteratorLigne][listDiagnosticReportAttributeIndex[iteratorValue]];
														oDiagnosticReport.codedDiagnosis=[oConcept];
														diagnosticReportIsSet=true;
														break;
													case diagnosticReportAttributesMapping.presentedForm:
														oDiagnosticReport.presentedForm=[];
														diagnosticReportIsSet=true;
														break;
													}//End of switch
						
												}
												
											}//for iteratorValue
											if(diagnosticReportIsSet==true)
											{
												oDiagnosticReport.id="rep-"+idCounter+iteratorLigne;
												//oDiagnosticReport.id="rep-"+new Date().getTime();
												oDiagnosticReport.identifier=listOfDiagnosticReportIdentifier;
												if(effectivePeriodIsSet==true)
												{
													oDiagnosticReport.effectivePeriod=oEffectivePeriod;
												}
												//Add additional information for validation
												oDiagnosticReport.status="final";
												//By Default used Acyclovir for code
												var oConcept={};
												oConcept= Object.create(CodeableConcept);
												oConcept.text="Acyclovir";
												oConcept.code=[{"code":"1-8"}];
												oDiagnosticReport.code=oConcept;
												var patientIdAssociated=oDiagnosticReport.subject.reference.split("/")[1];
												var issuedDateTime=oDiagnosticReport.issued;
												var nbrDiagnosticOrder=getNbreResourceExtracted("DiagnosticOrder",listMappedResourceExtracted);
												var nbrSpecimen=getNbreResourceExtracted("Specimen",listMappedResourceExtracted);
												var nbrObservation=getNbreResourceExtracted("Observation",listMappedResourceExtracted);
												if(nbrDiagnosticOrder>0)
												{
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].type=="DiagnosticOrder" && 
															listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne)
														{
															var resourceRef={"reference":"DiagnosticOrder/"+listMappedResourceExtracted[iteratorMappedResource].value.id};
															oDiagnosticReport.request.push(resourceRef);
														}
													}
												}
												if(nbrSpecimen>0)
												{
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].type=="Specimen" && 
															listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne)
														{
															var resourceRef={"reference":"Specimen/"+listMappedResourceExtracted[iteratorMappedResource].value.id};
															oDiagnosticReport.specimen.push(resourceRef);
														}
													}
													
												}
												if(nbrObservation)
												{
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].type=="Observation" && 
															listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne)
														{
															var resourceRef={"reference":"Observation/"+listMappedResourceExtracted[iteratorMappedResource].value.id};
															oDiagnosticReport.result.push(resourceRef);
														}
													}
												}
												//There is no performer as practitioner, define patient Managing org as performer
												if(oDiagnosticReport.performer=="")
												{
													for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
													{
														if(listMappedResourceExtracted[iteratorMappedResource].type=="Patient" && 
															listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne)
														{
															var orgunitRef=listMappedResourceExtracted[iteratorMappedResource].value.managingOrganization;
															oDiagnosticReport.performer=orgunitRef;
														}
													}
													
												}
												dicResourceExtracted.type="DiagnosticReport";
												dicResourceExtracted.ligneIndex=iteratorLigne;
												dicResourceExtracted.value=oDiagnosticReport;
												//console.log(dicResourceExtracted.value);
												listMappedResourceExtracted.push(dicResourceExtracted);
											}
										}//end if dataFile[iteratorLigne].length
									}//end for iteratorLigne
								}//end if listDiagnosticReportAttributeIndex.length
								
								//Additional non clearly identifiable resource
								//Extract ListResource Reference for specimen
								var listListResourceExtracted=[];
								var nbreOfHeaderAttributes=0;
								var listListResourceAttributeIndex=[];
								var listOfAttributesListResource=specimenAttributesMapping.list_reference.split(",");
								//console.log(listOfAttributesListResource);
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									var resultChecking=checkAttributeInList(listOfAttributesListResource,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listListResourceAttributeIndex.push(iteratorHeader);
									}
								}//End of for iteratorHeader
								//console.log(listListResourceAttributeIndex);
								if(listListResourceAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											
											//Identify related Specimen resource associated
											var refSpecimenId=-1;
											for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
											{
												if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
												&& listMappedResourceExtracted[iteratorMappedResource].type=="Specimen")
												{
													refSpecimenId=listMappedResourceExtracted[iteratorMappedResource].value.id;
													break;
												}
											}
											
											
											for(var iteratorValue=0;iteratorValue<listListResourceAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]]!="")
												{
													var dicResourceExtracted={
													"type":"",
													"ligneIndex":"",
													"value":""
													};
													//List initialization;
													var oList= Object.create(List);
													oList.resourceType="List";
													var listResourceIdentifier=[];
													oList.entry=[];
													var listIsSet=false;
													oList.id="lst-"+idCounter+""+iteratorLigne;
													//oList.id="lst-"+new Date().getTime();
													oList.status="current";
													oList.mode="working";
													
													var oAttribute=dataFile[0][listListResourceAttributeIndex[iteratorValue]].trim();
													var note="";
													oList.title=oAttribute;
													var isDate=checkIfRecordIsDate( dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim());
													if(isDate==true)
													{
														note=processDateFromCSVFile(dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim());
													}
													else
													{
														note=dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim();
													}
													oList.note=note;
													oList.entry.push({"deleted":false,"item":{"reference":"Specimen/"+refSpecimenId}});
													//console.log(oList);
													dicResourceExtracted.type="List";
													dicResourceExtracted.ligneIndex=iteratorLigne;
													dicResourceExtracted.value=oList;
													listMappedResourceExtracted.push(dicResourceExtracted);
													
												}//end if dataFile[iteratorLigne]
											}//end for  var iteratorValue=0
											
										}//end if dataFile[iteratorLigne].length
									}//end for iteratorLigne
								}//End If listPractitionerAttributeIndex
								//console.log(listMappedResourceExtracted);
								//Extract ListResource Reference for Patient
								var nbreOfHeaderAttributes=0;
								var listListResourceAttributeIndex=[];
								var listOfAttributesListResource=patientAttributesMapping.list_reference.split(",");
								//console.log(listOfAttributesListResource);
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									var resultChecking=checkAttributeInList(listOfAttributesListResource,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listListResourceAttributeIndex.push(iteratorHeader);
									}
								}//End of for iteratorHeader
								if(listListResourceAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											
											//Identify related Specimen resource associated
											var refPatientId=-1;
											for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
											{
												if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
												&& listMappedResourceExtracted[iteratorMappedResource].type=="Patient")
												{
													refPatientId=listMappedResourceExtracted[iteratorMappedResource].value.id;
													break;
												}
											}
											
											for(var iteratorValue=0;iteratorValue<listListResourceAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]]!="")
												{
													var dicResourceExtracted={
													"type":"",
													"ligneIndex":"",
													"value":""
													};
													//List initialization;
													var oList= Object.create(List);
													oList.resourceType="List";
													var listResourceIdentifier=[];
													oList.entry=[];
													var listIsSet=false;
													oList.id="lst-"+idCounter+""+iteratorLigne;
													//oList.id="lst-"+new Date().getTime();
													oList.status="current";
													oList.mode="working";
													
													var oAttribute=dataFile[0][listListResourceAttributeIndex[iteratorValue]].trim();
													oList.title=oAttribute;
													var note="";
													var isDate=checkIfRecordIsDate( dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim());
													if(isDate==true)
													{
														var note=processDateFromCSVFile(dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim());
													}
													else
													{
														note=dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim();
													}
													oList.note=note;
													//oList.note=dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim();
													oList.entry.push({"deleted":false,"item":{"reference":"Patient/"+refPatientId}});
													//console.log(oList);
													dicResourceExtracted.type="List";
													dicResourceExtracted.ligneIndex=iteratorLigne;
													dicResourceExtracted.value=oList;
													listMappedResourceExtracted.push(dicResourceExtracted);
													
												}//end if dataFile[iteratorLigne]
											}//end for  var iteratorValue=0
											
										}//end if dataFile[iteratorLigne].length
									}//end for iteratorLigne
								}//End If listPractitionerAttributeIndex
								
								//Extract ListResource Reference for Practitioner
								var nbreOfHeaderAttributes=0;
								var listListResourceAttributeIndex=[];
								var listOfAttributesListResource=practitionerAttributesMapping.list_reference.split(",");
								//console.log(listOfAttributesListResource);
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									var resultChecking=checkAttributeInList(listOfAttributesListResource,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listListResourceAttributeIndex.push(iteratorHeader);
									}
								}//End of for iteratorHeader
								if(listListResourceAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											
											//Identify related Specimen resource associated
											var refPractitionerId=-1;
											for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
											{
												if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
												&& listMappedResourceExtracted[iteratorMappedResource].type=="Practitioner")
												{
													refPractitionerId=listMappedResourceExtracted[iteratorMappedResource].value.id;
													break;
												}
											}
											
											for(var iteratorValue=0;iteratorValue<listListResourceAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]]!="")
												{
													var dicResourceExtracted={
													"type":"",
													"ligneIndex":"",
													"value":""
													};
													//List initialization;
													var oList= Object.create(List);
													oList.resourceType="List";
													var listResourceIdentifier=[];
													oList.entry=[];
													var listIsSet=false;
													oList.id="lst-"+idCounter+""+iteratorLigne;
													//oList.id="lst-"+new Date().getTime();
													oList.status="current";
													oList.mode="working";
													
													var oAttribute=dataFile[0][listListResourceAttributeIndex[iteratorValue]].trim();
													oList.title=oAttribute;
													var note="";
													var isDate=checkIfRecordIsDate( dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim());
													if(isDate==true)
													{
														var note=processDateFromCSVFile(dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim());
													}
													else
													{
														note=dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim();
													}
													oList.note=note;
													//oList.note=dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim();
													oList.entry.push({"deleted":false,"item":{"reference":"Practitioner/"+refPractitionerId}});
													//console.log(oList);
													dicResourceExtracted.type="List";
													dicResourceExtracted.ligneIndex=iteratorLigne;
													dicResourceExtracted.value=oList;
													listMappedResourceExtracted.push(dicResourceExtracted);
													
												}//end if dataFile[iteratorLigne]
											}//end for  var iteratorValue=0
											
										}//end if dataFile[iteratorLigne].length
									}//end for iteratorLigne
								}//End If listPractitionerAttributeIndex
								
								//Extract ListResource Reference for DiagnosticOrder
								var nbreOfHeaderAttributes=0;
								var listListResourceAttributeIndex=[];
								var listOfAttributesListResource=orderAttributesMapping.list_reference.split(",");
								//console.log(listOfAttributesListResource);
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									var resultChecking=checkAttributeInList(listOfAttributesListResource,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listListResourceAttributeIndex.push(iteratorHeader);
									}
								}//End of for iteratorHeader
								if(listListResourceAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											
											//Identify related Specimen resource associated
											var refOrderId=-1;
											for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
											{
												if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
												&& listMappedResourceExtracted[iteratorMappedResource].type=="DiagnosticOrder")
												{
													refOrderId=listMappedResourceExtracted[iteratorMappedResource].value.id;
													break;
												}
											}
											
											for(var iteratorValue=0;iteratorValue<listListResourceAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]]!="")
												{
													var dicResourceExtracted={
													"type":"",
													"ligneIndex":"",
													"value":""
													};
													//List initialization;
													var oList= Object.create(List);
													oList.resourceType="List";
													var listResourceIdentifier=[];
													oList.entry=[];
													var listIsSet=false;
													oList.id="lst-"+idCounter+""+iteratorLigne;
													//oList.id="lst-"+new Date().getTime();
													oList.status="current";
													oList.mode="working";
													
													var oAttribute=dataFile[0][listListResourceAttributeIndex[iteratorValue]].trim();
													oList.title=oAttribute;
													var note="";
													var isDate=checkIfRecordIsDate( dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim());
													if(isDate==true)
													{
														var note=processDateFromCSVFile(dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim());
													}
													else
													{
														note=dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim();
													}
													oList.note=note;
													//oList.note=dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim();
													oList.entry.push({"deleted":false,"item":{"reference":"DiagnosticOrder/"+refOrderId}});
													//console.log(oList);
													dicResourceExtracted.type="List";
													dicResourceExtracted.ligneIndex=iteratorLigne;
													dicResourceExtracted.value=oList;
													listMappedResourceExtracted.push(dicResourceExtracted);
													
												}//end if dataFile[iteratorLigne]
											}//end for  var iteratorValue=0
											
										}//end if dataFile[iteratorLigne].length
									}//end for iteratorLigne
								}//End If listListResourceAttributeIndex
								
								//Extract ListResource Reference for Observation
								var nbreOfHeaderAttributes=0;
								var listListResourceAttributeIndex=[];
								var listOfAttributesListResource=observationAttributesMapping.list_reference.split(",");
								//console.log(listOfAttributesListResource);
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									var resultChecking=checkAttributeInList(listOfAttributesListResource,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listListResourceAttributeIndex.push(iteratorHeader);
									}
								}//End of for iteratorHeader
								if(listListResourceAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											
											//Identify related Specimen resource associated
											var refObservationId=-1;
											for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
											{
												if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
												&& listMappedResourceExtracted[iteratorMappedResource].type=="Observation")
												{
													refObservationId=listMappedResourceExtracted[iteratorMappedResource].value.id;
													break;
												}
											}
											
											for(var iteratorValue=0;iteratorValue<listListResourceAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]]!="")
												{
													var dicResourceExtracted={
													"type":"",
													"ligneIndex":"",
													"value":""
													};
													//List initialization;
													var oList= Object.create(List);
													oList.resourceType="List";
													var listResourceIdentifier=[];
													oList.entry=[];
													var listIsSet=false;
													oList.id="lst-"+idCounter+""+iteratorLigne;
													//oList.id="lst-"+new Date().getTime();
													oList.status="current";
													oList.mode="working";
													
													var oAttribute=dataFile[0][listListResourceAttributeIndex[iteratorValue]].trim();
													oList.title=oAttribute;
													var note="";
													var isDate=checkIfRecordIsDate( dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim());
													if(isDate==true)
													{
														var note=processDateFromCSVFile(dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim());
													}
													else
													{
														note=dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim();
													}
													oList.note=note;
													//oList.note=dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim();
													oList.entry.push({"deleted":false,"item":{"reference":"Observation/"+refObservationId}});
													//console.log(oList);
													dicResourceExtracted.type="List";
													dicResourceExtracted.ligneIndex=iteratorLigne;
													dicResourceExtracted.value=oList;
													listMappedResourceExtracted.push(dicResourceExtracted);
													
												}//end if dataFile[iteratorLigne]
											}//end for  var iteratorValue=0
											
										}//end if dataFile[iteratorLigne].length
									}//end for iteratorLigne
								}//End If listListResourceAttributeIndex
								
								//Extract ListResource Reference for DiagnosticReport
								var nbreOfHeaderAttributes=0;
								var listListResourceAttributeIndex=[];
								var listOfAttributesListResource=diagnosticReportAttributesMapping.list_reference.split(",");
								//console.log(listOfAttributesListResource);
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									var resultChecking=checkAttributeInList(listOfAttributesListResource,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listListResourceAttributeIndex.push(iteratorHeader);
									}
								}//End of for iteratorHeader
								if(listListResourceAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											
											//Identify related Specimen resource associated
											var refDiagnosticReportId=-1;
											for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
											{
												if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
												&& listMappedResourceExtracted[iteratorMappedResource].type=="DiagnosticReport")
												{
													refDiagnosticReportId=listMappedResourceExtracted[iteratorMappedResource].value.id;
													break;
												}
											}
											
											for(var iteratorValue=0;iteratorValue<listListResourceAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]]!="")
												{
													var dicResourceExtracted={
													"type":"",
													"ligneIndex":"",
													"value":""
													};
													//List initialization;
													var oList= Object.create(List);
													oList.resourceType="List";
													var listResourceIdentifier=[];
													oList.entry=[];
													var listIsSet=false;
													oList.id="lst-"+idCounter+""+iteratorLigne;
													//oList.id="lst-"+new Date().getTime();
													oList.status="current";
													oList.mode="working";
													
													var oAttribute=dataFile[0][listListResourceAttributeIndex[iteratorValue]].trim();
													oList.title=oAttribute;
													var note="";
													var isDate=checkIfRecordIsDate( dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim());
													if(isDate==true)
													{
														var note=processDateFromCSVFile(dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim());
													}
													else
													{
														note=dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim();
													}
													oList.note=note;
													//oList.note=dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim();
													oList.entry.push({"deleted":false,"item":{"reference":"DiagnosticReport/"+refDiagnosticReportId}});
													//console.log(oList);
													dicResourceExtracted.type="List";
													dicResourceExtracted.ligneIndex=iteratorLigne;
													dicResourceExtracted.value=oList;
													listMappedResourceExtracted.push(dicResourceExtracted);
													
												}//end if dataFile[iteratorLigne]
											}//end for  var iteratorValue=0
											
										}//end if dataFile[iteratorLigne].length
									}//end for iteratorLigne
								}//End If listListResourceAttributeIndex
								
								//Extract ListResource Reference for Condition
								var nbreOfHeaderAttributes=0;
								var listListResourceAttributeIndex=[];
								var listOfAttributesListResource=conditionAttributesMapping.list_reference.split(",");
								//console.log(listOfAttributesListResource);
								for(var iteratorHeader=0;iteratorHeader<dataFile[0].length;iteratorHeader++)
								{
									var itemToSearch=dataFile[0][iteratorHeader].trim();
									var resultChecking=checkAttributeInList(listOfAttributesListResource,itemToSearch);
									if(resultChecking==true)
									{
										nbreOfHeaderAttributes++;
										listListResourceAttributeIndex.push(iteratorHeader);
									}
								}//End of for iteratorHeader
								if(listListResourceAttributeIndex.length>0)
								{
									for(var iteratorLigne=1;iteratorLigne<dataFile.length;iteratorLigne++)
									{
										if(dataFile[iteratorLigne].length>0 && checkIfTableContainsNonEmptyValues(dataFile[iteratorLigne])==true)
										{
											
											//Identify related Specimen resource associated
											var refConditionReportId=-1;
											for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
											{
												if(listMappedResourceExtracted[iteratorMappedResource].ligneIndex==iteratorLigne
												&& listMappedResourceExtracted[iteratorMappedResource].type=="Condition")
												{
													refConditionReportId=listMappedResourceExtracted[iteratorMappedResource].value.id;
													break;
												}
											}
											
											for(var iteratorValue=0;iteratorValue<listListResourceAttributeIndex.length;iteratorValue++)
											{
												if(dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]]!="")
												{
													var dicResourceExtracted={
													"type":"",
													"ligneIndex":"",
													"value":""
													};
													//List initialization;
													var oList= Object.create(List);
													oList.resourceType="List";
													var listResourceIdentifier=[];
													oList.entry=[];
													var listIsSet=false;
													oList.id="lst-"+idCounter+""+iteratorLigne;
													//oList.id="lst-"+new Date().getTime();
													oList.status="current";
													oList.mode="working";
													
													var oAttribute=dataFile[0][listListResourceAttributeIndex[iteratorValue]].trim();
													oList.title=oAttribute;
													var note="";
													var isDate=checkIfRecordIsDate( dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim());
													if(isDate==true)
													{
														var note=processDateFromCSVFile(dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim());
													}
													else
													{
														note=dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim();
													}
													oList.note=note;
													//oList.note=dataFile[iteratorLigne][listListResourceAttributeIndex[iteratorValue]].trim();
													oList.entry.push({"deleted":false,"item":{"reference":"Condition/"+refConditionReportId}});
													//console.log(oList);
													dicResourceExtracted.type="List";
													dicResourceExtracted.ligneIndex=iteratorLigne;
													dicResourceExtracted.value=oList;
													listMappedResourceExtracted.push(dicResourceExtracted);
													
												}//end if dataFile[iteratorLigne]
											}//end for  var iteratorValue=0
											
										}//end if dataFile[iteratorLigne].length
									}//end for iteratorLigne
								}//End If listListResourceAttributeIndex
								
							
								//Put all associated resource to appropriate list to construct Bundle
								for(var iteratorMappedResource=0;iteratorMappedResource<listMappedResourceExtracted.length;iteratorMappedResource++)
								{
									if(listMappedResourceExtracted[iteratorMappedResource].type=="Patient")
									{
										listPatientExtracted.push(listMappedResourceExtracted[iteratorMappedResource].value);
									}
									else if (listMappedResourceExtracted[iteratorMappedResource].type=="Specimen")
									{
										listSpecimenExtracted.push(listMappedResourceExtracted[iteratorMappedResource].value)
									}
									else if (listMappedResourceExtracted[iteratorMappedResource].type=="Condition")
									{
										listConditionExtracted.push(listMappedResourceExtracted[iteratorMappedResource].value)
									}
									else if (listMappedResourceExtracted[iteratorMappedResource].type=="DiagnosticOrder")
									{
										listDiagnosticOrderExtracted.push(listMappedResourceExtracted[iteratorMappedResource].value)
									}
									else if (listMappedResourceExtracted[iteratorMappedResource].type=="Observation")
									{
										listObservationExtracted.push(listMappedResourceExtracted[iteratorMappedResource].value)
									}
									else if (listMappedResourceExtracted[iteratorMappedResource].type=="List")
									{
										listListResourceExtracted.push(listMappedResourceExtracted[iteratorMappedResource].value)
									}
									else if (listMappedResourceExtracted[iteratorMappedResource].type=="Practitioner")
									{
										listPractitionerExtracted.push(listMappedResourceExtracted[iteratorMappedResource].value)
									}
									else if (listMappedResourceExtracted[iteratorMappedResource].type=="DiagnosticReport")
									{
										listDiagnosticReportExtracted.push(listMappedResourceExtracted[iteratorMappedResource].value)
									}
								}
								//console.log(listPractitionerExtracted[3]);
								if (listPatientExtracted.length>0)
								{
									
									var oBundle={};
									oBundle=BuildBundleResponse([],listPatientExtracted,listPractitionerExtracted,listSpecimenExtracted,listConditionExtracted,listDiagnosticOrderExtracted,
									listObservationExtracted,listDiagnosticReportExtracted,listListResourceExtracted,listBasicExtracted);
									var requestContent=JSON.stringify(oBundle);
									//console.log(requestContent);
									
									entityAPI.postData(oBundle.id,requestContent,fileName,function(res)
									{
										console.log(res[0]);
										entityAPI.moveFileToTreated(res[1]);
									});
								}
								else
								{
									//console.log(listPatientExtrated.length);
									console.log("No patient mapped information found!: "+fileName);
									entityAPI.moveFileToErrors(fileName);
								}
							});
							
							
							
							});//End entityAPI.GetAllOrgUnits
							
						}//End if nbreOfHeaderAttributes
						else
						{
							console.log("Invalid file format on patient headers attributes: "+fileName);
							//res.send("Invalid file format");
							entityAPI.moveFileToErrors(fileName);
						}
					}
					else
					{
						//res.send("Invalid file format");
						console.log("Invalid file format on headers: "+fileName);
						entityAPI.moveFileToErrors(fileName);
					}
				}
				else
				{
					//res.send("Invalid file format");
					console.log("Invalid file format on data file length :"+fileName);
					entityAPI.moveFileToErrors(fileName);
				}
				
			  });//End of dataFile call
			//console.log("----End of operation----");
		});//End entityAPI.getListOfFiles
		//console.log(listResourceExtracted);
		//res.send('{"treated":"ok"}')  
		  
			
			//console.log(dataFile);
			//entityAPI.moveFileToTreated(listCsvFile[iterator]);
	  
	}
	
	downloadcsv=function (req, res)
	{
		var filePath=dataFileLocation;
		console.log(filePath);
		entityAPI.getListOfFiles(filePath,function (resfileName)
		{
			var fileName=resfileName;
			if(fileName.includes(".csv")==true)
			{
				console.log("*************"+dataFileLocation);
				res.download(dataFileLocation+"/"+fileName);
			}
		});
		
	}
	
	//************************************************************************************//
	
	
	function errorHandler(err, req, res, next) {
	  if (res.headersSent) {
		return next(err);
	  }
	  res.status(500);
	  res.render('error', { error: err });
	}
  app = express();
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded());
  app.use(express.static(entityAPI.resolvePathDirectory(__dirname,'public')));
  app.use(errorHandler);
  app.use(session({secret: '2C44774A-D649-4D44-9535-46E296EF984F'}));
  // Authentication middleware
  app.use(function(req, res, next) {
	if (req.session && req.session.admin)
	res.locals.admin = true;
	next();
  });
// Authorization Middleware
  var authorize = function(req, res, next) {
	if (req.session && req.session.admin)
	return next();
	else
	return res.send(401);
  };
  //app.use(express.json());

  //app.get("/trackedentities", entityinstances);
  
	app.get ("/trackedentities", function (req,res,next)
	{
		
		if(checkMappingExist()==false)
		//if(true)
		{
			//console.log ("Entered ....");
			console.log("No mapping has been done between the tracker and the fhir ressources. Perform the mapping to proceed!");
			res.send("No mapping has been done between the tracker and the fhir ressources. Perform the mapping to proceed!");
			//app.close();
			getMetaDataForLab(progAndStagesTracked);
			//process.exit(0);
		}
		else
		{
			getTrackedEntities(progAndStagesTracked,req,res,next);
		}
		//getEntityinstances(req,res,next);
	  });
	  app.get ("/generatefilemap", function (req,res,next)
		{
			getMetaDataForLab(progAndStagesTracked);
		});
	app.get ("/trackedentities_csv", function (req,res,next)
	{
		console.log("Generation of csv template");
		res.send("Generation of csv template");
		getMetaDataForLab(progAndStagesTracked);
	});
	
	app.get ("/uploadfile",authorize,function (req,res,next)
	{
		res.sendFile(entityAPI.resolvePathDirectory(__dirname,'views/index.html'));
	});
	app.get ("/", function (req,res,next)
	{
		res.sendFile(entityAPI.resolvePathDirectory(__dirname,'views/login.html'));
	});
	app.get ("/login", function (req,res,next)
	{
		res.sendFile(entityAPI.resolvePathDirectory(__dirname,'views/login.html'));
	});
	app.get ("/logout", function (req,res,next)
	{
		req.session.destroy();
		res.redirect('/');
	});
	app.post ("/login", function (req,res,next)
	{
		var username=req.body.username;
		var password=req.body.password;
		if(password=="" || username=="")
		{
			res.sendFile(entityAPI.resolvePathDirectory(__dirname,'views/login_error.html'));
		}
		else
		{
			var credentials=""+username+":"+password;
			//console.log(credentials);
			entityAPI.authenticate(credentials,function(authInfo)
			{
				//console.log(authInfo);
				//res.redirect('/uploadfile');
				
				if(authInfo=='Bad credentials')
				{
						res.sendFile(entityAPI.resolvePathDirectory(__dirname,'views/login_error.html'));
					
				}
				else
				{
					req.session.user=req.body.username;
					req.session.admin=true;
					res.redirect('/uploadfile');
				}
			});
			
			
		}
		
		//console.log(req.body.password);
	});
	app.post("/upload",entityAPI.processUploadData);
	app.get('/downloadcsv', function(req, res) {
		//console.log("Generation of csv template");
		//getMetaDataForLab(progAndStagesTracked);
		downloadcsv(req, res);
	});
	app.get ("/csv2fhir", function (req,res,next)
	{
		console.log("Reading of csv file content");
		convertcsv2fhir(req,res,next);
		//console.log("End of operation");
	}); 
  server = app.listen(process.env.PORT || 8083, function() {
    return console.log("Service DHIS2 tracked converstion to Fhir is running on port:" + (server.address().port));
  });

}).call(this);
